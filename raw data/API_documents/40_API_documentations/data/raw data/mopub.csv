class_name,class_description,method,method_description,data_type
AdapterConfiguration,"An interface containing methods used for configuring adapters and network SDKs. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.",getAdapterVersion(),"Description: Returns the adapter version. This is typically a four-digit version scheme of which the leftmost three digits correspond to the network SDK version, and the last digit corresponds to the minor version number referring to an adapter release.",public String  
AdapterConfiguration,"An interface containing methods used for configuring adapters and network SDKs. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.",getBiddingToken(Context context),"Description: Returns the advanced bidding token, if this adapter has advanced bidding enabled; otherwise, return null.",public String  
AdapterConfiguration,"An interface containing methods used for configuring adapters and network SDKs. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.",getCachedInitializationParameters(Context context),Description: Returns a map of network initialization parameters. This map is passed to the setCachedInitializationParameters() method.,public String  
AdapterConfiguration,"An interface containing methods used for configuring adapters and network SDKs. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.",getMoPubNetworkName(),"Description: Returns the MoPub-internal name for this particular network, typically a lowercase string representing the network name. Underscores should be used if the string needs spaces.",public String  
AdapterConfiguration,"An interface containing methods used for configuring adapters and network SDKs. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.",getMoPubRequestOptions(),Description: Returns the map of options passed to our ad server.,public String  
AdapterConfiguration,"An interface containing methods used for configuring adapters and network SDKs. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.",getNetworkSdkVersion(),Description: Returns the version of the network SDK.,public String  
AdapterConfiguration,"An interface containing methods used for configuring adapters and network SDKs. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.","initializeNetwork(Context context, String configuration, OnNetworkInitializationFinishedListener listener)",Description: Initializes the ad network SDK. This logic executes alongside the initialization of the MoPub SDK (the initializeSdk() method). Ensure that the custom event always calls onNetworkInitializationFinished() afterward.,public void  
AdapterConfiguration,"An interface containing methods used for configuring adapters and network SDKs. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.","setCachedInitializationParameters(Context context, String configuration)",Description: Save initialization parameters for future use.,public void  
AdapterConfiguration,"An interface containing methods used for configuring adapters and network SDKs. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.",setMoPubRequestOptions(String moPubRequestOptions),Description: Sets a map of request options to send to the MoPub ad server.,public void  
BaseAdapterConfiguration,"A collection of methods that apply to the SDK as a whole. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.","setCachedInitializationParameters(Context context, String initializationParameters)",Description: Save initialization parameters after the first ad request for future use. Adapters should call this method in passing a map containing the network parameters.,public void  
BaseAdapterConfiguration,"A collection of methods that apply to the SDK as a whole. Publishers can subclass this class to initialize the network SDK, return SDK adapter versions, return the Advanced Bidding token, and return the network name.",setMoPubRequestOptions(String moPubRequestOptions),Description: Sets a map of request options to send to the MoPub ad server.,public void  
Constants,Global constants,AD_EXPIRATION_DELAY,Description: A constant representing 4 hours in milliseconds used by the MoPub SDK to expire unused creatives.,public static final int  
Constants,Global constants,AD_HANDLER,Description: A String consisting of /m/ad used by the MoPub SDK as part of ad URLs to the ad server.,public static final String  
Constants,Global constants,CONVERSION_TRACKING_HANDLER,Description: A String consisting of /m/open used by the MoPub SDK as part of ad URLs to report conversion tracking to the ad server.,public static final String  
Constants,Global constants,FIFTEEN_MINUTES_MILLIS,Description: A constant representing 15 minutes in milliseconds used by the MoPub SDK.,public static final int  
Constants,Global constants,FOUR_HOURS_MILLIS,Description: See AD_EXPIRATION_DELAY.,public static final int  
Constants,Global constants,GDPR_CONSENT_HANDLER,Description: A String consisting of /m/gdpr_consent_dialog used by the MoPub SDK as part of ad URLs to report activities related to the consent dialog for GDPR.,public static final String  
Constants,Global constants,GDPR_SYNC_HANDLER,"Description: A String consisting of /m/gdpr_sync used by the MoPub SDK as part of ad URLs to report a GDPR sync, typically occurring when the SDK initializes.",public static final String  
Constants,Global constants,HOST,Description: A String consisting of ads.mopub.com used by the MoPub SDK as part of ad URLs to the ad server.,public static final String  
Constants,Global constants,HTTP,Description: A String consisting of http used by the MoPub SDK as protocol for ad URLs to the ad server.,public static final String  
Constants,Global constants,HTTPS,Description: A String consisting of https used by the MoPub SDK as protocol for ad URLs to the ad server.,public static final String  
Constants,Global constants,INTENT_SCHEME,Description: A String consisting of intent used by the MoPub SDK when resolving URL click-throughs.,public static final String  
Constants,Global constants,NATIVE_VAST_VIDEO_CONFIG,Description: A String consisting of native_vast_video_config used by the MoPub SDK for handling native video.,public static final String  
Constants,Global constants,NATIVE_VIDEO_ID,Description: A String consisting of native_video_id used by the MoPub SDK for handling native video.,public static final String  
Constants,Global constants,POSITIONING_HANDLER,Description: A String consisting of /m/pos used by the MoPub SDK for handling native ad positioning.,public static final String  
Constants,Global constants,TEN_MB,Description: A constant representing 10MB used by the MoPub SDK for handling its local cache on the device.,public static final int  
Constants,Global constants,TEN_SECONDS_MILLIS,Description: A constant representing 10 seconds in milliseconds used by the MoPub SDK to handle ad response timeout for banner.,public static final int  
Constants,Global constants,THIRTY_SECONDS_MILLIS,Description: A constant representing 30 seconds in milliseconds used by the MoPub SDK to handle ad response timeout for interstitial and rewarded video.,public static final int  
Constants,Global constants,UNUSED_REQUEST_CODE,Description: A constant containing an integer used by the MoPub sample app when requesting user permissions.,public static final int  
Constants,Global constants,VIDEO_TRACKING_EVENTS_KEY,Description: A String consisting of “events” used by the MoPub SDK for internal VAST video event tracking.,public static final String  
Constants,Global constants,VIDEO_TRACKING_URL_MACRO,Description: A String consisting of %%VIDEO_EVENT%% used by the MoPub SDK for internal VAST video event tracking.,public static final String  
Constants,Global constants,VIDEO_TRACKING_URLS_KEY,Description: A String consisting of “urls” used by the MoPub SDK for internal VAST video event tracking.,public static final String  
LifeCycleListener,This is a uniform interface to mediation SDKs that need to know when Activity lifecycle events occur.,onBackPressed(Activity activity),"Description: If required by a mediation SDK, call MoPub.onBackPressed(this) when the Android onBackPressed() is invoked.",public void  
LifeCycleListener,This is a uniform interface to mediation SDKs that need to know when Activity lifecycle events occur.,onCreate(Activity activity),"Description: If required by a mediation SDK, call MoPub.onCreate(this) when the Android onCreate() is invoked.",public void  
LifeCycleListener,This is a uniform interface to mediation SDKs that need to know when Activity lifecycle events occur.,onDestroy(Activity activity),"Description: If required by a mediation SDK, call MoPub.onDestroy(this) when the Android onDestroy() is invoked.",public void  
LifeCycleListener,This is a uniform interface to mediation SDKs that need to know when Activity lifecycle events occur.,onPause(Activity activity),"Description: If required by a mediation SDK, call MoPub.onPause(this) when the Android onPause() is invoked.",public void  
LifeCycleListener,This is a uniform interface to mediation SDKs that need to know when Activity lifecycle events occur.,onRestart(Activity activity),"Description: If required by a mediation SDK, call MoPub.onRestart(this) when the Android onRestart() is invoked.",public void  
LifeCycleListener,This is a uniform interface to mediation SDKs that need to know when Activity lifecycle events occur.,onResume(Activity activity),"Description: If required by a mediation SDK, call MoPub.onResume(this) when the Android onResume() is invoked.",public void  
LifeCycleListener,This is a uniform interface to mediation SDKs that need to know when Activity lifecycle events occur.,onStart(Activity activity),"Description: If required by a mediation SDK, call MoPub.onStart(this) when the Android onStart() is invoked.",public void  
LifeCycleListener,This is a uniform interface to mediation SDKs that need to know when Activity lifecycle events occur.,onStop(Activity activity),"Description: If required by a mediation SDK, call MoPub.onStop(this) when the Android onStop() is invoked.",public void  
LocationAwareness,An enum containing constants corresponding to the granular level of location data to be collected.,DISABLED,Description: Disables MoPub’s location tracking when passed to MoPub.setLocationAwareness().,public  
LocationAwareness,An enum containing constants corresponding to the granular level of location data to be collected.,NORMAL,Description: Allows MoPub’s location tracking. This mode is the default if not set otherwise.,public  
LocationAwareness,An enum containing constants corresponding to the granular level of location data to be collected.,TRUNCATED,Description: Truncates the precision of location data passed to MoPub when using MoPub.setLocationPrecision(int precision).,public  
LogLevel,Enums representing different verbosity levels for SDK log statements. Refer to our instructions on using device logs for usage assistance.,DEBUG,Description: An enum corresponding to the most verbose log level used by the MoPub SDK. All log statements will be printed to the console. It may also be in use by mediation ad SDKs if the adapters forward it.,public final  
LogLevel,Enums representing different verbosity levels for SDK log statements. Refer to our instructions on using device logs for usage assistance.,INFO,Description: An enum corresponding to the least verbose log level used by the MoPub SDK. Not all log statements will be printed to the console. It may also be in use by mediation ad SDKs if the adapters forward it.,public final  
LogLevel,Enums representing different verbosity levels for SDK log statements. Refer to our instructions on using device logs for usage assistance.,NONE,"Description: An enum corresponding to not setting any log level for the MoPub SDK, and mediation ad SDKs. No log statements will be printed to the console wherever applicable (some mediation ad SDKs may continue logging events if adapters cannot mute them via an API).",public final  
LogLevel,Enums representing different verbosity levels for SDK log statements. Refer to our instructions on using device logs for usage assistance.,valueOf(final int level),Description: Returns the LogLevel corresponding to the int value passed in. Will return NONE by default. This valueOf overload is used to get the associated LogLevel enum from an int.,public static LogLevel  
LogLevel,Enums representing different verbosity levels for SDK log statements. Refer to our instructions on using device logs for usage assistance.,valueOf(String name),Description: Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. Extraneous whitespace characters are not permitted.,public static LogLevel  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",canCollectPersonalInformation(),"Description: For GDPR-applicable cases, returns a boolean indicating whether the user has provided consent for MoPub and its partners to collect and process personal data. Returns true if consent is allowed and personal information may be collected, false otherwise",public static boolean  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",disableViewability(ExternalViewabilitySessionManager.ViewabilityVendor vendor),Description: Disables viewability tracking with Moat and IAS. Refer here for additional usage instructions.,public static void  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",getAdapterConfigurationInfo(),"Description: Gets an instance of the configuration manager, one of which is created for every ad network to manage its initialization and all its metadata. Returns a list of MoPub-supported networks, also available here.",public static String  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",getBrowserAgent(),"Description: Returns the browser agent. If the user’s browser experience is opened in the MoPub in-app browser, returns IN-APP; if it’s opened in the device’s native browser, returns NATIVE. When a user clicks on a link within an ad, by default we open the landing page in the MoPub in-app browser; however, the click-through URL can be configured to use the click-destination scheme to open in the device’s native browser. Learn more here.",public static MoPub.BrowserAgent  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",getLocationAwareness(),"Description: Location awareness provides additional GPS data to MoPub, enabling more precise targeting of ads. By default, the MoPub SDK collects latitude and longitude. Returns NORMAL (for maximum location disclosure), TRUNCATED (for high-level location disclosure whose precision you can customize), or DISABLED (publisher does not wish to disclose location).",public static MoPub.LocationAwareness  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",getLocationPrecision(),"Description: Returns the custom location disclosure (to what precision latitude and longitude are collected) when LocationAwareness is set to TRUNCATED. Location awareness provides additional GPS data to MoPub, enabling more precise targeting of ads. By default, the MoPub SDK collects latitude and longitude. Returns NORMAL (for maximum location disclosure), TRUNCATED (for high-level location disclosure whose precision you can customize), or DISABLED (publisher does not wish to disclose location).",public static int  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",getMinimumLocationRefreshTimeMillis(),Description: Returns a number in milliseconds corresponding to how frequently the MoPub SDK refreshes the device location. Default setting is 60000 milliseconds (60 seconds).,public static long  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",getPersonalInformationManager(),"Description: In GDPR-applicable cases, returns an instance of the PersonalInformationManager, which manages the consent dialog.",public static PersonalInfoManager  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.","initializeSdk(Context context, SdkConfiguration sdkConfiguration, SdkInitializationListener sdkInitializationListener)","Description: Initializes the MoPub SDK. After integrating the MoPub SDK and creating an ad unit, this method must be called before sending any ad requests. This method must be called with any valid ad unit once per app’s lifecycle, typically on app launch. Initialization is required for several functions, including GDPR consent mechanisms, rewarded video pre-initialization, mediation SDKs initialization, logging, Advanced Bidding, and legitimate interest. This method runs the rewarded video custom event initialization any number of times, but the SDK itself can only be initialized once, and the rewarded ads module can only be initialized once. Learn more here.",public static void  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",isSdkInitialized(),Description: Returns whether the MoPub SDK has been initialized via initializeSDK(); false otherwise..,public static boolean  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",resetBrowserAgent(),Deprecated as of 4.15.0.,public static void  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",setAllowLegitimateInterest(boolean allowed),"Description: Enables the legitimate interest flag during initialization. The MoPub SDK enables mediated networks to collect users’ personal data based on legitimate interest basis when publishers opt in. Refer to our Legitimate Interest Support documentation for more GDPR details, as well as to our integration instructions.",public static void  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",setBrowserAgent(MoPub.BrowserAgent browserAgent),"Description: Specifies whether a user’s browser experience is opened in the MoPub in-app browser (IN-APP) or the device’s native browser (NATIVE). When a user clicks on a link within an ad, by default we open the landing page in the MoPub in-app browser; however, the click-through URL can be configured to use the click-destination scheme to open in the device’s native browser. Learn more here.",public static void  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",setLocationAwareness(MoPub.LocationAwareness locationAwareness),"Description: Location awareness provides additional GPS data to MoPub, enabling more precise targeting of ads. By default, the MoPub SDK collects latitude and longitude. Setting to DISABLED prevents passing this data.",public static void  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",setLocationPrecision(int precision),"Description: Specifies custom location disclosure (to what precision latitude and longitude are collected) when LocationAwareness is set to TRUNCATED. Location awareness provides additional GPS data to MoPub, enabling more precise targeting of ads. By default, the MoPub SDK collects latitude and longitude.",public static void  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",setMinimumLocationRefreshTimeMillis(long minimumLocationRefreshTimeMillis),Description: Specifies how frequently the MoPub SDK should refresh the device location. Default setting is 60000 milliseconds.,public static void  
MoPub,"A collection of methods that apply to the SDK as a whole. Currently, publishers can use this class to initialize the SDK, specify location tracking preferences and its precision, set the browser agent, and address GDPR specifics.",shouldAllowLegitimateInterest(),Description: Checks whether legitimate interest is allowed and returns true if allowed; false otherwise. The MoPub SDK enables mediated networks to collect users’ personal data based on legitimate interest basis when publishers opt in. More details here and integration details here.,public static boolean  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,AD_SUCCESS,Description: An ad has been successfully loaded.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,ADAPTER_CONFIGURATION_ERROR,"Description: An adapter or custom event has been configured incorrectly. For example, required keys needed by the adapter may be unavailable in the ad response.",public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,ADAPTER_INITIALIZATION_SUCCESS,Description: An adapter or custom event has successfully initialized. This initialization occurs in parallel with the MoPub SDK initialization via MoPub.initializeSdk().,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,ADAPTER_NOT_FOUND,Description: An adapter or custom event class instantiated by the MoPub SDK is not found in the current app project. Make sure the classes have been integrated properly and exist in the exported APK.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,CANCELLED,Description: An ad request has been cancelled. Only used in SDK tests.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,DO_NOT_TRACK,Description: The user has enabled limited ad tracking on the device. Dispatched in onConsentDialogLoadFailed() by the SDK if a consent dialog is attempted to load while limited ad tracking is enabled.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,EXPIRED,Description: See Constants.AD_EXPIRATION_DELAY.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,GDPR_DOES_NOT_APPLY,Description: GDPR does not apply. Ignoring consent-related actions.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,INTERNAL_ERROR,Description: Unable to serve ad due to invalid internal state.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,MISSING_AD_UNIT_ID,Description: Unable to serve ad due to missing or empty ad unit ID.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,MRAID_LOAD_ERROR,Description: Error loading MRAID ad.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NETWORK_INVALID_STATE,Description: Third-party network failed due to invalid internal state.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NETWORK_NO_FILL,Description: Third-party network failed to provide an ad.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NETWORK_TIMEOUT,Description: Third-party network failed to respond in a timely manner.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NO_CONNECTION,Description: No internet connection detected.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NO_FILL,Description: No ads found.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,RENDER_PROCESS_GONE_UNSPECIFIED,Description: Render process is gone for this WebView. Unspecified cause.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,RENDER_PROCESS_GONE_WITH_CRASH,Description: Render process for this WebView has crashed.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,REWARD_NOT_SELECTED,Description: Reward not selected for rewarded ad.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,REWARDED_CURRENCIES_PARSING_ERROR,Description: Error parsing rewarded currencies JSON header.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,SERVER_ERROR,Description: Unable to connect to MoPub adserver.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,UNSPECIFIED,Description: Unspecified error.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,VIDEO_CACHE_ERROR,Description: Error creating a cache to store downloaded videos.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,VIDEO_DOWNLOAD_ERROR,Description: Error downloading video.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,VIDEO_NOT_AVAILABLE,Description: No video loaded for ad unit.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,VIDEO_PLAYBACK_ERROR,Description: Error playing a video.,public final  
MoPubErrorCode,Recognized error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,WARMUP,Description: Ad unit is warming up. Try again in a few minutes.,public final  
MoPubLog,An SDK- and adapter-wide logger used by the MoPub SDK and mediation adapters to print information to the console. Refer to our documentation on using device logs for more information.,setLogLevel(LogLevel logLevel),"Description: Pass in a MoPubLog.LogLevel constant to set the log level. This affects the verbosity of SDK log messages, including mediation.",public static void  
OnNetworkInitializationFinishedListener,An interface to be implemented by each mediation network in its AdapterConfiguration class when initializing its SDK.,"onNetworkInitializationFinished(Class<? extends AdapterConfiguration> clazz, MoPubErrorCode moPubErrorCode)",Description: A listener the AdapterConfiguration class must call to notify the MoPub SDK once it has initialized the network SDK.,public void  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",canCollectPersonalInformation(),Description: Returns whether the SDK is allowed to collect user-identifiable data. Returns true if it is allowed or when GDPR does not apply; false otherwise.,public final boolean  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",forceGdprApplies(),Description: Forces the SDK to treat this app as in a GDPR-applicable region. Setting this will permanently force GDPR rules for this user unless this app is uninstalled or the data for this app is cleared.,public void  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",gdprApplies(),"Description: Returns whether the SDK thinks the user is in a GDPR-applicable region. Returns true for in a GDPR region; false for not in a GDPR region, and null for unknown. This value can be overwritten to true by setting forceGdprApplies(). Returns true for in a GDPR region; false for not in a GDPR region, and null for unknown.",public Boolean  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",getConsentData(),"Description: Returns ConsentData, a snapshot of the underlying data store. Intended for use by whitelisted publishers only. Gets a copy of the current and consented vendor list and privacy policy and their versions.",public ConsentData  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",getPersonalInfoConsentStatus(),"Description: Returns ConsentStatus representing the user’s current consent status. In general, publishers should not query this directly. Instead, use canCollectPersonalInformation.",public ConsentStatus  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",grantConsent(),Description: For use by whitelisted publishers only. Grants consent to collect personally identifiable information for the current user.,public void  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",isConsentDialogReady(),Description: Whether the consent dialog is done loading and is ready to show. Returns true if yes; false otherwise.,public boolean  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",loadConsentDialog(ConsentDialogListener consentDialogListener),Description: Issues a request to load the MoPub consent dialog.,public void  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",requestSync(boolean force),Description: Called internally to request a sync to the ad server about consent status and other metadata.,public void  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",revokeConsent(),Description: Denies consent to collect personally identifiable information for the current user.,public void  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",setAllowLegitimateInterest(boolean allowed),Description: Set the allowance of legitimate interest.,public void  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",shouldAllowLegitimateInterest(),Description: Checks if legitimate interest is allowed. Returns true if legitimate interest is allowed; false otherwise.,public boolean  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",shouldShowConsentDialog(),Description: Checks to see if a publisher should load and then show a consent dialog. Returns true if consent dialog should be loaded; false otherwise.,public boolean  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",showConsentDialog(),"Description: If the MoPub consent dialog is loaded, then shows it. Returns true if the consent dialog is ready to be shown; false otherwise.",public boolean  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",subscribeConsentStatusChangeListener(ConsentStatusChangeListener consentStatusChangeListener),Description: Adds a listener for consent status changes.,public void  
PersonalInfoManager,"Contains GDPR-related methods that include checking consent status if GDPR applies, and for manually granting or revoking consent. Refer to our GDPR documentation for additional usage instructions.",unsubscribeConsentStatusChangeListener(ConsentStatusChangeListener consentStatusChangeListener),Description: Unsubscribes a consentStatusChangeListener.,public void  
SdkConfiguration,Object holding any SDK initialization parameters.,getAdapterConfigurationClasses(),Description: Returns a Set containing Strings of class names of adapter configurations to initialize upon the MoPub SDK’s initialization.,public Set<String>  
SdkConfiguration,Object holding any SDK initialization parameters.,getAdUnitId(),Description: Returns a String containing the ad unit ID used by the app.,public String  
SdkConfiguration,Object holding any SDK initialization parameters.,getLegitimateInterestAllowed(),Description: Returns a boolean indicating whether legitimate interest is allowed for the collection of personally identifiable information. Returns true if allowed; false otherwise.,public boolean  
SdkConfiguration,Object holding any SDK initialization parameters.,getMediatedNetworkConfigurations(),Description: Returns a Map containing entries corresponding to adapter configuration options used in the initialization of networks.,"public Map<String,Map<String,String>>  "
SdkConfiguration,Object holding any SDK initialization parameters.,getMediationSettings(),Description: Returns the MediationSettings interface containing settings unique to a rewarded video custom event.,public MediationSettings[]  
SdkConfiguration,Object holding any SDK initialization parameters.,getMoPubRequestOptions(),Description: Returns a Map containing entries corresponding to adapter configuration request options passed to the ad server.,"public Map<String,Map<String,String>>  "
SdkConfiguration.Builder,A Builder used to configure the initialization of the MoPub SDK. Refer to our initialization directions for additional usage instructions.,build(),Description: Builds the SdkConfiguration.Builder used by the MoPub initialization. Returns the builder.,public SdkConfiguration  
SdkConfiguration.Builder,A Builder used to configure the initialization of the MoPub SDK. Refer to our initialization directions for additional usage instructions.,withAdditionalNetwork(String adapterConfigurationClass),Description: Specifies an additional custom adapter configuration to attempt to initialize. MoPub automatically adds MoPub-supported networks’ adapter configurations. Returns the builder.,public SdkConfiguration.Builder  
SdkConfiguration.Builder,A Builder used to configure the initialization of the MoPub SDK. Refer to our initialization directions for additional usage instructions.,withLegitimateInterestAllowed(boolean legitimateInterestAllowed),Description: Sets whether or not legitimate interest is allowed for the collection of personally identifiable information. This API can be used if you want to allow supported SDK networks to collect user information on the basis of legitimate interest. Returns the builder.,public SdkConfiguration.Builder  
SdkConfiguration.Builder,A Builder used to configure the initialization of the MoPub SDK. Refer to our initialization directions for additional usage instructions.,withLogLevel(LogLevel logLevel),Description: Adds a log level to be used by MoPubLog. Returns the builder.,public SdkConfiguration.Builder  
SdkConfiguration.Builder,A Builder used to configure the initialization of the MoPub SDK. Refer to our initialization directions for additional usage instructions.,"withMediatedNetworkConfiguration(String adapterConfigurationClass, Map<String,String> mediatedNetworkConfiguration)",Description: Adds a single mediated network configuration keyed by the AdapterConfiguration class. This is used by ad networks’ initialization. Returns the builder.,public SdkConfiguration.Builder  
SdkConfiguration.Builder,A Builder used to configure the initialization of the MoPub SDK. Refer to our initialization directions for additional usage instructions.,withMediationSettings(MediationSettings... mediationSettings),Description: Adds mediation settings for rewarded video custom events. Returns the builder.,public SdkConfiguration.Builder  
SdkConfiguration.Builder,A Builder used to configure the initialization of the MoPub SDK. Refer to our initialization directions for additional usage instructions.,"withMoPubRequestOptions(String adapterConfigurationClass, Map<String,String> mopubRequestOptions)",Description: Adds a single MopubRequestOption keyed by the AdapterConfiguration class. Returns the builder.,public SdkConfiguration.Builder  
SdkInitializationListener,An interface publishers can implement to be informed of initialization events from the MoPub SDK.,onInitializationFinished() ,Description: A callback provided by the MoPub SDK for when initialization has completed.,public void  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",getConsentedPrivacyPolicyVersion(),Description: Returns the version of the privacy policy that the user has consented to.,public String  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",getConsentedVendorListIabFormat(),Description: Returns the consented vendor list in IAB’s global vendor list format.,public String  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",getConsentedVendorListVersion(),Description: Returns the version of the vendor list that the user has consented to.,public String  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",getCurrentPrivacyPolicyLink(),Description: Returns a link for the current privacy policy with the system default language.,public String  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",getCurrentPrivacyPolicyLink(String language),Description: Returns a link for the current privacy policy in a specific language.,public String  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",getCurrentPrivacyPolicyVersion(),Description: Returns the current privacy policy version.,public String  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",getCurrentVendorListIabFormat(),Description: Returns the current vendor list in IAB’s global vendor list format.,public String  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",getCurrentVendorListLink(),Description: Returns a link for the current vendor list with the system default language.,public String  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",getCurrentVendorListLink(String language),Description: Returns a link for the current vendor list in a specific language.,public String  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",getCurrentVendorListVersion(),Description: Returns the current vendor list version.,public String  
ConsentData,"Contains methods to get GDPR-related data, such as the policy link and the vendor list link; these are helpful when publishers use their own consent mechanism. Refer to our Android GDPR article for additional usage instructions.",isForceGdprApplies(),Description: Returns true if GDPR rules have been forced to apply by either the publisher or by MoPub; false otherwise.,public boolean  
ConsentDialogListener,Interface to listen to a successful or failed consent dialog load request.,onConsentDialogLoaded(),Description: Called when the consent dialog successfully loads.,public void  
ConsentDialogListener,Interface to listen to a successful or failed consent dialog load request.,onConsentDialogLoadFailed(MoPubErrorCode moPubErrorCode),Description: Called when the consent dialog fails to load.,public void  
ConsentStatus,A collection of consent status constants publishers can query when GDPR applies. Call getPersonalInfoConsentStatus() to get the last known consent status stored on the device Read our Android GDPR article for more details.,DNT,Description: “Do Not Track”. The user has set the “limit ad tracking” flag on their device. This state is treated as denied consent.,public  
ConsentStatus,A collection of consent status constants publishers can query when GDPR applies. Call getPersonalInfoConsentStatus() to get the last known consent status stored on the device Read our Android GDPR article for more details.,EXPLICIT_NO,Description: The user has explicitly denied consent. Personal information may not be collected by SDKs.,public  
ConsentStatus,A collection of consent status constants publishers can query when GDPR applies. Call getPersonalInfoConsentStatus() to get the last known consent status stored on the device Read our Android GDPR article for more details.,EXPLICIT_YES,Description: The user has explicitly granted consent. Personal information may be collected by SDKs.,public  
ConsentStatus,A collection of consent status constants publishers can query when GDPR applies. Call getPersonalInfoConsentStatus() to get the last known consent status stored on the device Read our Android GDPR article for more details.,POTENTIAL_WHITELIST,"Description: The publisher attempts to manually grant consent via PersonalInfoManager.grantConsent() without being whitelisted. This state is treated as if the user has not granted consent, but the user should no longer be prompted with the dialog.",public  
ConsentStatus,A collection of consent status constants publishers can query when GDPR applies. Call getPersonalInfoConsentStatus() to get the last known consent status stored on the device Read our Android GDPR article for more details.,UNKNOWN,"Description: The consent state is unknown due to not having synced to the server, or the user has never set a consent state.",public  
ConsentStatusChangeListener,Add one of these to PersonalInfoManager#subscribeConsentStatusChangeListener to listen for status changes.,"onConsentStateChange(ConsentStatus oldConsentStatus, ConsentStatus newConsentStatus, boolean canCollectPersonalInformation)",Description: Called when a consent status transition happens.,public void  
BannerAdListener,A listener interface publishers can implement to be notified of banner ad lifecycle events.,onBannerClicked(MoPubView banner),Description: The callback that is fired when the current banner ad has been clicked,public void  
BannerAdListener,A listener interface publishers can implement to be notified of banner ad lifecycle events.,onBannerCollapsed(MoPubView banner),Description: The callback that is fired when the current banner ad has collapsed,public void  
BannerAdListener,A listener interface publishers can implement to be notified of banner ad lifecycle events.,onBannerExpanded(MoPubView banner),Description: The callback that is fired when the current banner ad has expanded,public void  
BannerAdListener,A listener interface publishers can implement to be notified of banner ad lifecycle events.,"onBannerFailed(MoPubView banner, MoPubErrorCode errorCode)",Description: The callback that is fired when the current banner ad has failed to load,public void  
BannerAdListener,A listener interface publishers can implement to be notified of banner ad lifecycle events.,"	onBannerLoaded(MoPubView banner) ",Description: The callback that is fired when the current banner ad has been loaded,public void  
CustomEventBanner,A base class for custom events that support banner ads. Implementing a subclass of CustomEventBanner() enables the MoPub SDK to support banner mediation with other ad networks.,"loadBanner(Context context, CustomEventBannerListener customEventBannerListener, Map<String,Object> localExtras, Map<String,String> serverExtras)",Description: Requests a banner ad for an ad network.,public protected abstract void  
CustomEventBanner,A base class for custom events that support banner ads. Implementing a subclass of CustomEventBanner() enables the MoPub SDK to support banner mediation with other ad networks.,onInvalidate(),"Description: Destroys the current banner object, as well as to unregister any hanging references.",public protected abstract void  
CustomEventBanner,A base class for custom events that support banner ads. Implementing a subclass of CustomEventBanner() enables the MoPub SDK to support banner mediation with other ad networks.,setAutomaticImpressionAndClickTracking(boolean autoTrack),"Description: Enables or disables automatic impression and click tracking. This is enabled by default, meaning that the MoPub SDK will track impressions and clicks using its definition. Disabling it customizes when to track impressions and clicks on MoPub’s side. Typically, publishers disable this when the network SDK exposes dedicated callbacks for impression and click tracking, to synchronize the tracking between the network and MoPub.",public protected void  
CustomEventBannerListener,An object returned for a MoPub banner ad.,onBannerClicked(),Description: Notifies the MoPub SDK when the user has clicked on the banner ad.,public final void  
CustomEventBannerListener,An object returned for a MoPub banner ad.,onBannerCollapsed(),Description: Notifies the MoPub SDK when the ad has collapsed (minimized).,public final void  
CustomEventBannerListener,An object returned for a MoPub banner ad.,onBannerExpanded(),Description: Notifies the MoPub SDK when the ad has expanded to fullscreen.,public final void  
CustomEventBannerListener,An object returned for a MoPub banner ad.,onBannerFailed(MoPubErrorCode errorCode),Description: Notifies the MoPub SDK when there is an error loading the banner ad.,public final void  
CustomEventBannerListener,An object returned for a MoPub banner ad.,onBannerImpression(),Description: Notifies the MoPub SDK when an impression has occurred if the automatic impression and click tracking has been set to ‘false’ in setAutomaticImpressionAndClickTracking().,public final void  
CustomEventBannerListener,An object returned for a MoPub banner ad.,onBannerLoaded(View bannerView),Description: Notifies the MoPub SDK when the banner ad has been loaded to notify the MoPub SDK.,public final void  
CustomEventBannerListener,An object returned for a MoPub banner ad.,onLeaveApplication(),Description: This is an alias for onBannerClicked().,public final void  
MoPubView,An object that represents a MoPub banner ad.,MoPubAdSize.MATCH_VIEW_INT,Description: Constant that specifies the desired height for an ad to match that of the host view.,public static int  
MoPubView,An object that represents a MoPub banner ad.,MoPubAdSize.HEIGHT_50_INT,Description: Constant that specifies the desired height for an ad to be 50.,public static int  
MoPubView,An object that represents a MoPub banner ad.,MoPubAdSize.HEIGHT_90_INT,Description: Constant that specifies the desired height for an ad to be 90.,public static int  
MoPubView,An object that represents a MoPub banner ad.,MoPubAdSize.HEIGHT_250_INT,Description: Constant that specifies the desired height for an ad to be 250.,public static int  
MoPubView,An object that represents a MoPub banner ad.,MoPubAdSize.HEIGHT_280_INT,Description: Constant that specifies the desired height for an ad to be 280.,public static int  
MoPubView,An object that represents a MoPub banner ad.,destroy(),Description: Remove existing banner instance in session. Used when finished showing an ad to free up existing resources.,public void  
MoPubView,An object that represents a MoPub banner ad.,forceRefresh(),Description: Manually sends out a new ad request that is initiated by the publisher. Used to issue a new ad request and start a new refresh cycle.,public void  
MoPubView,An object that represents a MoPub banner ad.,getAdFormat(),Description: Always returns the String ‘banner’. Only called after an ad request.,public AdFormat  
MoPubView,An object that represents a MoPub banner ad.,getAdHeight(),Description: Returns the height of the creative in the ad response sent from the MoPub ad server.,public int  
MoPubView,An object that represents a MoPub banner ad.,getAdSize(),Description: Returns the height of the creative that the publisher is requesting. Refer to MoPubView.MoPubAdSize for a list of predefined ad size constants.,public MoPubAdSize  
MoPubView,An object that represents a MoPub banner ad.,getAdUnitId(),Description: Returns the MoPub ad unit ID String specified in the ad request.,public String  
MoPubView,An object that represents a MoPub banner ad.,getAdWidth(),Description: Returns the width of the creative in the ad response sent from the MoPub ad server.,public int  
MoPubView,An object that represents a MoPub banner ad.,getAutorefreshEnabled(),Description: Returns whether auto refresh is enabled. Auto refresh makes a new ad request based on a time interval. Returns true if the ad will attempt to refresh automatically; false otherwise.,public boolean  
MoPubView,An object that represents a MoPub banner ad.,getBannerAdListener(),Description: Returns a BannerAdListener instance (the ad listener associated with the current banner ad object).,public BannerAdListener  
MoPubView,An object that represents a MoPub banner ad.,getClickTrackingUrl(),Deprecated.,public String  
MoPubView,An object that represents a MoPub banner ad.,getKeywords(),Description: Returns any non-user-identifiable keywords set on the current banner object. Null if no keywords have been set.,public String  
MoPubView,An object that represents a MoPub banner ad.,getLocalExtras(),Description: Returns a map of key-value pairs set on the current banner object to be used later. Null if no local extras are set.,"public Map<String,Object>  "
MoPubView,An object that represents a MoPub banner ad.,getLocation(),Description: Deprecated as of release 5.12.0. Will be removed in the future. Returns a location object set on the current banner object. Null if no location has been set.,public Location  
MoPubView,An object that represents a MoPub banner ad.,getResponseString(),Deprecated.,public String  
MoPubView,An object that represents a MoPub banner ad.,getUserDataKeywords(),"Description: Returns any user-identifiable keywords set on the current banner object. Returns user-identifiable keywords, if available; if none have been set, returns null.",public String  
MoPubView,An object that represents a MoPub banner ad.,loadAd(),Description: Issues an ad request to the MoPub ad server. This method should only be called after initializing the SDK via initializeSdk().,public void  
MoPubView,An object that represents a MoPub banner ad.,loadAd(MoPubAdSize moPubAdSize),Description: Issues an ad request with the specified ad size. This method should only be called after initializing the SDK via initializeSdk(). Refer to our banner ad instructions for additional usage directions.,public void  
MoPubView,An object that represents a MoPub banner ad.,setAdSize(MoPubAdSize moPubAdSize),Description: Passes in a specific ad size to request for the current banner ad.,public void  
MoPubView,An object that represents a MoPub banner ad.,setAdUnitId(String adUnitId),Description: Sets the ad unit ID on the current banner ad object to be used in the ad request. Must not be null.,public void  
MoPubView,An object that represents a MoPub banner ad.,setAutorefreshEnabled(boolean enabled),Description: Specifies whether the current banner ad should automatically refresh.,public void  
MoPubView,An object that represents a MoPub banner ad.,setBannerAdListener(BannerAdListener listener),Description: Registers a listener for the current ad object to be informed of the ad’s lifecycle events.,public void  
MoPubView,An object that represents a MoPub banner ad.,setKeywords(String keywords),Description: Optional. Specifies non-user-identifiable keywords on the current banner object to pass in the ad request for ad targeting.,public void  
MoPubView,An object that represents a MoPub banner ad.,"setLocalExtras(Map<String,Object> localExtras)",Description: Specifies a map of key-value pairs on the current banner object to be passed in the ad request for ad targeting. Use this to append additional data for mediation.,public void  
MoPubView,An object that represents a MoPub banner ad.,setLocation(Location location),Description: Deprecated as of release 5.12.0. The location is set automatically based on GPS or Network provider value.,public void  
MoPubView,An object that represents a MoPub banner ad.,setTimeout(int milliseconds),Deprecated as of release 4.4.0.,public void  
MoPubView,An object that represents a MoPub banner ad.,setUserDataKeywords(String userDataKeywords),"Description: In GDPR-applicable cases, specifies user-identifiable keywords on the current banner object to be passed in the ad request for targeting.",public void  
CustomEventInterstitial,A base class for custom events that support interstitial ads. Implementing a subclass of CustomEventInterstitial() enables the MoPub SDK to support interstitial mediation with other ad networks.,"loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener, Map<String,Object> localExtras, Map<String,String> serverExtras)",Description: Requests an interstitial ad for an ad network.,public protected abstract void  
CustomEventInterstitial,A base class for custom events that support interstitial ads. Implementing a subclass of CustomEventInterstitial() enables the MoPub SDK to support interstitial mediation with other ad networks.,onInvalidate(),"Description: Destroys the current interstitial object, as well as to unregister any hanging references.",public protected abstract void  
CustomEventInterstitial,A base class for custom events that support interstitial ads. Implementing a subclass of CustomEventInterstitial() enables the MoPub SDK to support interstitial mediation with other ad networks.,setAutomaticImpressionAndClickTracking(boolean autoTrack),"Description: Enables or disables automatic impression and click tracking. This is enabled by default, meaning that the MoPub SDK will track impressions and clicks using its definition. Should be disabled to customize when to track impressions and clicks on MoPub’s side. Typically, publishers disable this when the network SDK exposes dedicated callbacks for impression and click tracking, to synchronize the tracking between the network and MoPub.",public protected void  
CustomEventInterstitial,A base class for custom events that support interstitial ads. Implementing a subclass of CustomEventInterstitial() enables the MoPub SDK to support interstitial mediation with other ad networks.,showInterstitial(),Description: Displays the interstitial ad to the user.,public protected abstract void  
CustomEventInterstitialListener,Events in this interface contain code specific to the ad’s lifecycle events.,onInterstitialClicked(),Description: Notifies the MoPub SDK when a user clicks on an interstitial ad.,pubic void  
CustomEventInterstitialListener,Events in this interface contain code specific to the ad’s lifecycle events.,onInterstitialDismissed(),Description: Notifies the MoPub SDK when an interstitial ad has been closed to notify the MoPub SDK.,pubic void  
CustomEventInterstitialListener,Events in this interface contain code specific to the ad’s lifecycle events.,onInterstitialFailed(MoPubErrorCode errorCode),Description: Notifies the MoPub SDK when there is an error loading the interstitial ad.,pubic void  
CustomEventInterstitialListener,Events in this interface contain code specific to the ad’s lifecycle events.,onInterstitialImpression(),Description: Notifies the MoPub SDK when an impression has occurred if automatic impression and click tracking has been set to ‘false’ in setAutomaticImpressionAndClickTracking().,pubic void  
CustomEventInterstitialListener,Events in this interface contain code specific to the ad’s lifecycle events.,onInterstitialLoaded(),Description: Notifies the MoPub SDK when the interstitial ad has been cached.,pubic void  
CustomEventInterstitialListener,Events in this interface contain code specific to the ad’s lifecycle events.,onInterstitialShown(),Description: Notifies the MoPub SDK when the interstitial ad has been displayed.,pubic void  
CustomEventInterstitialListener,Events in this interface contain code specific to the ad’s lifecycle events.,onLeaveApplication(),Description: This is an alias for onInterstitialClicked().,pubic void  
InterstitialAdListener,A listener interface publishers can implement to be notified of interstitial ad lifecycle events.,onInterstitialClicked(MoPubInterstitial interstitial),Description: The callback that is fired when the current interstitial ad has been clicked.,public void  
InterstitialAdListener,A listener interface publishers can implement to be notified of interstitial ad lifecycle events.,onInterstitialDismissed(MoPubInterstitial interstitial),Description: The callback that is fired when the current interstitial ad has been clicked.,public void  
InterstitialAdListener,A listener interface publishers can implement to be notified of interstitial ad lifecycle events.,"onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode)",Description: The callback that is fired when the current interstitial ad has been clicked.,public void  
InterstitialAdListener,A listener interface publishers can implement to be notified of interstitial ad lifecycle events.,onInterstitialLoaded(MoPubInterstitial interstitial),Description: The callback that is fired when the current interstitial ad has been clicked.,public void  
InterstitialAdListener,A listener interface publishers can implement to be notified of interstitial ad lifecycle events.,onInterstitialShown(MoPubInterstitial interstitial),Description: The callback that is fired when the current interstitial ad has been clicked.,public void  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",destroy(),Description: Removes existing interstitial instance in session. Used when finished showing an ad to free up existing resources.,public void  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",forceRefresh(),Description: Manually sends out a new ad request that is initiated by the publisher. Used to issue a new ad request and start a new refresh cycle.,public void  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",getInterstitialAdListener(),"Description: Returns InterstitialAdListener, the ad listener associated with the current interstitial ad object.",public MoPubInterstitial.InterstitialAdListener  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",getKeywords(),Description: Returns any non-user-identifiable keywords that have been set on the current banner object. Null if no keywords have been set.,public String  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",getLocalExtras(),Description: Returns a map of key-value pairs that have been set on the current interstitial object to be used later. Null if no local extras are set.,"public Map<String, Object>  "
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",getLocation(),Description: Deprecated as of release 5.12.0. Will be removed in the future. Returns a location object set on the current interstitial object. Null if no location has been set.,public Location  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",getUserDataKeywords(),Description: Returns any user-identifiable keywords that have been set on the current banner object. Null if no keywords have been set.,public String  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",isReady(),Description: Returns true if the interstitial has been successfully cached and is ready to be shown; false otherwise.,public boolean  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",load(),Description: Issues an ad request. Should only be called after initializing the SDK with initializeSdk().,public void  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",setInterstitialAdListener(MoPubInterstitial.InterstitialAdListener listener),Description: Registers a listener for the current ad object to be informed of the ad’s lifecycle events.,public void  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",setKeywords(String keywords),Description: Optionally used to specify non-user-identifiable keywords on the current banner object to pass in the ad request for ad targeting.,public void  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.","setLocalExtras(Map<String, Object> extras)",Description: Specifies a map of key-value pairs on the current interstitial object to be passed in the ad request for ad targeting. Used to append additional data for mediation.,public void  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",setUserDataKeywords(String userDataKeywords),"Description: In GDPR-applicable cases, specifies user-identifiable keywords on the current interstitial object to be passed in the ad request for targeting.",public void  
MoPubInterstitial,"The object representing a MoPub interstitial ad, and associated methods.",show(),"Description: Attempts to display an interstitial ad if it is ready. (To confirm that an ad is cached, isReady() can be called.) Returns true if the ad is ready; false otherwise.",public boolean  
CustomEventRewardedAd,A base class for custom events that support rewarded ads. Implementing a subclass of CustomEventRewardedAd() enables the MoPub SDK to support rewarded ad mediation with other ad networks.,"checkAndInitializeSdk(Activity launcherActivity, Map<String,Object> localExtras, Map<String,String> serverExtras)",Description: Initializes the network SDK. Returns true if if the SDK performed initialization; false if the SDK was already initialized.,public protected abstract boolean  
CustomEventRewardedAd,A base class for custom events that support rewarded ads. Implementing a subclass of CustomEventRewardedAd() enables the MoPub SDK to support rewarded ad mediation with other ad networks.,getAdNetworkId(),"Description: Returns the ID string for this ad unit with the ad network (the “ad unit id”, “zone id,” or similar identifier for the network). May be empty if the network does not have anything more specific than an application ID.",public protected abstract String  
CustomEventRewardedAd,A base class for custom events that support rewarded ads. Implementing a subclass of CustomEventRewardedAd() enables the MoPub SDK to support rewarded ad mediation with other ad networks.,getLifecycleListener(),Description: Notifies the network SDK of the custom event’s activity lifecycle events. This is optional and only required for networks that rely on these events. Returns a LifecycleListener. May be null.,public protected abstract LifecycleListener  
CustomEventRewardedAd,A base class for custom events that support rewarded ads. Implementing a subclass of CustomEventRewardedAd() enables the MoPub SDK to support rewarded ad mediation with other ad networks.,isReady(),Description: Implementers should query the third-party SDK for whether the third-party SDK & ID represented by the custom event is ready to be shown. Returns true if a video is available to play; false otherwise.,public protected abstract boolean  
CustomEventRewardedAd,A base class for custom events that support rewarded ads. Implementing a subclass of CustomEventRewardedAd() enables the MoPub SDK to support rewarded ad mediation with other ad networks.,"loadWithSdkInitialized(Activity activity, Map<String,Object> localExtras, Map<String,String> serverExtras)","Description: Issues an ad request to the network SDK, provided that it has been initialized.",public protected abstract void  
CustomEventRewardedAd,A base class for custom events that support rewarded ads. Implementing a subclass of CustomEventRewardedAd() enables the MoPub SDK to support rewarded ad mediation with other ad networks.,onInvalidate(),Description: Destroys the current rewarded ad object and unregisters any hanging references.,public protected abstract void  
CustomEventRewardedAd,A base class for custom events that support rewarded ads. Implementing a subclass of CustomEventRewardedAd() enables the MoPub SDK to support rewarded ad mediation with other ad networks.,show(),Description: Implementers should now play the rewarded item for this custom event.,public protected abstract void  
CustomEventRewardedVideo,A base class for custom events that support rewarded video ads. Implementing a subclass of CustomEventRewardedVideo() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,getVideoListenerForSdk(),Deprecated.,public protected CustomEventRewardedVideoListener  
CustomEventRewardedVideo,A base class for custom events that support rewarded video ads. Implementing a subclass of CustomEventRewardedVideo() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,hasVideoAvailable(),Deprecated.,public protected abstract boolean  
CustomEventRewardedVideo,A base class for custom events that support rewarded video ads. Implementing a subclass of CustomEventRewardedVideo() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,isReady(),Description: Description copied from class CustomEventRewardedAd. Implementers should query the 3rd-party SDK for whether the 3rd-party SDK and ID represented by the custom event is ready to be shown. Specified by isReady() in class CustomEventRewardedAd. Returns true if if a video is available to play; false otherwise.,public protected boolean  
CustomEventRewardedVideo,A base class for custom events that support rewarded video ads. Implementing a subclass of CustomEventRewardedVideo() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,show(),Description: Description copied from class CustomEventRewardedAd. Implementers should now play the rewarded item for this custom event. Specified by show() in class CustomEventRewardedAd.,public protected void  
CustomEventRewardedVideo,A base class for custom events that support rewarded video ads. Implementing a subclass of CustomEventRewardedVideo() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,showVideo(),Deprecated.,public protected abstract void  
MoPubReward,Represents a reward to the user for completing a rewarded task like watching a video.,getAmount(),Description: Returns the amount associated with the current reward.,public int  
MoPubReward,Represents a reward to the user for completing a rewarded task like watching a video.,getLabel(),Description: Returns the label associated with the current reward.,public String  
MoPubReward,Represents a reward to the user for completing a rewarded task like watching a video.,"success(String rewardLabel, int amount)",Description: Create a new MoPubReward with the supplied label and amount. Typically used by mediation adapters to forward reward data defined on the mediation network’s dashboard to the MoPub SDK.,public static MoPubReward  
MoPubRewardedVideos,MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded video classes.,getAvailableRewards(String adUnitId),"Description: Returns the Set of available rewards of type MoPubReward for this ad unit ID, if available; empty otherwise.",public static Set<MoPubReward>  
MoPubRewardedVideos,MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded video classes.,hasRewardedVideo(String adUnitId),Description: Returns true if the current rewarded video has successfully cached; false otherwise..,public static boolean  
MoPubRewardedVideos,MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded video classes.,"loadRewardedVideo(String adUnitId, MediationSettings... mediationSettings)",Description: Attempts to make an ad request for the current ad unit ID with mediation settings.,public static void  
MoPubRewardedVideos,MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded video classes.,"loadRewardedVideo(String adUnitId, RequestParameters requestParameters, MediationSettings... mediationSettings)",Description: Attempts to make an ad request for the current ad unit ID with request parameters and mediation settings.,public static void  
MoPubRewardedVideos,MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded video classes.,"selectReward(String adUnitId, MoPubReward selectedReward)","Description: Selects a reward for the current ad unit ID, if available. Called to prompt the user to select from a number of rewards, if available.",public static void  
MoPubRewardedVideos,MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded video classes.,setRewardedVideoListener(MoPubRewardedVideoListener listener),Description: Registers a listener for the current ad object to be informed of the ad’s lifecycle events.,public static void  
MoPubRewardedVideos,MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded video classes.,showRewardedVideo(String adUnitId),Description: Attempts to play the rewarded video if one has been cached for this ad unit ID.,public static void  
MoPubRewardedVideos,MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded video classes.,"showRewardedVideo(String adUnitId, String customData)",Description: Attempts to play the rewarded video if one has been cached for this ad unit ID with custom data.,public static void  
MoPubRewardedVideoManager,A base class for custom events that support rewarded video ads. Implementing a subclass of MoPubRewardedVideoManager() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,getGlobalMediationSettings(Class<T> clazz),"Description: Returns a global MediationSettings object, if available, that contains publisher’s passed-in data for rewarded video mediation if supported be the ad network SDK in question. Returns null if no Class is registered.",public static T  
MoPubRewardedVideoManager,A base class for custom events that support rewarded video ads. Implementing a subclass of MoPubRewardedVideoManager() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,"getInstanceMediationSettings(Class<T> clazz, String adUnitId)","Description: Returns an instance MediationSettings object, if available, that contains publisher’s passed-in data for rewarded video mediation if supported be the ad network SDK in question. Returns null if no Class is registered",public static T  
MoPubRewardedVideoManager,A base class for custom events that support rewarded video ads. Implementing a subclass of MoPubRewardedVideoManager() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,"onRewardedVideoClicked(Class<T> customEventClass, String thirdPartyId)",Description: Notifies the MoPub SDK when the rewarded video has been successfully cached.,public static void  
MoPubRewardedVideoManager,A base class for custom events that support rewarded video ads. Implementing a subclass of MoPubRewardedVideoManager() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,"onRewardedVideoClosed(Class<T> customEventClass, String thirdPartyId)",Description: Notifies the MoPub SDK when the rewarded video has been closed.,public static void  
MoPubRewardedVideoManager,A base class for custom events that support rewarded video ads. Implementing a subclass of MoPubRewardedVideoManager() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,"onRewardedVideoCompleted(Class<T> customEventClass, String thirdPartyId, MoPubReward moPubReward)",Description: Notifies the MoPub SDK when the rewarded video has finished playback.,public static void  
MoPubRewardedVideoManager,A base class for custom events that support rewarded video ads. Implementing a subclass of MoPubRewardedVideoManager() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,"onRewardedVideoLoadFailure(Class<T> customEventClass, String thirdPartyId, MoPubErrorCode errorCode)",Description: Notifies the MoPub SDK when the rewarded video has failed to load.,public static void  
MoPubRewardedVideoManager,A base class for custom events that support rewarded video ads. Implementing a subclass of MoPubRewardedVideoManager() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,"onRewardedVideoLoadSuccess(Class<T> customEventClass, String thirdPartyId)",Description: Notifies the MoPub SDK when the rewarded video has been successfully cached.,public static void  
MoPubRewardedVideoManager,A base class for custom events that support rewarded video ads. Implementing a subclass of MoPubRewardedVideoManager() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,"onRewardedVideoPlaybackError(Class<T> customEventClass, String thirdPartyId, MoPubErrorCode errorCode)",Description: Notifies the MoPub SDK when the rewarded video has failed to play.,public static void  
MoPubRewardedVideoManager,A base class for custom events that support rewarded video ads. Implementing a subclass of MoPubRewardedVideoManager() enables the MoPub SDK to support rewarded video ad mediation with other ad networks.,"onRewardedVideoStarted(Class<T> customEventClass, String thirdPartyId)",Description: Notifies the MoPub SDK when the rewarded video has begun to play.,public static void  
MoPubRewardedVideoListener,Listener for rewarded video events. Implementers of this interface will receive events for all rewarded video ad units in the app.,onRewardedVideoClicked(String adUnitId),Description: Called when a rewarded video is clicked.,public void  
MoPubRewardedVideoListener,Listener for rewarded video events. Implementers of this interface will receive events for all rewarded video ad units in the app.,onRewardedVideoClosed(String adUnitId),Description: Called when a rewarded video is closed. At this point your application should resume.,public void  
MoPubRewardedVideoListener,Listener for rewarded video events. Implementers of this interface will receive events for all rewarded video ad units in the app.,"onRewardedVideoCompleted(Set<String> adUnitIds, MoPubReward reward)",Description: Called when a rewarded video is completed and the user should be rewarded.,public void  
MoPubRewardedVideoListener,Listener for rewarded video events. Implementers of this interface will receive events for all rewarded video ad units in the app.,"onRewardedVideoLoadFailure(String adUnitId, MoPubErrorCode errorCode)",Description: Called when a video fails to load for the given ad unit id. The provided error code will give more insight into the reason for the failure to load.,public void  
MoPubRewardedVideoListener,Listener for rewarded video events. Implementers of this interface will receive events for all rewarded video ad units in the app.,onRewardedVideoLoadSuccess(String adUnitId),Description: Called when the adUnitId has loaded. At this point you should be able to call MoPubRewardedVideos.showRewardedVideo(String adUnitId) to show the video.,public void  
MoPubRewardedVideoListener,Listener for rewarded video events. Implementers of this interface will receive events for all rewarded video ad units in the app.,"onRewardedVideoPlaybackError(String adUnitId, MoPubErrorCode errorCode)",Description: Called when there is an error during video playback.,public void  
MoPubRewardedVideoListener,Listener for rewarded video events. Implementers of this interface will receive events for all rewarded video ad units in the app.,onRewardedVideoStarted(String adUnitId),Description: Called when a rewarded video starts playing.,public void  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,ADGROUP_ID,Description: A String field corresponding to the value for the ad group ID of the current creative.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,ADGROUP_NAME,Description: A String field corresponding to the value for the ad group name of the current creative.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,ADGROUP_PRIORITY,Description: A String field corresponding to the value for the ad group priority of the current creative.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,ADGROUP_TYPE,Description: A String field corresponding to the value for the ad group type of the current creative.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,ADUNIT_FORMAT,Description: A String field corresponding to the value for the ad unit format of the current creative.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,ADUNIT_ID,Description: A String field corresponding to the value for the ad unit ID of the current creative.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,ADUNIT_NAME,Description: A String field corresponding to the value for the ad unit name of the current creative.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,COUNTRY,Description: A String field corresponding to the value for the country of the current user’s device.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,CURRENCY,Description: A String field corresponding to the value for the currency.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,IMPRESSION_ID,Description: A String field corresponding to the value for the impression ID of the current creative.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,NETWORK_NAME,Description: A String field corresponding to the value for the ad network name of the current creative.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,NETWORK_PLACEMENT_ID,Description: A String field corresponding to the value for the ad network placement ID of the current creative.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,PRECISION,Description: A String field corresponding to the value for the precision level of the data.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,PUBLISHER_REVENUE,Description: A String field corresponding to the value for the likey payout of an impression.,public static String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getAdGroupId(),Description: Returns the ad group ID associated with the current creative.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getAdGroupName(),Description: Returns the ad group name associated with the current creative.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getAdGroupPriority(),Description: Returns the ad group priority associated with the current creative.,public Integer  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getAdGroupType(),Description: Returns the ad group type associated with the current creative.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getAdUnitFormat(),Description: Returns the ad unit format associated with the current creative.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getAdUnitId(),Description: Returns the ad unit ID associated with the current creative.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getAdUnitName(),Description: Returns the ad unit name associated with the current creative.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getCountry(),Description: Returns the version of the app. Added in 5.12.0.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getCurrency(),Description: Returns the country name associated with the current user’s device location.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getImpressionId(),Description: Returns the currency. Always USD.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getJsonRepresentation(),Description: Returns the impression ID associated with the current creative.,public JSONObject  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getNetworkName(),Description: Returns the JSON representation of impression-level revenue data otherwise available via the individual getters found in this class.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getNetworkPlacementId(),Description: Returns the ad network name if the creative is served by a supported ad network.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getPrecision(),Description: Returns the ad network placement/zone/unit ID if the creative is served by a supported ad network.,public String  
ImpressionData,Methods for retrieving impression-level revenue data (ILRD). Refer to our ILRD article for Android for additional implementation instructions.,getPublisherRevenue(),Description: Returns the precision level of the data. See explanation given for getPublisherRevenue() for possible values.,public Double  
ImpressionListener,An interface exposing a callback where impression data is exposed to publishers. Refer to our article on integrating impression-level revenue data (ILRD) for additional usage instructions.,"onImpression(String adUnitId, ImpressionData impressionData)",Description: Called by the MoPub SDK once the ad becomes visible for the first time.,public void  
AdapterHelper,A helper class to retrieve a native ad for a manual integration.,"getAdView(View convertView, ViewGroup parent, NativeAd nativeAd)",Description: Returns a fully populated view containing the rendered ad content. The view has a click listener attached to it and will automatically handle opening the ad’s destination URL. It will also track impressions and clicks automatically.,public View  
AdapterHelper,A helper class to retrieve a native ad for a manual integration.,"getAdView(View convertView, ViewGroup parent, NativeAd nativeAd, ViewBinder viewBinder)",Description: Returns a fully populated view containing the rendered ad content. The view has a click listener attached to it and will automatically handle opening the ad’s destination URL. It will also track impressions and clicks automatically.,public View  
BaseNativeAd,"This is the base class for implementations of all native ad formats. When implementing a new native ad format, be sure to also implement and register an appropriate MoPubAdRenderer that supports the format.",clear(View view),Description: The BaseNativeAd subclass should implement this method if the network requires the developer to reset or clear state of the native ad after it goes off screen and before it is rendered again. This method is optional.,public abstract void  
BaseNativeAd,"This is the base class for implementations of all native ad formats. When implementing a new native ad format, be sure to also implement and register an appropriate MoPubAdRenderer that supports the format.",destroy(),Description: The BaseNativeAd subclass should implement this method if the network requires the developer to destroy or cleanup their native ad when they are permanently finished with it. This method is optional.,public abstract void  
BaseNativeAd,"This is the base class for implementations of all native ad formats. When implementing a new native ad format, be sure to also implement and register an appropriate MoPubAdRenderer that supports the format.",notifyAdClicked(),Description: The BaseNativeAd subclass should call this method to notify the MoPub SDK that the user has clicked the ad. This will cause the SDK to record an click for the ad. This method must be called when the native ad is clicked in order for the MoPub click trackers to fire correctly.,protected final void  
BaseNativeAd,"This is the base class for implementations of all native ad formats. When implementing a new native ad format, be sure to also implement and register an appropriate MoPubAdRenderer that supports the format.",notifyAdImpressed(),Description: The BaseNativeAd subclass should call this method to notify the MoPub SDK that the ad has been shown. This will cause the SDK to record an impression for the ad. This method must be called when the native ad is impressed in order for the MoPub impression trackers to fire correctly.,protected final void  
BaseNativeAd,"This is the base class for implementations of all native ad formats. When implementing a new native ad format, be sure to also implement and register an appropriate MoPubAdRenderer that supports the format.",prepare(View view),Description: The BaseNativeAd subclass should implement this method if the network requires the developer to prepare state for recording an impression or click before a view is rendered to screen. This method is optional.,public abstract void  
ContentChangeStrategy,The strategy this adapter should use for moving ads when content is added or removed from the wrapped original adapter. This strategy can be set at any time to change the behavior of the adapter.,INSERT_AT_END,Description: Insert ads when content is added to the end of the stream. This is the default behavior and the recommended strategy.,public static final  
ContentChangeStrategy,The strategy this adapter should use for moving ads when content is added or removed from the wrapped original adapter. This strategy can be set at any time to change the behavior of the adapter.,MOVE_ALL_ADS_WITH_CONTENT,Description: Cause all ad positions after an insertion or deletion to be adjusted. New ads will not be displayed when items are added to the end of the stream.,public static final  
ContentChangeStrategy,The strategy this adapter should use for moving ads when content is added or removed from the wrapped original adapter. This strategy can be set at any time to change the behavior of the adapter.,KEEP_ADS_FIXED,Description: Never adjust ad positions when items are inserted or removed.,public static final  
CustomEventNative,A base class for custom events that support native ads. Implementing a subclass of CustomEventNative() enables the MoPub SDK to support native ad mediation with other ad networks.,"loadNativeAd(Context context, CustomEventNativeListener customEventNativeListener, Map<String,Object> localExtras, Map<String,String> serverExtras)",Description: Issues an ad request. Should only be called after initializing the SDK with initializeSdk().,public protected abstract void  
CustomEventNative,A base class for custom events that support native ads. Implementing a subclass of CustomEventNative() enables the MoPub SDK to support native ad mediation with other ad networks.,onInvalidate(),Description: Destroys the current native object and unregisters any hanging references.,public protected void  
CustomEventNativeListener,An object returned for a MoPub native ad.,onNativeAdFailed(NativeErrorCode errorCode),Description: Notifies the MoPub SDK that the native ad has failed to load.,public void  
CustomEventNativeListener,An object returned for a MoPub native ad.,onNativeAdLoaded(BaseNativeAd nativeAd),Description: Notifies the MoPub SDK that the native ad has successfully loaded.,public void  
ImageListener,N/A,onImagesCached(),"Description: Called when images are successfully cached. If you haven’t already called CustomEventNative.CustomEventNativeListener.onNativeAdLoaded(com.mopub.nativeads.BaseNativeAd), you should typically do so now.",public void  
ImageListener,N/A,onImagesFailedToCache(NativeErrorCode errorCode),Description: Called when images failed to cache. You should typically call CustomEventNative.CustomEventNativeListener.onNativeAdFailed(com.mopub.nativeads.NativeErrorCode) from this callback,public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",clearAds(),"Description: Stops loading ads, immediately clearing any ads currently in the stream.",public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",destroy(),Description: Removes existing ad instance in session. Used when finished showing an ad to free up existing resources.,public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",getAdjustedPosition(int originalPosition),"Description: Returns the adjusted position of an item in the stream, after the insertion of ads in the stream.",public int  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",getCount(),"Description: Returns the number of items in the stream, including ads.",public int  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",getItem(int position),"Description: For ad items, returns an ad data object. For non ad items, calls the original adapter using the original item position.",public Object  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",getItemId(int position),"Description: For ads, this ID will be a negative integer. If it’s possible that this ID may collide with the original adapter’s IDs, false should be returned from hasStableIds().",public long  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",getItemViewType(int position),"Description: For ad items, returns a number greater than or equal to the view type count for the underlying adapter. For non-ad items, calls the original adapter using the original ad position.",public int  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",getOriginalPosition(int position),"Description: Returns the original position of an item in the stream, prior to the insertion of ads in the stream.",public int  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.","getView(int position, View view, ViewGroup viewGroup)","Description: For ad items, returns an ad view for the underlying position. For non-ad items, calls the original adapter using the original ad position.",public android.view.View  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",getViewTypeCount(),"Description: Returns the view type count of the original adapter, plus the number of possible view types for ads.",public int  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",hasStableIds(),Description: Returns the value returned by hasStableIds() on the original adapter.,public boolean  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",insertItem(int originalPosition),"Description: Inserts a content row at the given position, adjusting ad positions accordingly.",public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",isAd(int position),Description: Returns true if the given position is ad; false otherwise.,public boolean  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",isEmpty(),"Description: Returns true the adapter empty, calling through to the original adapter; false otherwise.",public boolean  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",isEnabled(int position),"Description: Returns true if the item at the specified position is not a separator; false otherwise. (A separator is a non-selectable, non-clickable item). The result is unspecified if position is invalid.",public boolean  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",loadAds(String adUnitId),Description: Starts loading ads from the MoPub server.,public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.","loadAds(String adUnitId, RequestParameters requestParameters)","Description: Starts loading ads from the MoPub server, using the given request targeting information.",public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.","refreshAds(ListView listView, String adUnitId)","Description: Manually sends out a new ad request, while preserving the scroll position. Used to issue a new ad request and start a new refresh cycle.",public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.","refreshAds(ListView listView, String adUnitId, RequestParameters requestParameters)",Description: Manually sends out a new ad request with additional targeting data in the given ListView while preserving the scroll position. Used to issue a new ad request with additional targeting information and start a new refresh cycle.,public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",registerAdRenderer(MoPubAdRenderer adRenderer),"Description: Registers a MoPubStaticNativeAdRenderer, supporting a specific native ad format, to use when displaying ads in the stream. Note that if multiple ad renderers support a specific native ad format, the first one registered will be used.",public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",removeItem(int originalPosition),"Description: Removes the content row at the given position, adjusting ad positions accordingly.",public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.",setAdLoadedListener(MoPubNativeAdLoadedListener listener),Description: Sets a listener that will be called after the SDK loads new ads from the server and places them into the stream.,public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.","setOnClickListener(ListView listView, AdapterView.OnItemClickListener listener)","Description: Sets an on click listener for the given ListView, automatically adjusting the listener callback positions based on ads in the adapter.",public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.","setOnItemLongClickListener(ListView listView, AdapterView.OnItemLongClickListener listener)","Description: Sets an on long click listener for the given ListView, automatically adjusting the listener callback positions based on ads in the adapter.",public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.","setOnItemSelectedListener(ListView listView, AdapterView.OnItemSelectedListener listener)","Description: Sets an on item selected listener for the given ListView, automatically adjusting the listener callback positions based on ads in the adapter.",public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.","setSelection(ListView listView, int originalPosition)","Description: Sets the currently selected item in the ListView, automatically adjusting the position based on ads in the adapter.",public void  
MoPubAdAdapter,"Contains methods to request native ads for a stream (a ListView). For a manual native ad integration, refer to MoPubNative.java.","smoothScrollToPosition(ListView listView, int originalPosition)","Description: Scrolls an item in the ListView, automatically adjusting the position based on ads in the adapter.",public void  
MoPubAdRenderer,"An interface for creating ad views and rendering them using ad data. Normally you will use the subclass MoPubStaticNativeAdRenderer with ViewBinder to customize your ad view with your own layout. However, to programmatically create or manage your ad view, you can implement MoPubAdRenderer directly.","createAdView(Context context, ViewGroup parent)","Description: Creates a new view to be used as an ad. This method is called when you call MoPubStreamAdPlacer.getAdView(int position, View convertView, ViewGroup parent) and the convertView is null. You must return a valid view. Returns a new ad view.",public View  
MoPubAdRenderer,"An interface for creating ad views and rendering them using ad data. Normally you will use the subclass MoPubStaticNativeAdRenderer with ViewBinder to customize your ad view with your own layout. However, to programmatically create or manage your ad view, you can implement MoPubAdRenderer directly.","renderAdView(View view, T ad)","Description: Renders a view created by createAdView(android.content.Context, android.view.ViewGroup) by filling it with ad data.",public void  
MoPubAdRenderer,"An interface for creating ad views and rendering them using ad data. Normally you will use the subclass MoPubStaticNativeAdRenderer with ViewBinder to customize your ad view with your own layout. However, to programmatically create or manage your ad view, you can implement MoPubAdRenderer directly.",supports(BaseNativeAd nativeAd),Description: Determines if this renderer supports the type of native ad passed in. Returns true if the renderer can render the native ad; false if it cannot.,public boolean  
MoPubClientPositioning,Enables hard-coding ad positions into the app (also known as client-side positioning).,NO_REPEAT,Description: Constant indicating that ad positions should not repeat.,public static int  
MoPubClientPositioning,Enables hard-coding ad positions into the app (also known as client-side positioning).,addFixedPosition(int position),Description: Specifies a fixed ad position. Returns this MoPubClientPositioning object for easy use in chained setters.,public MoPubClientPositioning  
MoPubClientPositioning,Enables hard-coding ad positions into the app (also known as client-side positioning).,enableRepeatingPositions(int interval),Description: Enables showing ads ad at a repeated interval. An integer corresponding to the interval is passed in.,public MoPubClientPositioning  
MoPubNative,"The object representing a MoPub native ad. This class is intended for a manual native ad integration. Refer here for additional implementation instructions. To use the ad placer, refer here.",destroy(),Description: Removes existing native ad instance in session. Used when finished showing an ad to free up existing resources.,public void  
MoPubNative,"The object representing a MoPub native ad. This class is intended for a manual native ad integration. Refer here for additional implementation instructions. To use the ad placer, refer here.",makeRequest(),Description: Issues an ad request. Only called after initializing the SDK with initializeSdk().,public void  
MoPubNative,"The object representing a MoPub native ad. This class is intended for a manual native ad integration. Refer here for additional implementation instructions. To use the ad placer, refer here.",makeRequest(RequestParameters requestParameters),Description: Issues an ad request with the specified request parameters.,public void  
MoPubNative,"The object representing a MoPub native ad. This class is intended for a manual native ad integration. Refer here for additional implementation instructions. To use the ad placer, refer here.","makeRequest(RequestParameters requestParameters, Integer sequenceNumber)",Description: Issues an ad request with the specified request parameters. We recommend using makeRequest() or makeRequest(RequestParameters requestParameters).,public void  
MoPubNative,"The object representing a MoPub native ad. This class is intended for a manual native ad integration. Refer here for additional implementation instructions. To use the ad placer, refer here.",registerAdRenderer(MoPubAdRenderer moPubAdRenderer),Description: Registers an ad renderer for rendering a specific native ad format.,public void  
MoPubNative,"The object representing a MoPub native ad. This class is intended for a manual native ad integration. Refer here for additional implementation instructions. To use the ad placer, refer here.","setLocalExtras(Map<String, Object> localExtras)",Description: Specifies a map of key-value pairs on the current native ad object to be passed in the ad request for ad targeting. Used to append additional data for mediation.,public void  
MoPubNativeEventListener,An interface for native ad impression and click tracking events that publishers can implement to be notified by the MoPub SDK.,onClick(View view),Description: The callback fired when the native ad has been clicked. No-op for MoPubStreamAdPlacer and ad adapters implementations.,public void  
MoPubNativeEventListener,An interface for native ad impression and click tracking events that publishers can implement to be notified by the MoPub SDK.,onImpression(View view),Description: The callback fired when the native ad has recorded an impression. No-op for MoPubStreamAdPlacer and ad adapters implementations.,public void  
MoPubNativeAdLoadedListener,A listener for determining when ads are loaded into an ad Placer.,onAdLoaded(int position),Description: Called when an ad is loaded at the specified position.,public void  
MoPubNativeAdLoadedListener,A listener for determining when ads are loaded into an ad Placer.,onAdRemoved(int position),Description: Called when an ad is removed at the specified position.,public void  
MoPubNativeAdPositioning,Provides factory methods for setting up native ad positions. This class supports two types of positioning to use when placing ads into your stream:,clientPositioning(),"Server positioning: The SDK connects to the MoPub server to determine the optimal positions for ads. These positions can also be configured using the MoPub Publisher UI. We recommend using server positioning, and it is the default if positioning is not specified when loading ads.",public static MoPubClientPositioning  
MoPubNativeAdPositioning,Provides factory methods for setting up native ad positions. This class supports two types of positioning to use when placing ads into your stream:,serverPositioning(),Description: Creates and returns a new MoPubNativeAdPositioning.MoPubClientPositioning object.,public static MoPubServerPositioning  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",clearAds(),"Description: Stops loading ads, immediately clearing any ads currently in the stream.",public void  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",destroy(),Description: Cleans up the existing recycler adapter instance in session. Used when finished showing an ad to free up existing resources.,public void  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",getAdjustedPosition(int originalPosition),"Description: Returns the adjusted position of an item in the stream, after the insertion of ads in the stream.",public int  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",getItemCount(),Description: Returns the number of items in the stream. Items include both ads and content; each item is a cell in the list.,public int  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",getItemId(int position),"Description: Returns a stable negative item ID for ad items, and calls getItemId on the original adapter for non-ad items.",public long  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",getItemViewType(int position),Description: Returns the type of View that will be created for the specified item.,public int  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",getOriginalPosition(int position),"Description: Returns the original position of an item in the stream prior to the insertion of ads in the stream. For example, in this stream: {Item0, Ad, Item1, Item2, Ad, Item3}, calling getOriginalPosition(5) returns ‘3’.",public int  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",isAd(int position),Description: Whether the given position is an ad. Returns true if ad (only if there is an ad loaded for this position); returns false otherwise..,public boolean  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",loadAds(String adUnitId),Description: Starts loading ads from the MoPub server.,public void  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.","loadAds(String adUnitId, RequestParameters requestParameters)","Description: Starts loading ads from the MoPub server, using the given request targeting information.",public void  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",refreshAds(String adUnitId),"Description: Manually sends out a new ad request, while preserving the scroll position. Used to issue a new ad request and start a new refresh cycle.",public void  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.","refreshAds(String adUnitId, RequestParameters requestParameters)","Description: Manually sends out a new ad request with additional targeting information, while preserving the scroll position. Used to issue a new ad request and start a new request cycle. RequestParameters is an object for specifying targeting data such as keywords, location (deprecated as of 5.12.0), and customer ID.",public void  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",registerAdRenderer(MoPubAdRenderer adRenderer),Description: Registers an ad renderer for rendering a specific native ad format.,public void  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",setAdLoadedListener(MoPubNativeAdLoadedListener listener),Description: Sets a listener that will be called after the SDK loads new ads from the server and places them into the stream. The listener will be active starting when loadAds() is called and until destroy() is called. The listener can also be set to null to remove the listener.,public void  
MoPubRecyclerAdapter,"Contains methods to request native ads for a stream (a RecyclerView). For the manual native ad integration, refer to the MoPubNative.java class and to our documentation.",setContentChangeStrategy(MoPubRecyclerAdapter.ContentChangeStrategy strategy),"Parameters:
listener: An instance of MoPubNativeAdLoadedListener that tracks when ads are loaded (onAdLoaded) and when ads are removed (onAdRemoved) from the stream.",public void  
MoPubStaticNativeAdRenderer,An implementation of MoPubAdRenderer for rendering native ads.,"createAdView(Context context, ViewGroup parent)","Description: Creates a new view to be used as an ad. This method is called when you call MoPubStreamAdPlacer.getAdView(int position, View convertView, ViewGroup parent) and the convertView is null. You must return a valid view. Returns a new ad view.",public View  
MoPubStaticNativeAdRenderer,An implementation of MoPubAdRenderer for rendering native ads.,"renderAdView(View view, StaticNativeAd staticNativeAd)","Description: Renders a view created by createAdView(android.content.Context, android.view.ViewGroup) by filling it with ad data.",public void  
MoPubStaticNativeAdRenderer,An implementation of MoPubAdRenderer for rendering native ads.,supports(BaseNativeAd nativeAd),Description: Determines if this renderer supports the type of native ad passed in. Returns true if the renderer can render the native ad; false if it cannot.,public boolean  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",CONTENT_VIEW_TYPE,Description: Constant representing that the view type for a given position is a regular content item instead of an ad.,public int  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.","bindAdView(NativeAd nativeAd, View adView)","Description: Given an ad and a view, attaches the ad data to the view and prepares the ad for display.",public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",clearAds(),"Description: Stops loading ads, immediately clearing any ads currently in the stream.",public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",destroy(),Description: Cleans up the existing ad placer instance in session. Used when finished showing an ad to free up existing resources.,public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",getAdData(int position),"Description: Returns an ad data object, or null if there is no ad at this position.",public Object  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",getAdjustedCount(int originalCount),Description: Returns the number of items in the stream. Items include both content and ads; each item is a cell in the list.,public int  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",getAdjustedPosition(int originalPosition),"Description: Returns the adjusted position of an item in the stream, after the insertion of ads in the stream.",public int  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.","getAdView(int position, View convertView, ViewGroup parent)","Description: Gets the ad at the given position, or null if there is no ad at the given position.",public View  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",getAdViewType(int position),Description: Returns the ad view type (content or ad) for this position. Returns 0 if content; between 1 and getAdViewTypeCount() if ad.,public int  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",getAdViewTypeCount(),Description: Returns the number of ad view types that can be placed by this ad placer.,public int  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",getOriginalCount(int count),Description: Returns the number of items in the stream prior to the insertion of ads. Items include only content; each item is a cell in the list.,public int  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",getOriginalPosition(int position),Description: Returns the original position of an item in the stream prior to the insertion of ads in the stream.,public int  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",insertItem(int originalPosition),"Description: Inserts a content row at the given position, adjusting ad positions accordingly. Used when inserting an item into a stream, to increment ad positions based on that new item. To avoid incrementing ad positions when inserting items, notifyDataSetChanged() can be called on the adapter to reload items normally. This is typically the case when inserting items at the end of a stream.",public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",isAd(int position),Description: Whether the given position is an ad. This will return true only if there is an ad loaded for this position; false otherwise.,public boolean  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",loadAds(String adUnitId),Description: Issues an ad request. Only called after having initialized the SDK with initializeSdk().,public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.","loadAds(String adUnitId, RequestParameters requestParameters)","Description: Starts loading ads from the MoPub server, using the given request targeting information. Request parameters is an object for specifying targeting data such as keywords, location (deprecated as of 5.12.0), and customer ID.",public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.","moveItem(int originalPosition, int newPosition)","Description: Moves the content row at the given position adjusting ad positions accordingly. Used when moving an item in the stream to have ad positions move as well. For example, if the stream looks like this: {Item0, Ad, Item1, Item2, Ad, Item3}, and the item at position 2 is moved to position 3, the new stream will look like this: {Item0, Ad, Item1, Ad, Item3, Item2}.",public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.","placeAdsInRange(int startPosition, int endPosition)","Description: Inserts ads that should appear in the given range. By default, the ad placer will place ads within the first 10 positions in the stream, according to the positions specified. This method can be used to place ads into the currently visible range as the user scrolls through the stream.
This method takes advantage of a short-lived in-memory ad cache, and will immediately place any ads from the cache. If there are no ads in the cache, this method will load additional ads from the server and place them once they are loaded. If placeAdsInRange() is called again before ads are retrieved from the server, the new ads will show in the new positions rather than the old positions.
Any integer can be passed as a startPosition and endPosition for the range, including negative numbers or numbers greater than the current stream item count. The ad placer will only place ads between 0 and item count.",public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",registerAdRenderer(MoPubAdRenderer adRenderer),Description: Registers an ad renderer for rendering a specific native ad format in the stream.,public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.","removeAdsInRange(int originalStartPosition, int originalEndPosition)","Description: Removes ads in the given range from (originalStartPosition, originalEndPosition). Returns an integer corresponding to the number of ads removed.",public int  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",removeItem(int originalPosition),"Description: Removes the content row at the given position, adjusting ad positions accordingly. Used when removing an item from the stream, to decrement ad positions based on that removed item. For example, if the stream looks like this: {Item0, Ad, Item1, Item2, Ad, Item3}, and an item at position 2 is removed, the new stream will look like this: {Item0, Ad, Item1, Ad, Item3}.",public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",setAdLoadedListener(MoPubNativeAdLoadedListener listener),Description: Sets a listener that will be called after the SDK loads new ads from the server and places them into the stream. The listener will be active starting when loadAds() is called and until destroy() is called. The listener can also be set to null to remove the listener. There is not a one-to-one correspondence between calls to loadAd and this listener. The SDK will call the listener every time an ad loads.,public void  
MoPubStreamAdPlacer,"Contains methods to request native ads for a stream (any other type of stream). For a manual native ad integration, refer to MoPubNative.java.",setItemCount(int originalCount),"Description: Sets the original number of items in the stream. This method is necessary for the placer to know where the valid positions are for placing ads. After calling this method, the ad placer will call MoPubNativeAdLoadedListener.onAdLoaded (int) each time an ad is loaded in the stream.",public void  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.",clear(View view),"Description: Clears NativeAd state associated with this View. Call this when the NativeAd is no longer seen by a user. If you would like to render a different NativeAd into the same View, you must call this method first.",public void  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.","createAdView(Context context, ViewGroup parent)",Description: Renders the ad view. We strongly recommend that this context be an Activity to preserve the current activity’s theme.,public View  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.",destroy(),Description: Removes existing native ad instance in session. Used when finished showing an ad to free up existing resources.,public void  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.",getAdUnitId(),Parameters: None.,public String  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.",getBaseNativeAd(),Description: Returns the BaseNativeAd object for this NativeAd. This object is created by a CustomEventNative subclass after a successful ad request and is specific to the ad source. If it comes from the MoPub Exchange or is a directly-served ad it will be of the typeMoPubCustomEventNative.MoPubStaticNativeAd or MoPubVideoNativeAd. If it is returned by a mediated ad network it may have another type.,public BaseNativeAd  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.",getMoPubAdRenderer(),Parameters: None.,public MoPubAdRenderer  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.",isDestroyed(),Parameters: None.,public boolean  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.",prepare(View view),Description: Prepares the NativeAd to be seen on screen. You should call this method after calling renderAdView(View) with the same View and before the ad is shown on screen. This method is commonly used to initialize impression tracking and other state associated with the View.,public void  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.",renderAdView(View view),"Parameters:
view: The View hosting the native ad.",public void  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.",setMoPubNativeEventListener(MoPubNativeEventListener moPubNativeEventListener),"Parameters:
moPubNativeEventListener: A listener object for impression and click tracking events.",public void  
NativeAd,"This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or a mediated native ad network. This class can be used to create and render a View that displays a native ad, tracking impressions and clicks for it. Using MoPubStreamAdPlacer, you can automatically have NativeAds rendered into Views and inserted into your app’s content stream without manipulating this class directly. In general, you should get instances of NativeAd from MoPubNative instances in its MoPubNative.onNativeLoad() callback and should not construct them directly.",toString(),Parameters: None.,public String  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,AD_SUCCESS,Description: This is not an error code. An ad has successfully been loaded. You may now show the ad on screen.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,CONNECTION_ERROR,Description: There is no network connectivity available on the device at the moment. No ad request has been made.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,EMPTY_AD_RESPONSE,Description: The ad server returns an empty ad response with no creative markup to render into an ad. This is usually caused by a “no fill” scenario. Contact MoPub if the issue persists.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,IMAGE_DOWNLOAD_FAILURE,"Description: There is a failure trying to download image asset(s) associated with the current native ad object. Used by the MoPub SDK when a given image URL is empty/null, or when the download process does not succeed. Contact MoPub if the issue persists.",public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,INVALID_REQUEST_URL,Description: The ad request URL is invalid. Used by the MoPub SDK when no other explicit error code from NativeErrorCode is given in failure callbacks. Contact MoPub if the issue persists.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,INVALID_RESPONSE,Description: The ad response received from the ad server comes in a form not recognized or understood by the MoPub SDK. Contact MoPub if the issue persists.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NATIVE_ADAPTER_CONFIGURATION_ERROR,"Description: There is a problem configuring the mediation adapter prior to the ad request to the mediation ad network. A typical cause is not having valid keys and data required by the mediation network SDK. Check the individual mediation adapter for a specific scenario where this error can be thrown, and ensure you have valid (non-empty and active) data to mediate that network entered on your MoPub dashboard.",public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NATIVE_ADAPTER_NOT_FOUND,Description: The native ad adapter class that the MoPub SDK is trying to invoke (based on the class name received in the ad response) does not exist in the current app. Make sure you have properly integrated the mediation adapters in question.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NATIVE_RENDERER_CONFIGURATION_ERROR,Description: A native ad renderer that is required to render the current native ad creative is not registered with the MoPub SDK. Refer to our section about setting up ad renderers for native ads for assistance.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NETWORK_INVALID_REQUEST,Description: The mediation ad network received an invalid ad request from the adapter. This error code is currently used only by the AdMob adapters and is considered an edge case.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NETWORK_INVALID_STATE,Description: The mediation ad SDK has failed to process the ad request due to an unspecified internal error. Contact the ad network in question with your device logs for assistance.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NETWORK_NO_FILL,Description: The mediation ad network has no inventory to serve for the current ad request. Contact MoPub and/or the mediation ad network if the issue persists.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,NETWORK_TIMEOUT,Description: The mediation ad network timed out before returning an ad response. This timeout is internally administered by the MoPub SDK and may not be modified. Contact MoPub and/or the mediation ad network if the issue persists.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,SERVER_ERROR_RESPONSE_CODE,Description: The mediation ad network has returned an erroneous error code that is in the range of HTTP 500 inclusive and HTTP 600 exclusive. Contact the ad network in question if the issue persists.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,UNEXPECTED_RESPONSE_CODE,Description: The MoPub SDK has received an unexpected response code from the ad server. This error code is currently not in use.,public  
NativeErrorCode,Recognized native ad error codes that the MoPub SDK and mediation adapters use in callbacks to notify publishers of error cases.,UNSPECIFIED,Description: An error for which there is no error message has occurred.,public  
NativeImageHelper,Collection of helper methods to assist with image download and display. Intended for mediation adapter implementations only. Refer to our adapter building instructions for native ads for additional implementation instructions. Do not call this class or associated methods from your app.,"loadImageView(String url, ImageView imageView)",Description: Helper method that takes an image URL and loads the image into an image view.,public static void  
NativeImageHelper,Collection of helper methods to assist with image download and display. Intended for mediation adapter implementations only. Refer to our adapter building instructions for native ads for additional implementation instructions. Do not call this class or associated methods from your app.,"preCacheImages(Context context, List<String> imageUrls, ImageListener imageListener)",Description: Pre-caches the given set of image URLs. We recommend using this method to warm the image cache before calling CustomEventNative.CustomEventNativeListener.onNativeAdLoaded(com.mopub.nativeads.BaseNativeAd). Doing so will force images to cache before displaying the ad.,public static void  
RequestParameters,Contains methods to set targeting data for native ad (com.mopub.nativeads.RequestParameters) and rewarded video (com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters).,getDesiredAssets(),Description: Returns a String containing the assets marked as desired by publishers at the time of the ad request.,public String  
RequestParameters,Contains methods to set targeting data for native ad (com.mopub.nativeads.RequestParameters) and rewarded video (com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters).,getKeywords(),Description: Returns a String containing keywords that have been set on the current ad object. Null if not set.,public String  
RequestParameters,Contains methods to set targeting data for native ad (com.mopub.nativeads.RequestParameters) and rewarded video (com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters).,getLocation(),Description: Deprecated as of 5.12.0. Returns a Location object containing latitude and longitude data that have been set on the current ad object. Null if not set.,public Location  
RequestParameters,Contains methods to set targeting data for native ad (com.mopub.nativeads.RequestParameters) and rewarded video (com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters).,getUserDataKeywords(),Description: Returns a String containing user-identifiable keywords that have been set on the current ad object. Null if not set.,public String  
ViewBinder.Builder,Specifies the binding between the publisher’s layout XML and the native ad assets. Refer to our directions for setting up your native ad layout for usage instructions.,"addExtra(String key, int resourceId)",Description: Add additional resource bindings via a key and an ID that are not already available via the bindings below. This is typically the case when an ad network might require bindings to ad assets that do not have a MoPub equivalent. Returns the current Builder.,public final Builder ViewBinder.Builder  
ViewBinder.Builder,Specifies the binding between the publisher’s layout XML and the native ad assets. Refer to our directions for setting up your native ad layout for usage instructions.,"addExtras(Map<String,Integer> resourceIds)","Description: Refer to the description for addExtra(String key, int resourceId) with the difference being this method accepts a Map of the <key, ID> bindings.",public final Builder ViewBinder.Builder  
ViewBinder.Builder,Specifies the binding between the publisher’s layout XML and the native ad assets. Refer to our directions for setting up your native ad layout for usage instructions.,build(),Description: Builds the current ViewBinder instance after the bindings below have been specified by the publisher. Returns a new ViewBinder to be built.,public final ViewBinder  
ViewBinder.Builder,Specifies the binding between the publisher’s layout XML and the native ad assets. Refer to our directions for setting up your native ad layout for usage instructions.,callToActionId(int callToActionId),Description: ID for a Button/ImageView in XML passed in by publishers. To be bound to a native ad call to action asset. Returns the current Builder.,public final ViewBinder.Builder  
ViewBinder.Builder,Specifies the binding between the publisher’s layout XML and the native ad assets. Refer to our directions for setting up your native ad layout for usage instructions.,iconImageId(int iconImageId),Description: ID for an ImageView in XML passed in by publishers. To be bound to a native ad icon image asset. Returns the current Builder.,public final ViewBinder.Builder  
ViewBinder.Builder,Specifies the binding between the publisher’s layout XML and the native ad assets. Refer to our directions for setting up your native ad layout for usage instructions.,mainImageId(int mediaLayoutId),Description: ID for an ImageView in XML passed in by publishers. To be bound to a native ad main image asset. Returns the current Builder.,public final ViewBinder.Builder  
ViewBinder.Builder,Specifies the binding between the publisher’s layout XML and the native ad assets. Refer to our directions for setting up your native ad layout for usage instructions.,privacyInformationIconImageId(int privacyInformationIconImageId),Description: ID for an ImageView in XML passed in by publishers. To be bound to a native ad privacy information icon asset. Returns the current Builder.,public final ViewBinder.Builder  
ViewBinder.Builder,Specifies the binding between the publisher’s layout XML and the native ad assets. Refer to our directions for setting up your native ad layout for usage instructions.,textId(int textId),Description: ID for a TextView in XML passed in by publishers. To be bound to a native ad text asset. Returns the current Builder.,public final ViewBinder.Builder  
ViewBinder.Builder,Specifies the binding between the publisher’s layout XML and the native ad assets. Refer to our directions for setting up your native ad layout for usage instructions.,titleId(int titleId),Description: ID for a TextView in XML passed in by publishers. To be bound to a native ad title asset. Returns the current Builder.,public final ViewBinder.Builder  