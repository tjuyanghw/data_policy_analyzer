class_name,class_description,method,method_description,data_type
zendesk.core.ActionDescription,N/A,getIcon(),N/A,N/A
zendesk.core.ActionDescription,N/A,getLocalizedAccessibilityLabel(),N/A,N/A
zendesk.core.ActionDescription,N/A,getLocalizedLabel(),N/A,N/A
zendesk.core.ActionHandler,"Defines a handler for an inter-SDK action, such as one SDK starting another one, without either
 SDK having a dependency on the other. An example of this would be a hypothetical Help Center
 SDK starting the ""create ticket"" screen of the Support SDK.
 
 In order to properly separate SDKs from each other, handlers will work on ""action Strings"".
 Similar to Android's Intent system, multiple SDKs can be capable of handling the same action
 String. For example, a ""contact us"" action can be handled by Support, Chat, Voice, Message, etc.
 In the event that more than one ActionHandler has been registered for the same actionString,
 the getPriority() method can be used to determine which one to call handle on.",canHandle(java.lang.String actionName),Determines whether or not the ActionHandler object can handle the given action String.,boolean
zendesk.core.ActionHandler,"Defines a handler for an inter-SDK action, such as one SDK starting another one, without either
 SDK having a dependency on the other. An example of this would be a hypothetical Help Center
 SDK starting the ""create ticket"" screen of the Support SDK.
 
 In order to properly separate SDKs from each other, handlers will work on ""action Strings"".
 Similar to Android's Intent system, multiple SDKs can be capable of handling the same action
 String. For example, a ""contact us"" action can be handled by Support, Chat, Voice, Message, etc.
 In the event that more than one ActionHandler has been registered for the same actionString,
 the getPriority() method can be used to determine which one to call handle on.",getActionDescription(),N/A,N/A
zendesk.core.ActionHandler,"Defines a handler for an inter-SDK action, such as one SDK starting another one, without either
 SDK having a dependency on the other. An example of this would be a hypothetical Help Center
 SDK starting the ""create ticket"" screen of the Support SDK.
 
 In order to properly separate SDKs from each other, handlers will work on ""action Strings"".
 Similar to Android's Intent system, multiple SDKs can be capable of handling the same action
 String. For example, a ""contact us"" action can be handled by Support, Chat, Voice, Message, etc.
 In the event that more than one ActionHandler has been registered for the same actionString,
 the getPriority() method can be used to determine which one to call handle on.",getPriority(),Returns the priority of the ActionHandler.,int
zendesk.core.ActionHandler,"Defines a handler for an inter-SDK action, such as one SDK starting another one, without either
 SDK having a dependency on the other. An example of this would be a hypothetical Help Center
 SDK starting the ""create ticket"" screen of the Support SDK.
 
 In order to properly separate SDKs from each other, handlers will work on ""action Strings"".
 Similar to Android's Intent system, multiple SDKs can be capable of handling the same action
 String. For example, a ""contact us"" action can be handled by Support, Chat, Voice, Message, etc.
 In the event that more than one ActionHandler has been registered for the same actionString,
 the getPriority() method can be used to determine which one to call handle on.","handle(java.util.Map<java.lang.String,java.lang.Object> data,
      Context context)",Invokes an action on the given action String.,void
zendesk.core.ActionHandler,"Defines a handler for an inter-SDK action, such as one SDK starting another one, without either
 SDK having a dependency on the other. An example of this would be a hypothetical Help Center
 SDK starting the ""create ticket"" screen of the Support SDK.
 
 In order to properly separate SDKs from each other, handlers will work on ""action Strings"".
 Similar to Android's Intent system, multiple SDKs can be capable of handling the same action
 String. For example, a ""contact us"" action can be handled by Support, Chat, Voice, Message, etc.
 In the event that more than one ActionHandler has been registered for the same actionString,
 the getPriority() method can be used to determine which one to call handle on.","updateSettings(java.util.Map<java.lang.String,JsonElement> settings)",Notifies the ActionHandler of an update to settings.,void
zendesk.core.ActionHandlerRegistry,"Defines an interface for a registry of ActionHandler objects to be used for inter-SDK
 actions, such as starting an android.app.Activity from one SDK, in another SDK, without
 any dependency between them.
 
 ActionHandler objects can be added and removed from the registry using
 ActionHandlerRegistry.add(ActionHandler) and
 ActionHandlerRegistry.remove(ActionHandler), respectively. A query method,
 ActionHandlerRegistry.handlerByAction(String), returns the highest priority
 ActionHandler whose ActionHandler.canHandle(String) returned true.",add(ActionHandler actionHandler),Adds an ActionHandler to the registry.,void
zendesk.core.ActionHandlerRegistry,"Defines an interface for a registry of ActionHandler objects to be used for inter-SDK
 actions, such as starting an android.app.Activity from one SDK, in another SDK, without
 any dependency between them.
 
 ActionHandler objects can be added and removed from the registry using
 ActionHandlerRegistry.add(ActionHandler) and
 ActionHandlerRegistry.remove(ActionHandler), respectively. A query method,
 ActionHandlerRegistry.handlerByAction(String), returns the highest priority
 ActionHandler whose ActionHandler.canHandle(String) returned true.",clear(),Removes all ActionHandlers from the registry.,void
zendesk.core.ActionHandlerRegistry,"Defines an interface for a registry of ActionHandler objects to be used for inter-SDK
 actions, such as starting an android.app.Activity from one SDK, in another SDK, without
 any dependency between them.
 
 ActionHandler objects can be added and removed from the registry using
 ActionHandlerRegistry.add(ActionHandler) and
 ActionHandlerRegistry.remove(ActionHandler), respectively. A query method,
 ActionHandlerRegistry.handlerByAction(String), returns the highest priority
 ActionHandler whose ActionHandler.canHandle(String) returned true.",handlerByAction(java.lang.String actionName),"Finds and returns the highest priority ActionHandler whose
 ActionHandler.canHandle(String) method returned true for the given action String, or
 null if no ActionHandlers returned true.",ActionHandler
zendesk.core.ActionHandlerRegistry,"Defines an interface for a registry of ActionHandler objects to be used for inter-SDK
 actions, such as starting an android.app.Activity from one SDK, in another SDK, without
 any dependency between them.
 
 ActionHandler objects can be added and removed from the registry using
 ActionHandlerRegistry.add(ActionHandler) and
 ActionHandlerRegistry.remove(ActionHandler), respectively. A query method,
 ActionHandlerRegistry.handlerByAction(String), returns the highest priority
 ActionHandler whose ActionHandler.canHandle(String) returned true.",handlersByAction(java.lang.String actionName),"Finds and returns a priority ordered list of ActionHandler whose
 ActionHandler.canHandle(String) method returned true for the given action String,
 or an empty list if no ActionHandlers returned true.",java.util.List<ActionHandler>
zendesk.core.ActionHandlerRegistry,"Defines an interface for a registry of ActionHandler objects to be used for inter-SDK
 actions, such as starting an android.app.Activity from one SDK, in another SDK, without
 any dependency between them.
 
 ActionHandler objects can be added and removed from the registry using
 ActionHandlerRegistry.add(ActionHandler) and
 ActionHandlerRegistry.remove(ActionHandler), respectively. A query method,
 ActionHandlerRegistry.handlerByAction(String), returns the highest priority
 ActionHandler whose ActionHandler.canHandle(String) returned true.",remove(ActionHandler actionHandler),Removes an ActionHandler from the registry.,void
zendesk.core.ActionHandlerRegistry,"Defines an interface for a registry of ActionHandler objects to be used for inter-SDK
 actions, such as starting an android.app.Activity from one SDK, in another SDK, without
 any dependency between them.
 
 ActionHandler objects can be added and removed from the registry using
 ActionHandlerRegistry.add(ActionHandler) and
 ActionHandlerRegistry.remove(ActionHandler), respectively. A query method,
 ActionHandlerRegistry.handlerByAction(String), returns the highest priority
 ActionHandler whose ActionHandler.canHandle(String) returned true.","updateSettings(java.util.Map<java.lang.String,JsonElement> settings)",Notifies the Registry of an update to settings.,void
zendesk.core.AnonymousIdentity,"
 This class models an identity which is used to identify an End User within a Zendesk instance.
 
 Please use the AnonymousIdentity.Builder to
 create an instance of this class. A UUID will be created if necessary and associated with
 the identity.
 
 
 If you don't know anything about your user please create an Identity like this:

           Identity identity = new AnonymousIdentity();
      
 
 If you do know something about the user then you can use the optional methods in the
 AnonymousIdentity.Builder to specify them.
 ",equals(java.lang.Object o),N/A,N/A
zendesk.core.AnonymousIdentity,"
 This class models an identity which is used to identify an End User within a Zendesk instance.
 
 Please use the AnonymousIdentity.Builder to
 create an instance of this class. A UUID will be created if necessary and associated with
 the identity.
 
 
 If you don't know anything about your user please create an Identity like this:

           Identity identity = new AnonymousIdentity();
      
 
 If you do know something about the user then you can use the optional methods in the
 AnonymousIdentity.Builder to specify them.
 ",getEmail(),Gets the email address associated with this anonymous identity,java.lang.String
zendesk.core.AnonymousIdentity,"
 This class models an identity which is used to identify an End User within a Zendesk instance.
 
 Please use the AnonymousIdentity.Builder to
 create an instance of this class. A UUID will be created if necessary and associated with
 the identity.
 
 
 If you don't know anything about your user please create an Identity like this:

           Identity identity = new AnonymousIdentity();
      
 
 If you do know something about the user then you can use the optional methods in the
 AnonymousIdentity.Builder to specify them.
 ",getName(),Gets the name associated with this anonymous identity,java.lang.String
zendesk.core.AnonymousIdentity,"
 This class models an identity which is used to identify an End User within a Zendesk instance.
 
 Please use the AnonymousIdentity.Builder to
 create an instance of this class. A UUID will be created if necessary and associated with
 the identity.
 
 
 If you don't know anything about your user please create an Identity like this:

           Identity identity = new AnonymousIdentity();
      
 
 If you do know something about the user then you can use the optional methods in the
 AnonymousIdentity.Builder to specify them.
 ",getSdkGuid(),Gets the sdk guid associated with this anonymous identity,java.lang.String
zendesk.core.AnonymousIdentity,"
 This class models an identity which is used to identify an End User within a Zendesk instance.
 
 Please use the AnonymousIdentity.Builder to
 create an instance of this class. A UUID will be created if necessary and associated with
 the identity.
 
 
 If you don't know anything about your user please create an Identity like this:

           Identity identity = new AnonymousIdentity();
      
 
 If you do know something about the user then you can use the optional methods in the
 AnonymousIdentity.Builder to specify them.
 ",hashCode(),N/A,N/A
zendesk.core.AnonymousIdentity.Builder,This is a builder class which is used to generate a Identity,build(),"Builds a Identity object with the
 specified parameters.",Identity
zendesk.core.AnonymousIdentity.Builder,This is a builder class which is used to generate a Identity,withEmailIdentifier(java.lang.String email),Specify the Email to be used as part of the identity when using Anonymous Access,AnonymousIdentity.Builder
zendesk.core.AnonymousIdentity.Builder,This is a builder class which is used to generate a Identity,withNameIdentifier(java.lang.String name),Specify the Name to be used as part of the identity when using Anonymous Access.,AnonymousIdentity.Builder
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getAuthor(),Gets the author of this article,User
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getAuthorId(),Gets the ID of the author of the article,java.lang.Long
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getBody(),Gets the body of the article in plain text,java.lang.String
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getCreatedAt(),Gets the date that the article was created at.,java.util.Date
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getDownvoteCount(),Gets the number of downvotes for this article,int
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getHtmlUrl(),Gets the html URL of the article.,java.lang.String
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getId(),Gets the ID of the article,java.lang.Long
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getLabelNames(),Gets the label names of the article,java.util.List<java.lang.String>
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getLocale(),"Gets the locale of the article in the form of ll-CC, e.g.",java.lang.String
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getSectionId(),Gets the ID of the section that the article belongs to,java.lang.Long
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getSourceLocale(),"Gets the source locale of the article in the form of ll-CC, e.g.",java.lang.String
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getTitle(),Gets the title of the article,java.lang.String
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getUpdatedAt(),Gets the date that the article was updated at.,java.util.Date
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getUpvoteCount(),Gets the number of upvotes for this article.,int
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getUrl(),Gets the API URL of the article,java.lang.String
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getVoteCount(),Gets the total number of votes that have been cast for this article.,int
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",getVoteSum(),Gets the sum of votes.,int
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",isCommentsDisabled(),Checks whether comments are disabled or not,boolean
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",isDraft(),Checks if the article is a draft or not,boolean
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",isOutdated(),Checks whether the article is outdated or not,boolean
zendesk.support.Article,"This is a model class for an Article object that will be created by the
 HelpCenterProvider.",setAuthor(User author),Sets the author of this article.,void
zendesk.support.ArticleItem,A HelpItem for Help Center articles,equals(java.lang.Object o),N/A,N/A
zendesk.support.ArticleItem,A HelpItem for Help Center articles,getId(),Gets the ID of this item.,java.lang.Long
zendesk.support.ArticleItem,A HelpItem for Help Center articles,getName(),Gets the name of the item,java.lang.String
zendesk.support.ArticleItem,A HelpItem for Help Center articles,getParentId(),Returns the ID of the parent item.,java.lang.Long
zendesk.support.ArticleItem,A HelpItem for Help Center articles,getViewType(),Gets the type of the item,int
zendesk.support.ArticleItem,A HelpItem for Help Center articles,hashCode(),N/A,N/A
zendesk.support.guide.ArticleUiConfig,"Data class, that represents the initial configuration of ViewArticleActivity. Use the
 ArticleUiConfig.Builder to create an instance.",getUiConfigs(),N/A,N/A
zendesk.support.guide.ArticleUiConfig,"Data class, that represents the initial configuration of ViewArticleActivity. Use the
 ArticleUiConfig.Builder to create an instance.",isContactUsButtonVisible(),N/A,N/A
zendesk.support.guide.ArticleUiConfig,"Data class, that represents the initial configuration of ViewArticleActivity. Use the
 ArticleUiConfig.Builder to create an instance.",isDeflectionEnabled(),N/A,N/A
zendesk.support.guide.ArticleUiConfig.Builder,This builder is used to generate an instance of ArticleUiConfig,config(),Create a UiConfig for the passed in configuration options.,UiConfig
zendesk.support.guide.ArticleUiConfig.Builder,This builder is used to generate an instance of ArticleUiConfig,"intent(Context context,
      java.util.List<UiConfig> uiConfigs)","Create an Intent to start the ViewArticleActivity with the specified configuration
 options.",Intent
zendesk.support.guide.ArticleUiConfig.Builder,This builder is used to generate an instance of ArticleUiConfig,"intent(Context context,
      UiConfig... uiConfigs)","Create an Intent to start the ViewArticleActivity with the specified configuration
 options.",Intent
zendesk.support.guide.ArticleUiConfig.Builder,This builder is used to generate an instance of ArticleUiConfig,"show(Context context,
    java.util.List<UiConfig> uiConfigs)",Shows the activity.,void
zendesk.support.guide.ArticleUiConfig.Builder,This builder is used to generate an instance of ArticleUiConfig,"show(Context context,
    UiConfig... uiConfigs)",Shows the activity.,void
zendesk.support.guide.ArticleUiConfig.Builder,This builder is used to generate an instance of ArticleUiConfig,withContactUsButtonVisible(boolean contactUsVisible),"Define which screens the ""ContactUs"" Floating Action Button should be shown on.",ArticleUiConfig.Builder
zendesk.support.guide.ArticleUiConfig.Builder,This builder is used to generate an instance of ArticleUiConfig,withDeflectionEnabled(boolean deflectionEnabled),"Specifies whether a deflection mechanism should be shown (if one is present) when the contact us button
 is pressed.",ArticleUiConfig.Builder
zendesk.support.ArticleVote,"This is a class model for an Article vote. Votes are typically returned as a response from
 HelpCenterProvider#upvoteArticle(Long, ZendeskCallback) or
 HelpCenterProvider#downvoteArticle(Long, ZendeskCallback)",equals(java.lang.Object o),N/A,N/A
zendesk.support.ArticleVote,"This is a class model for an Article vote. Votes are typically returned as a response from
 HelpCenterProvider#upvoteArticle(Long, ZendeskCallback) or
 HelpCenterProvider#downvoteArticle(Long, ZendeskCallback)",getCreatedAt(),Gets the time at which the vote was created,java.util.Date
zendesk.support.ArticleVote,"This is a class model for an Article vote. Votes are typically returned as a response from
 HelpCenterProvider#upvoteArticle(Long, ZendeskCallback) or
 HelpCenterProvider#downvoteArticle(Long, ZendeskCallback)",getId(),Gets the ID of the Vote,java.lang.Long
zendesk.support.ArticleVote,"This is a class model for an Article vote. Votes are typically returned as a response from
 HelpCenterProvider#upvoteArticle(Long, ZendeskCallback) or
 HelpCenterProvider#downvoteArticle(Long, ZendeskCallback)",getItemId(),Gets the id of the item for which the Vote was cast,java.lang.Long
zendesk.support.ArticleVote,"This is a class model for an Article vote. Votes are typically returned as a response from
 HelpCenterProvider#upvoteArticle(Long, ZendeskCallback) or
 HelpCenterProvider#downvoteArticle(Long, ZendeskCallback)",getItemType(),Gets the type of the item.,java.lang.String
zendesk.support.ArticleVote,"This is a class model for an Article vote. Votes are typically returned as a response from
 HelpCenterProvider#upvoteArticle(Long, ZendeskCallback) or
 HelpCenterProvider#downvoteArticle(Long, ZendeskCallback)",getUpdatedAt(),Gets the time at which the vote was updated,java.util.Date
zendesk.support.ArticleVote,"This is a class model for an Article vote. Votes are typically returned as a response from
 HelpCenterProvider#upvoteArticle(Long, ZendeskCallback) or
 HelpCenterProvider#downvoteArticle(Long, ZendeskCallback)",getUrl(),Gets the API URL of the Vote resource,java.lang.String
zendesk.support.ArticleVote,"This is a class model for an Article vote. Votes are typically returned as a response from
 HelpCenterProvider#upvoteArticle(Long, ZendeskCallback) or
 HelpCenterProvider#downvoteArticle(Long, ZendeskCallback)",getUserId(),Gets the ID of the User who created the Vote,java.lang.Long
zendesk.support.ArticleVote,"This is a class model for an Article vote. Votes are typically returned as a response from
 HelpCenterProvider#upvoteArticle(Long, ZendeskCallback) or
 HelpCenterProvider#downvoteArticle(Long, ZendeskCallback)",getValue(),Gets the value of the Vote,java.lang.Integer
zendesk.support.ArticleVote,"This is a class model for an Article vote. Votes are typically returned as a response from
 HelpCenterProvider#upvoteArticle(Long, ZendeskCallback) or
 HelpCenterProvider#downvoteArticle(Long, ZendeskCallback)",hashCode(),N/A,N/A
zendesk.support.ArticleVoteStorage,Provides storage of an ArticleVote for each article with an article id.,getStoredArticleVote(java.lang.Long articleId),Gets a stored ArticleVote from the device,ArticleVote
zendesk.support.ArticleVoteStorage,Provides storage of an ArticleVote for each article with an article id.,removeStoredArticleVote(java.lang.Long articleId),Removes an ArticleVote from the device,void
zendesk.support.ArticleVoteStorage,Provides storage of an ArticleVote for each article with an article id.,"storeArticleVote(java.lang.Long articleId,
                ArticleVote articleVote)",Stores an ArticleVote on the device,void
zendesk.support.Attachment,This is a model class for an Attachment object.,getContentType(),"Gets the content type of the attachment, e.g.",java.lang.String
zendesk.support.Attachment,This is a model class for an Attachment object.,getContentUrl(),Gets the URL at which the attachment can be downloaded,java.lang.String
zendesk.support.Attachment,This is a model class for an Attachment object.,getFileName(),Gets the file name of the attachment,java.lang.String
zendesk.support.Attachment,This is a model class for an Attachment object.,getHeight(),Gets the height of the attachment in pixels,java.lang.Long
zendesk.support.Attachment,This is a model class for an Attachment object.,getId(),Gets the ID of the attachment,java.lang.Long
zendesk.support.Attachment,This is a model class for an Attachment object.,getSize(),Gets the size of the attachment in bytes,java.lang.Long
zendesk.support.Attachment,This is a model class for an Attachment object.,getThumbnails(),Gets the thumbnails of the attachment,java.util.List<Attachment>
zendesk.support.Attachment,This is a model class for an Attachment object.,getUrl(),Gets the API URL of the attachment,java.lang.String
zendesk.support.Attachment,This is a model class for an Attachment object.,getWidth(),Gets the width of the attachment in pixels,java.lang.Long
zendesk.support.AttachmentType,"Internal enum used to represent the allowed individual types of attachments that can be fetched
 from a Help Center instance.
 
 Possible attachment types
 
 Inline attachments
 Block attachments
 ",getAttachmentType(),Gets the value that is used in the API to represent this attachment type,java.lang.String
zendesk.support.AttachmentType,"Internal enum used to represent the allowed individual types of attachments that can be fetched
 from a Help Center instance.
 
 Possible attachment types
 
 Inline attachments
 Block attachments
 ",valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static AttachmentType
zendesk.support.AttachmentType,"Internal enum used to represent the allowed individual types of attachments that can be fetched
 from a Help Center instance.
 
 Possible attachment types
 
 Inline attachments
 Block attachments
 ",values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static AttachmentType[]
zendesk.core.AuthenticationProvider,SDK access to Identity. Read only to prevent setting of data by integrators.,getIdentity(),N/A,N/A
zendesk.core.AuthenticationType,Enum to track the authentication type for a given app configuration,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static AuthenticationType
zendesk.core.AuthenticationType,Enum to track the authentication type for a given app configuration,values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static AuthenticationType[]
zendesk.core.BaseStorage,Low level storage description. Using a very basic key value concept.,clear(),Clear everything from storage.,void
zendesk.core.BaseStorage,Low level storage description. Using a very basic key value concept.,get(java.lang.String key),Retrieve the stored value for the provided key.,java.lang.String
zendesk.core.BaseStorage,Low level storage description. Using a very basic key value concept.,"get(java.lang.String key,
   java.lang.Class<E> clazz)",Retrieve the stored value for the provided key.,<E> E
zendesk.core.BaseStorage,Low level storage description. Using a very basic key value concept.,"put(java.lang.String key,
   java.lang.Object object)",Store the the given key value pair.,void
zendesk.core.BaseStorage,Low level storage description. Using a very basic key value concept.,"put(java.lang.String key,
   java.lang.String value)",Store the the given key value pair.,void
zendesk.core.BaseStorage,Low level storage description. Using a very basic key value concept.,remove(java.lang.String key),Remove the stored value for the provided key.,void
zendesk.core.BlipsGroup,"Defines the different groups of blips which can be sent. Intended for use as a parameter in
 methods of BlipsProvider, for determining whether or not the blip should be sent or its
 group has been disabled.",valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static BlipsGroup
zendesk.core.BlipsGroup,"Defines the different groups of blips which can be sent. Intended for use as a parameter in
 methods of BlipsProvider, for determining whether or not the blip should be sent or its
 group has been disabled.",values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static BlipsGroup[]
zendesk.core.BlipsProvider,A Provider for tracking user actions.,"sendBlip(PageView pageView,
        BlipsGroup blipsGroup)",Track a page view.,void
zendesk.core.BlipsProvider,A Provider for tracking user actions.,"sendBlip(UserAction userAction,
        BlipsGroup blipsGroup)",Track a user action,void
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",getCreatedAt(),Gets the date that the category was created at.,java.util.Date
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",getDescription(),Gets the description of the category,java.lang.String
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",getHtmlUrl(),Gets the URL of the category that can be opened in a web browser,java.lang.String
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",getId(),Gets the ID of the category,java.lang.Long
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",getLocale(),"Gets the locale of the category in the form of ll-CC, e.g.",java.lang.String
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",getName(),Gets the name of the category,java.lang.String
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",getPosition(),Gets the position of the category.,int
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",getSourceLocale(),"Gets the source locale of the category in the form of ll-CC, e.g.",java.lang.String
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",getUpdatedAt(),Gets the date that the category was updated at.,java.util.Date
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",getUrl(),Gets the API URL of the category,java.lang.String
zendesk.support.Category,"This is a model class for a Category object that will be created by the
 HelpCenterProvider.",isOutdated(),Checks whether the category is outdated or not,boolean
zendesk.support.CategoryItem,A HelpItem for Help Center categories,equals(java.lang.Object o),N/A,N/A
zendesk.support.CategoryItem,A HelpItem for Help Center categories,getId(),Gets the ID of this item.,java.lang.Long
zendesk.support.CategoryItem,A HelpItem for Help Center categories,getName(),Gets the name of the item,java.lang.String
zendesk.support.CategoryItem,A HelpItem for Help Center categories,getParentId(),Returns the ID of the parent item.,java.lang.Long
zendesk.support.CategoryItem,A HelpItem for Help Center categories,getSections(),N/A,N/A
zendesk.support.CategoryItem,A HelpItem for Help Center categories,getViewType(),Gets the type of the item,int
zendesk.support.CategoryItem,A HelpItem for Help Center categories,hashCode(),N/A,N/A
zendesk.support.CategoryItem,A HelpItem for Help Center categories,isExpanded(),Checks if the category is expanded,boolean
zendesk.support.CategoryItem,A HelpItem for Help Center categories,setExpanded(boolean expanded),Sets the expanded state.,boolean
zendesk.support.CategoryItem,A HelpItem for Help Center categories,setSections(java.util.List<SectionItem> sections),Sets the sections to set as the children of the category,void
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",getAttachments(),Gets the attachments of the comment,java.util.List<java.lang.String>
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",getAuthorId(),Gets the ID of the author who created the comment.,java.lang.Long
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",getBody(),Gets the body of the comment in plain text,java.lang.String
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",getCreatedAt(),Gets the date that the comment was created at,java.util.Date
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",getHtmlBody(),Gets the HTML body of the comment,java.lang.String
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",getId(),Gets the ID of the comment,java.lang.Long
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",getRequestId(),Gets the ID of the request that this comment belongs to,java.lang.String
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",getUrl(),Gets the API URL of the comment,java.lang.String
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",isPublic(),Checks if this comment is public or not,boolean
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",setAttachments(java.util.List<java.lang.String> attachments),Sets the attachments of the comment,void
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",setAuthorId(java.lang.Long authorId),Sets the ID of the author who created the comment,void
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",setBody(java.lang.String body),Sets the body of the comment in plain text,void
zendesk.support.Comment,"This is a model class for a Comment object that will be created by the
 RequestProvider as part of CommentsResponse.",setCreatedAt(java.util.Date createdAt),Sets the date that the comment that the comment was created at,void
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",getAttachments(),Gets the attachments of the comment,java.util.List<Attachment>
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",getAuthorId(),Gets the ID of the author who created the comment.,java.lang.Long
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",getBody(),Gets the body of the comment in plain text,java.lang.String
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",getCreatedAt(),Gets the date that the comment was created at,java.util.Date
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",getHtmlBody(),Gets the HTML body of the comment,java.lang.String
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",getId(),Gets the ID of the comment,java.lang.Long
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",getRequestId(),Gets the ID of the request that this comment belongs to,java.lang.String
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",getUrl(),Gets the API URL of the comment,java.lang.String
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",isPublic(),Checks if this comment is public or not,boolean
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",setAttachments(java.util.List<Attachment> attachments),Sets the attachments of the comment,void
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",setAuthorId(java.lang.Long authorId),Sets the ID of the author who created the comment,void
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",setBody(java.lang.String body),Sets the body of the comment in plain text,void
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",setCreatedAt(java.util.Date createdAt),Sets the date that the comment that the comment was created at,void
zendesk.support.CommentResponse,"This is a model class for a CommentResponse object that will be fetched by the
 RequestProvider as part of CommentsResponse.",setId(java.lang.Long id),Sets the id of the comment,void
zendesk.support.CommentsResponse,"This is a class model for a response for requesting comments for a request. This object will be created by
 RequestProvider",getComments(),Gets the comments in the response,java.util.List<CommentResponse>
zendesk.support.CommentsResponse,"This is a class model for a response for requesting comments for a request. This object will be created by
 RequestProvider",getOrganizations(),Gets the organizations that the users belong to,java.util.List<Organization>
zendesk.support.CommentsResponse,"This is a class model for a response for requesting comments for a request. This object will be created by
 RequestProvider",getUsers(),Gets the users who made the comments in CommentsResponse.getComments(),java.util.List<User>
zendesk.core.CoreSettings,"This model contains the server-driven core SDK specific configurations
 that can affect how the SDK behaves.",getAuthentication(),Returns the authentication type enabled for the App configuration,AuthenticationType
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,getCustomFields(),N/A,N/A
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,getDescription(),Gets the description of this request,java.lang.String
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,getId(),Gets the ID for this request,java.lang.String
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,getSubject(),Gets the subject of this request,java.lang.String
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,getTags(),Gets the tags for this request,java.util.List<java.lang.String>
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,getTicketFormId(),N/A,N/A
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,setAttachments(java.util.List<java.lang.String> attachments),Sets a List of attachment UploadResponse#token to this Request.,void
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,setCustomFields(java.util.List<CustomField> customFields),Sets the custom fields for this Request.,void
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,setDescription(java.lang.String description),Sets the description of this request,void
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,setId(java.lang.String id),Sets the ID for this request,void
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,"setMetadata(java.util.Map<java.lang.String,java.lang.String> metadata)",Sets the metadata for this Request.,void
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,setSubject(java.lang.String subject),Sets the subject of this request,void
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,setTags(java.util.List<java.lang.String> tags),Sets the tags for this request,void
zendesk.support.CreateRequest,This is a model class for a request which will be created by the RequestProvider,setTicketFormId(java.lang.Long ticketFormId),Sets the ticket form id for this Request.,void
zendesk.support.CreateRequestActionHandler,N/A,canHandle(java.lang.String actionName),Determines whether or not the ActionHandler object can handle the given action String.,boolean
zendesk.support.CreateRequestActionHandler,N/A,getActionDescription(),N/A,N/A
zendesk.support.CreateRequestActionHandler,N/A,getPriority(),Returns the priority of the ActionHandler.,int
zendesk.support.CreateRequestActionHandler,N/A,"handle(java.util.Map<java.lang.String,java.lang.Object> data,
      Context context)",Invokes an action on the given action String.,void
zendesk.support.CreateRequestActionHandler,N/A,"updateSettings(java.util.Map<java.lang.String,JsonElement> settings)",Notifies the ActionHandler of an update to settings.,void
zendesk.support.CustomField,CustomFields model which allows for custom data to be set on a request,getId(),N/A,N/A
zendesk.support.CustomField,CustomFields model which allows for custom data to be set on a request,getValue(),"Deprecated. 
use #getValueString()
 
 As of 2.2.2 #value is of type Object, and may be a String, a Boolean, or a List
 This is to support multi-select custom fields. Use type specific getters for value,
 or use #getValueObject() to get the value as an object.
",java.lang.String
zendesk.support.CustomField,CustomFields model which allows for custom data to be set on a request,getValueBoolean(),N/A,N/A
zendesk.support.CustomField,CustomFields model which allows for custom data to be set on a request,getValueList(),N/A,N/A
zendesk.support.CustomField,CustomFields model which allows for custom data to be set on a request,getValueObject(),N/A,N/A
zendesk.support.CustomField,CustomFields model which allows for custom data to be set on a request,getValueString(),N/A,N/A
zendesk.core.CustomNetworkConfig,"Abstract class for customising network configuration, to be used by Zendesk SDKs in conjunction
 with RestServiceProvider#createRestService(Class, CustomNetworkConfig).
 
 It provides a way to add custom configuration to the OkHttpClient and Retrofit
 objects used to power a generated Retrofit service API class, through implementing the
 configuration methods. Both are empty by default.
 
 This class should not be used directly by integrators.",configureOkHttpClient(OkHttpClient.Builder builder),"Add custom configuration to the OkHttpClient.Builder which will be used by the object
 returned by RestServiceProvider#createRestService(Class, CustomNetworkConfig).",void
zendesk.core.CustomNetworkConfig,"Abstract class for customising network configuration, to be used by Zendesk SDKs in conjunction
 with RestServiceProvider#createRestService(Class, CustomNetworkConfig).
 
 It provides a way to add custom configuration to the OkHttpClient and Retrofit
 objects used to power a generated Retrofit service API class, through implementing the
 configuration methods. Both are empty by default.
 
 This class should not be used directly by integrators.",configureRetrofit(Retrofit.Builder builder),"Add custom configuration to the Retrofit.Builder which will be used by the object
 returned by RestServiceProvider#createRestService(Class, CustomNetworkConfig).",void
zendesk.support.EndUserComment,"EndUserComment object is used to model the difference the API for updating a Request has with
 fetching a list of Comments for a given request.
 
 Note: This should only be used for the creation of comments.",getAttachments(),Gets the attachments for this comment.,java.util.List<java.lang.String>
zendesk.support.EndUserComment,"EndUserComment object is used to model the difference the API for updating a Request has with
 fetching a list of Comments for a given request.
 
 Note: This should only be used for the creation of comments.",setAttachments(java.util.List<java.lang.String> attachments),Sets the attachments for this comment,void
zendesk.support.EndUserComment,"EndUserComment object is used to model the difference the API for updating a Request has with
 fetching a list of Comments for a given request.
 
 Note: This should only be used for the creation of comments.",setValue(java.lang.String value),"Sets the value of this comment, e.g.",void
zendesk.support.FlatArticle,"This is a model class for a FlatArticle object which contains an Article object, its relevant
 Section object and its relevant Category object for ease of use. It will be created by
 the HelpCenterProvider.
 
 Created by Zendesk.",compareTo(FlatArticle flatArticle),N/A,N/A
zendesk.support.FlatArticle,"This is a model class for a FlatArticle object which contains an Article object, its relevant
 Section object and its relevant Category object for ease of use. It will be created by
 the HelpCenterProvider.
 
 Created by Zendesk.",getArticle(),The article object which this flat article is wrapping,Article
zendesk.support.FlatArticle,"This is a model class for a FlatArticle object which contains an Article object, its relevant
 Section object and its relevant Category object for ease of use. It will be created by
 the HelpCenterProvider.
 
 Created by Zendesk.",getCategory(),Gets the category which this article belongs to,Category
zendesk.support.FlatArticle,"This is a model class for a FlatArticle object which contains an Article object, its relevant
 Section object and its relevant Category object for ease of use. It will be created by
 the HelpCenterProvider.
 
 Created by Zendesk.",getSection(),Gets the section which this article belongs to,Section
zendesk.support.FlatArticle,"This is a model class for a FlatArticle object which contains an Article object, its relevant
 Section object and its relevant Category object for ease of use. It will be created by
 the HelpCenterProvider.
 
 Created by Zendesk.",toString(),N/A,N/A
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",announceContentLoaded(),"Announce that the content has loaded, for accessibility purposes.",void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",builder(),Create a new builder for HelpCenterActivity.,static HelpCenterUiConfig.Builder
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",clearSearchResults(),Clears any currently shown search results from the view.,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",dismissError(),Dismiss the error Snackbar if it is currently displayed.,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",exitActivity(),Exits the activity immediately,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",getContext(),Gets the View's context.,Context
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",hideLoadingState(),Hides the loading state,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",isShowingHelp(),"Tells whether the view is currently showing the Help Center, or Search results.",boolean
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",onCreate(Bundle savedInstanceState),N/A,N/A
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",onCreateOptionsMenu(Menu menu),N/A,N/A
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",onOptionsItemSelected(MenuItem item),N/A,N/A
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",onPause(),N/A,N/A
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",onPrepareOptionsMenu(Menu menu),N/A,N/A
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",onResume(),N/A,N/A
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",onStart(),N/A,N/A
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",setSearchEnabled(boolean enabled),Set the enabled state of the search menuitem,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",showContactUsButton(),Shows the contact us button as a FAB,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",showContactZendesk(),Shows the contact Zendesk component,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",showHelp(HelpCenterUiConfig helpCenterUiConfig),Shows Help for the given SDK UI configuration.,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ","showLoadArticleErrorWithRetry(zendesk.support.guide.HelpCenterMvp.ErrorType errorType,
                             RetryAction action)",Shows a snackbar with an error message and a retry action,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",showLoadingState(),Shows a loading state,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",showNoConnectionError(),Shows a Snackbar with an error message,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ",showRequestList(),Shows the list of requests that the user has created,void
zendesk.support.guide.HelpCenterActivity,"This Activity is the main entry point for showing Help Center content in the SDK.
 
 This Activity is designed to be started with the HelpCenterActivity.builder()
 ","showSearchResults(java.util.List<SearchArticle> searchArticles,
                 java.lang.String query)",Shows Help search results for the given query text,void
zendesk.support.HelpCenterAttachment,"This is a model class for an HelpCenterAttachment object that will be created by the
 HelpCenterProvider.",getArticleId(),Gets the ID of the Article that the attachment is associated with,java.lang.Long
zendesk.support.HelpCenterAttachment,"This is a model class for an HelpCenterAttachment object that will be created by the
 HelpCenterProvider.",getContentType(),Gets the content type of the attachment.,java.lang.String
zendesk.support.HelpCenterAttachment,"This is a model class for an HelpCenterAttachment object that will be created by the
 HelpCenterProvider.",getContentUrl(),Gets the URL which can be used to download the attachment,java.lang.String
zendesk.support.HelpCenterAttachment,"This is a model class for an HelpCenterAttachment object that will be created by the
 HelpCenterProvider.",getCreatedAt(),Gets the date that the attachment was created at,java.util.Date
zendesk.support.HelpCenterAttachment,"This is a model class for an HelpCenterAttachment object that will be created by the
 HelpCenterProvider.",getFileName(),Gets the filename of the attachment,java.lang.String
zendesk.support.HelpCenterAttachment,"This is a model class for an HelpCenterAttachment object that will be created by the
 HelpCenterProvider.",getId(),Gets the ID of the attachment,java.lang.Long
zendesk.support.HelpCenterAttachment,"This is a model class for an HelpCenterAttachment object that will be created by the
 HelpCenterProvider.",getSize(),Gets the size of the attachment in bytes,java.lang.Long
zendesk.support.HelpCenterAttachment,"This is a model class for an HelpCenterAttachment object that will be created by the
 HelpCenterProvider.",getUpdatedAt(),Gets the date that the attachment was updated at,java.util.Date
zendesk.support.HelpCenterAttachment,"This is a model class for an HelpCenterAttachment object that will be created by the
 HelpCenterProvider.",getUrl(),Gets the API URL of the attachment,java.lang.String
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","deleteVote(java.lang.Long voteId,
          <any> callback)",This method will delete a vote with the given ID,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","downvoteArticle(java.lang.Long articleId,
               <any> callback)",This method marks as article as unhelpful,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","getArticle(java.lang.Long articleId,
          <any> callback)",This method returns a single article from a Help Center instance based on the articleId provided,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","getArticles(java.lang.Long sectionId,
           <any> callback)",Fetch a list of articles for a given sectionId from a Help Center instance,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","getArticles(java.lang.Long sectionId,
           java.lang.String labelNames,
           <any> callback)",Fetch a list of articles for a given sectionId from a Help Center instance,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","getAttachments(java.lang.Long articleId,
              AttachmentType attachmentType,
              <any> callback)",This method returns a list of attachments for a single article.,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ",getCategories(<any> callback),Fetch a list of categories from a Help Center instance.,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","getCategory(java.lang.Long categoryId,
           <any> callback)",This method searches your Help Center instance for a category that matches the specified category ID.,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","getHelp(HelpRequest request,
       <any> callback)",Gets a list of help items representing a flattened Help Center structure.,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","getSection(java.lang.Long sectionId,
          <any> callback)",This method searches your Help Center instance for a section that matches the specified section ID.,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","getSections(java.lang.Long categoryId,
           <any> callback)",Fetch a list of sections for a given categoryId from a Help Center instance,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","getSuggestedArticles(SuggestedArticleSearch suggestedArticleSearch,
                    <any> callback)",This method returns a list of suggested articles.,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","listArticles(ListArticleQuery query,
            <any> callback)",Lists articles that match the parameters in the query.,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","listArticlesFlat(ListArticleQuery query,
                <any> callback)","This method returns a list of flatArticles which are objects containing an article, section and category
 all relevant to each other from a Help Center instance.",void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","searchArticles(HelpCenterSearch search,
              <any> callback)",This method searches your Help Center instance for articles that match the specified parameters,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","submitRecordArticleView(Article article,
                       java.util.Locale locale,
                       <any> callback)",This method submits a record article view that is used for reporting.,void
zendesk.support.HelpCenterProvider,"
 A provider which will offer a higher level of abstraction compared to the HelpCenterService.
 
 You can create an instance of HelpCenterProvider like this:

       import zendesk.support.HelpCenterProvider;
      import zendesk.support.Support;
      ...
      HelpCenterProvider provider = Support.INSTANCE.provider().helpCenterProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 categories, sections, votes, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list the Categories in your Help Center like this:

    provider.getCategories(new ZendeskCallback <List&lt;Category>>() {
        @Override
       public void onSuccess(List<Category> categories) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 ","upvoteArticle(java.lang.Long articleId,
             <any> callback)",This method marks as article as helpful,void
zendesk.support.HelpCenterSearch,"This class encapsulates the parameters for searching Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#searchArticles(HelpCenterSearch, ZendeskCallback) method
 ",getCategoryIds(),Returns the category IDs to specify,java.lang.String
zendesk.support.HelpCenterSearch,"This class encapsulates the parameters for searching Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#searchArticles(HelpCenterSearch, ZendeskCallback) method
 ",getInclude(),Returns the includes to specify.,java.lang.String
zendesk.support.HelpCenterSearch,"This class encapsulates the parameters for searching Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#searchArticles(HelpCenterSearch, ZendeskCallback) method
 ",getLabelNames(),Returns the label names to specify.,java.lang.String
zendesk.support.HelpCenterSearch,"This class encapsulates the parameters for searching Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#searchArticles(HelpCenterSearch, ZendeskCallback) method
 ",getLocale(),Returns the locale to search in,java.util.Locale
zendesk.support.HelpCenterSearch,"This class encapsulates the parameters for searching Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#searchArticles(HelpCenterSearch, ZendeskCallback) method
 ",getPage(),Returns the page to specify,java.lang.Integer
zendesk.support.HelpCenterSearch,"This class encapsulates the parameters for searching Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#searchArticles(HelpCenterSearch, ZendeskCallback) method
 ",getPerPage(),The amount of results per page to specify,java.lang.Integer
zendesk.support.HelpCenterSearch,"This class encapsulates the parameters for searching Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#searchArticles(HelpCenterSearch, ZendeskCallback) method
 ",getQuery(),Returns the free-form text query,java.lang.String
zendesk.support.HelpCenterSearch,"This class encapsulates the parameters for searching Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#searchArticles(HelpCenterSearch, ZendeskCallback) method
 ",getSectionIds(),Returns the section IDs to specify,java.lang.String
zendesk.support.HelpCenterSearch,"This class encapsulates the parameters for searching Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#searchArticles(HelpCenterSearch, ZendeskCallback) method
 ",withQuery(java.lang.String query),Clones the current search and sets the query on it,HelpCenterSearch
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,build(),"Builds a HelpCenterSearch object with the
 specified parameters.",HelpCenterSearch
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,forLocale(java.util.Locale locale),Specifies the locale to perform the search in.,HelpCenterSearch.Builder
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,page(java.lang.Integer page),Specifies which page of results to request.,HelpCenterSearch.Builder
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,perPage(java.lang.Integer perPage),Specifies the number of results to display per page,HelpCenterSearch.Builder
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,withCategoryId(java.lang.Long categoryId),Specifies the category id to restrict the results to.,HelpCenterSearch.Builder
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,withCategoryIds(java.util.List<java.lang.Long> categoryIds),Specifies the category IDs to restrict the results to.,HelpCenterSearch.Builder
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,withIncludes(java.lang.String... includes),Specifies the includes to be returned by the search.,HelpCenterSearch.Builder
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,withLabelNames(java.lang.String... labelNames),Specifies the label names to restrict the results to.,HelpCenterSearch.Builder
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,withQuery(java.lang.String query),Specifies the free-form query to perform.,HelpCenterSearch.Builder
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,withSectionId(java.lang.Long sectionId),Specifies the section id to restrict the results to.,HelpCenterSearch.Builder
zendesk.support.HelpCenterSearch.Builder,This is a builder class which is used to generate a HelpCenterSearch,withSectionIds(java.util.List<java.lang.Long> sectionIds),Specifies the section IDs to restrict the results to.,HelpCenterSearch.Builder
zendesk.support.HelpCenterSettings,"Models the Help Center settings which will be used by the SupportActivity. These settings
 are populated by downloading your applications' settings.",getLocale(),Gets the locale that we should request Help Center content in by default.,java.lang.String
zendesk.support.guide.HelpCenterUiConfig,"Data class, that represents the initial configuration of HelpCenterActivity. Use the
 HelpCenterUiConfig.Builder to create an instance.",getCategoryIds(),N/A,N/A
zendesk.support.guide.HelpCenterUiConfig,"Data class, that represents the initial configuration of HelpCenterActivity. Use the
 HelpCenterUiConfig.Builder to create an instance.",getLabelNames(),N/A,N/A
zendesk.support.guide.HelpCenterUiConfig,"Data class, that represents the initial configuration of HelpCenterActivity. Use the
 HelpCenterUiConfig.Builder to create an instance.",getSectionIds(),N/A,N/A
zendesk.support.guide.HelpCenterUiConfig,"Data class, that represents the initial configuration of HelpCenterActivity. Use the
 HelpCenterUiConfig.Builder to create an instance.",getUiConfigs(),N/A,N/A
zendesk.support.guide.HelpCenterUiConfig,"Data class, that represents the initial configuration of HelpCenterActivity. Use the
 HelpCenterUiConfig.Builder to create an instance.",isCollapseCategories(),N/A,N/A
zendesk.support.guide.HelpCenterUiConfig,"Data class, that represents the initial configuration of HelpCenterActivity. Use the
 HelpCenterUiConfig.Builder to create an instance.",isContactUsButtonVisible(),N/A,N/A
zendesk.support.guide.HelpCenterUiConfig,"Data class, that represents the initial configuration of HelpCenterActivity. Use the
 HelpCenterUiConfig.Builder to create an instance.",isDeflectionEnabled(),N/A,N/A
zendesk.support.guide.HelpCenterUiConfig,"Data class, that represents the initial configuration of HelpCenterActivity. Use the
 HelpCenterUiConfig.Builder to create an instance.",isShowConversationsMenuButton(),N/A,N/A
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",config(),Create a UiConfig for the passed in configuration options.,UiConfig
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ","intent(Context context,
      java.util.List<UiConfig> uiConfigs)","Creates an Intent for the HelpCenterActivity with the specified configuration
 options.",Intent
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ","intent(Context context,
      UiConfig... uiConfigs)","Creates an Intent for the HelpCenterActivity with the specified configuration
 options.",Intent
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ","show(Context context,
    java.util.List<UiConfig> uiConfigs)",Starts the HelpCenterActivity.,void
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ","show(Context context,
    UiConfig... uiConfigs)",Starts the HelpCenterActivity.,void
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",withArticlesForCategoryIds(java.util.List<java.lang.Long> categoryIds),Specifies a startup configuration which will show articles for a given set of category IDs,HelpCenterUiConfig.Builder
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",withArticlesForCategoryIds(java.lang.Long... categoryIds),Specifies a startup configuration which will show articles for a given set of category IDs,HelpCenterUiConfig.Builder
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",withArticlesForSectionIds(java.util.List<java.lang.Long> sectionIds),Specifies a startup configuration which will show articles for a given set of section IDs,HelpCenterUiConfig.Builder
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",withArticlesForSectionIds(java.lang.Long... sectionIds),Specifies a startup configuration which will show articles for a given set of section IDs,HelpCenterUiConfig.Builder
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",withCategoriesCollapsed(boolean categoriesCollapsed),"Specifies whether or not to show all categories in the Help Center in their collapsed
 state when the content loads.",HelpCenterUiConfig.Builder
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",withContactUsButtonVisible(boolean showContactUsButton),"Define which screens the ""ContactUs"" Floating Action Button should be shown on.",HelpCenterUiConfig.Builder
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",withDeflectionEnabled(boolean deflectionEnabled),"Specifies whether a deflection mechanism should be shown (if one is present) when the contact us button
 is pressed.",HelpCenterUiConfig.Builder
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",withLabelNames(java.util.List<java.lang.String> labelNames),"Specifies a startup configuration which will restrict the shown articles to ones that
 match the provided label names.",HelpCenterUiConfig.Builder
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",withLabelNames(java.lang.String... labelNames),"Specifies a startup configuration which will restrict the shown articles to ones that
 match the provided label names.",HelpCenterUiConfig.Builder
zendesk.support.guide.HelpCenterUiConfig.Builder,"This builder is used to generate the startup configuration for the Activity. Note that
 only one of the following may be specified. If you specify both, then the last to be
 specified is used:

 
 withArticlesForCategoryIds
 withArticlesForSectionIds
 ",withShowConversationsMenuButton(boolean showConversationsMenuButton),"Client-side API to specify whether or not to show the conversations button in the Toolbar
 of the HelpCenterActivity.",HelpCenterUiConfig.Builder
zendesk.support.HelpItem,Model representing items in the HelpCenter UI.,getId(),Gets the ID of this item.,java.lang.Long
zendesk.support.HelpItem,Model representing items in the HelpCenter UI.,getName(),Gets the name of the item,java.lang.String
zendesk.support.HelpItem,Model representing items in the HelpCenter UI.,getParentId(),Returns the ID of the parent item.,java.lang.Long
zendesk.support.HelpItem,Model representing items in the HelpCenter UI.,getViewType(),Gets the type of the item,int
zendesk.support.HelpRequest,Models a request for a flattened view of Help Center,getArticlesPerPageLimit(),Gets the maximum number of articles per page,int
zendesk.support.HelpRequest,Models a request for a flattened view of Help Center,getCategoryIds(),Gets the category IDs as a CSV string,java.lang.String
zendesk.support.HelpRequest,Models a request for a flattened view of Help Center,getIncludes(),Gets the includes (side-loads) as a CSV string,java.lang.String
zendesk.support.HelpRequest,Models a request for a flattened view of Help Center,getLabelNames(),Gets the label names to which the search will be restricted.,java.lang.String[]
zendesk.support.HelpRequest,Models a request for a flattened view of Help Center,getSectionIds(),Gets the section IDs as a CSV string,java.lang.String
zendesk.support.HelpRequest.Builder,This builder is used to create a HelpRequest,build(),Builds the HelpRequest request,HelpRequest
zendesk.support.HelpRequest.Builder,This builder is used to create a HelpRequest,includeCategories(),Specifies that categories should be included as a side-load,HelpRequest.Builder
zendesk.support.HelpRequest.Builder,This builder is used to create a HelpRequest,includeSections(),Specifies that sections should be included as a side-load,HelpRequest.Builder
zendesk.support.HelpRequest.Builder,This builder is used to create a HelpRequest,withArticlesPerSectionLimit(int articlesPerSection),Specifies the maximum number of articles to request per section,HelpRequest.Builder
zendesk.support.HelpRequest.Builder,This builder is used to create a HelpRequest,withCategoryIds(java.util.List<java.lang.Long> ids),Specifies the category IDs to include in the request,HelpRequest.Builder
zendesk.support.HelpRequest.Builder,This builder is used to create a HelpRequest,withLabelNames(java.lang.String... labelNames),Specifies the label names to which the search will be restricted.,HelpRequest.Builder
zendesk.support.HelpRequest.Builder,This builder is used to create a HelpRequest,withSectionIds(java.util.List<java.lang.Long> ids),Specifies the section IDs to include in the request,HelpRequest.Builder
zendesk.core.Identity,"This is a marker interface for handling different identity types which are used to resolve
 end users within a Zendesk instance.",N/A,N/A,N/A
zendesk.core.JwtIdentity,This class models a JWT identity which is used to identify an End User within a Zendesk instance.,equals(java.lang.Object o),N/A,N/A
zendesk.core.JwtIdentity,This class models a JWT identity which is used to identify an End User within a Zendesk instance.,getJwtUserIdentifier(),Gets the JWT User Identifier,java.lang.String
zendesk.core.JwtIdentity,This class models a JWT identity which is used to identify an End User within a Zendesk instance.,hashCode(),N/A,N/A
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",getInclude(),Gets the includes for this query,java.lang.String
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",getLabelNames(),Gets the label names for this query as a CSV string,java.lang.String
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",getLocale(),Gets the locale for this query,java.util.Locale
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",getPage(),Gets the page for this query,java.lang.Integer
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",getResultsPerPage(),Gets the results per page for this query,java.lang.Integer
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",getSortBy(),Gets the sort method for this query,SortBy
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",getSortOrder(),Gets the sort order for this query,SortOrder
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",setInclude(java.lang.String include),Sets the includes for this query,void
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",setLabelNames(java.lang.String labelNames),Sets the label names to include in the query as a CSV string,void
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",setLocale(java.util.Locale locale),Sets the locale for this query,void
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",setPage(java.lang.Integer page),Specifies the page for this query,void
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",setResultsPerPage(java.lang.Integer resultsPerPage),Specifies the number of results per page for this query,void
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",setSortBy(SortBy sortBy),Sets the sort method for this query,void
zendesk.support.ListArticleQuery,"This class encapsulates the parameters for listing Articles in Help Center.
 
 This class is what is used when searching Help Center with a HelpCenterProvider,
 specifically with the HelpCenterProvider#listArticles(ListArticleQuery, ZendeskCallback) method
 ",setSortOrder(SortOrder sortOrder),Specifies the sort order for this query,void
zendesk.core.MemoryCache,"Cache for storing data at the application level to survive config changes,
 prevents pollution of the parcelable buffers when handing larger objects.
 
 Entries here might removed for any reason so don't use for passing objects
 required objects across components
 
 Implementations should have a max size to prevent runaway caching size.
 
 Should only be used for caching data objects, DON'T PUT BITMAPS HERE",clear(),N/A,N/A
zendesk.core.MemoryCache,"Cache for storing data at the application level to survive config changes,
 prevents pollution of the parcelable buffers when handing larger objects.
 
 Entries here might removed for any reason so don't use for passing objects
 required objects across components
 
 Implementations should have a max size to prevent runaway caching size.
 
 Should only be used for caching data objects, DON'T PUT BITMAPS HERE",contains(java.lang.String key),N/A,N/A
zendesk.core.MemoryCache,"Cache for storing data at the application level to survive config changes,
 prevents pollution of the parcelable buffers when handing larger objects.
 
 Entries here might removed for any reason so don't use for passing objects
 required objects across components
 
 Implementations should have a max size to prevent runaway caching size.
 
 Should only be used for caching data objects, DON'T PUT BITMAPS HERE",get(java.lang.String key),N/A,N/A
zendesk.core.MemoryCache,"Cache for storing data at the application level to survive config changes,
 prevents pollution of the parcelable buffers when handing larger objects.
 
 Entries here might removed for any reason so don't use for passing objects
 required objects across components
 
 Implementations should have a max size to prevent runaway caching size.
 
 Should only be used for caching data objects, DON'T PUT BITMAPS HERE","getOrDefault(java.lang.String key,
            T defaultData)",N/A,N/A
zendesk.core.MemoryCache,"Cache for storing data at the application level to survive config changes,
 prevents pollution of the parcelable buffers when handing larger objects.
 
 Entries here might removed for any reason so don't use for passing objects
 required objects across components
 
 Implementations should have a max size to prevent runaway caching size.
 
 Should only be used for caching data objects, DON'T PUT BITMAPS HERE","put(java.lang.String key,
   java.lang.Object data)",N/A,N/A
zendesk.core.MemoryCache,"Cache for storing data at the application level to survive config changes,
 prevents pollution of the parcelable buffers when handing larger objects.
 
 Entries here might removed for any reason so don't use for passing objects
 required objects across components
 
 Implementations should have a max size to prevent runaway caching size.
 
 Should only be used for caching data objects, DON'T PUT BITMAPS HERE",remove(java.lang.String key),N/A,N/A
zendesk.core.NetworkAware,Interface to indicate that an implementer is aware of changes to network state,onNetworkAvailable(),Called when network connectivity is available,void
zendesk.core.NetworkAware,Interface to indicate that an implementer is aware of changes to network state,onNetworkUnavailable(),Called when network connectivity is unavailable.,void
zendesk.core.NetworkInfoProvider,"A provider which will provide information about network connectivity.
 
 It must be registered (using the NetworkInfoProvider.register() method) to begin listening
 for network changes, and unregistering (using the NetworkInfoProvider.unregister() method)
 will stop it from receiving any more network changes.
 
 No changes will be received before the NetworkInfoProvider.register() method has been called,
 or after the NetworkInfoProvider.unregister() method has been called.
 
 It provides a simple synchronous method, isNetworkAvailable, which returns a boolean, as well as
 an interface for adding NetworkAware listeners to be notified when the network state
 changes.
 
 It also allows for adding RetryAction objects, which will be next time a network becomes
 available.","addNetworkAwareListener(java.lang.Integer id,
                       NetworkAware listener)","Add a NetworkAware listener object, which will receive updates to the network state
 via NetworkAware.onNetworkAvailable() and NetworkAware.onNetworkUnavailable()
 as long as the NetworkInfoProvider is currently in a registered state.",void
zendesk.core.NetworkInfoProvider,"A provider which will provide information about network connectivity.
 
 It must be registered (using the NetworkInfoProvider.register() method) to begin listening
 for network changes, and unregistering (using the NetworkInfoProvider.unregister() method)
 will stop it from receiving any more network changes.
 
 No changes will be received before the NetworkInfoProvider.register() method has been called,
 or after the NetworkInfoProvider.unregister() method has been called.
 
 It provides a simple synchronous method, isNetworkAvailable, which returns a boolean, as well as
 an interface for adding NetworkAware listeners to be notified when the network state
 changes.
 
 It also allows for adding RetryAction objects, which will be next time a network becomes
 available.","addRetryAction(java.lang.Integer id,
              RetryAction retryAction)","Add a RetryAction, whose RetryAction.onRetry() method will be called the next
 time the provider is notified with network availability.",void
zendesk.core.NetworkInfoProvider,"A provider which will provide information about network connectivity.
 
 It must be registered (using the NetworkInfoProvider.register() method) to begin listening
 for network changes, and unregistering (using the NetworkInfoProvider.unregister() method)
 will stop it from receiving any more network changes.
 
 No changes will be received before the NetworkInfoProvider.register() method has been called,
 or after the NetworkInfoProvider.unregister() method has been called.
 
 It provides a simple synchronous method, isNetworkAvailable, which returns a boolean, as well as
 an interface for adding NetworkAware listeners to be notified when the network state
 changes.
 
 It also allows for adding RetryAction objects, which will be next time a network becomes
 available.",clearNetworkAwareListeners(),Clear all added NetworkAware listener objects.,void
zendesk.core.NetworkInfoProvider,"A provider which will provide information about network connectivity.
 
 It must be registered (using the NetworkInfoProvider.register() method) to begin listening
 for network changes, and unregistering (using the NetworkInfoProvider.unregister() method)
 will stop it from receiving any more network changes.
 
 No changes will be received before the NetworkInfoProvider.register() method has been called,
 or after the NetworkInfoProvider.unregister() method has been called.
 
 It provides a simple synchronous method, isNetworkAvailable, which returns a boolean, as well as
 an interface for adding NetworkAware listeners to be notified when the network state
 changes.
 
 It also allows for adding RetryAction objects, which will be next time a network becomes
 available.",clearRetryActions(),Clear all added RetryAction objects.,void
zendesk.core.NetworkInfoProvider,"A provider which will provide information about network connectivity.
 
 It must be registered (using the NetworkInfoProvider.register() method) to begin listening
 for network changes, and unregistering (using the NetworkInfoProvider.unregister() method)
 will stop it from receiving any more network changes.
 
 No changes will be received before the NetworkInfoProvider.register() method has been called,
 or after the NetworkInfoProvider.unregister() method has been called.
 
 It provides a simple synchronous method, isNetworkAvailable, which returns a boolean, as well as
 an interface for adding NetworkAware listeners to be notified when the network state
 changes.
 
 It also allows for adding RetryAction objects, which will be next time a network becomes
 available.",isNetworkAvailable(),Returns whether or not the network is currently available.,boolean
zendesk.core.NetworkInfoProvider,"A provider which will provide information about network connectivity.
 
 It must be registered (using the NetworkInfoProvider.register() method) to begin listening
 for network changes, and unregistering (using the NetworkInfoProvider.unregister() method)
 will stop it from receiving any more network changes.
 
 No changes will be received before the NetworkInfoProvider.register() method has been called,
 or after the NetworkInfoProvider.unregister() method has been called.
 
 It provides a simple synchronous method, isNetworkAvailable, which returns a boolean, as well as
 an interface for adding NetworkAware listeners to be notified when the network state
 changes.
 
 It also allows for adding RetryAction objects, which will be next time a network becomes
 available.",register(),Begin listening for network change events.,void
zendesk.core.NetworkInfoProvider,"A provider which will provide information about network connectivity.
 
 It must be registered (using the NetworkInfoProvider.register() method) to begin listening
 for network changes, and unregistering (using the NetworkInfoProvider.unregister() method)
 will stop it from receiving any more network changes.
 
 No changes will be received before the NetworkInfoProvider.register() method has been called,
 or after the NetworkInfoProvider.unregister() method has been called.
 
 It provides a simple synchronous method, isNetworkAvailable, which returns a boolean, as well as
 an interface for adding NetworkAware listeners to be notified when the network state
 changes.
 
 It also allows for adding RetryAction objects, which will be next time a network becomes
 available.",removeNetworkAwareListener(java.lang.Integer id),"Remove a NetworkAware listener object so that it will no longer receive updates to
 network state.",void
zendesk.core.NetworkInfoProvider,"A provider which will provide information about network connectivity.
 
 It must be registered (using the NetworkInfoProvider.register() method) to begin listening
 for network changes, and unregistering (using the NetworkInfoProvider.unregister() method)
 will stop it from receiving any more network changes.
 
 No changes will be received before the NetworkInfoProvider.register() method has been called,
 or after the NetworkInfoProvider.unregister() method has been called.
 
 It provides a simple synchronous method, isNetworkAvailable, which returns a boolean, as well as
 an interface for adding NetworkAware listeners to be notified when the network state
 changes.
 
 It also allows for adding RetryAction objects, which will be next time a network becomes
 available.",removeRetryAction(java.lang.Integer id),"Remove a RetryAction so that it will not be invoked next time the provider is notified
 with network availability.",void
zendesk.core.NetworkInfoProvider,"A provider which will provide information about network connectivity.
 
 It must be registered (using the NetworkInfoProvider.register() method) to begin listening
 for network changes, and unregistering (using the NetworkInfoProvider.unregister() method)
 will stop it from receiving any more network changes.
 
 No changes will be received before the NetworkInfoProvider.register() method has been called,
 or after the NetworkInfoProvider.unregister() method has been called.
 
 It provides a simple synchronous method, isNetworkAvailable, which returns a boolean, as well as
 an interface for adding NetworkAware listeners to be notified when the network state
 changes.
 
 It also allows for adding RetryAction objects, which will be next time a network becomes
 available.",unregister(),Stop listening for network change events.,void
zendesk.support.Organization,"This is a model class for a Organization object that will be created by the
 RequestProvider as part of CommentsResponse.",getId(),Gets the ID of the organization,java.lang.Long
zendesk.support.Organization,"This is a model class for a Organization object that will be created by the
 RequestProvider as part of CommentsResponse.",getName(),Gets the name of the organization,java.lang.String
zendesk.core.PageView,"Model class for BlipsPageView used in BlipsProvider#sendBlip(BlipsGroup, PageView).",getChannel(),N/A,N/A
zendesk.core.PageView,"Model class for BlipsPageView used in BlipsProvider#sendBlip(BlipsGroup, PageView).",getNavigatorLanguage(),N/A,N/A
zendesk.core.PageView,"Model class for BlipsPageView used in BlipsProvider#sendBlip(BlipsGroup, PageView).",getPageTitle(),N/A,N/A
zendesk.core.PageView,"Model class for BlipsPageView used in BlipsProvider#sendBlip(BlipsGroup, PageView).",getUrl(),N/A,N/A
zendesk.core.PageView,"Model class for BlipsPageView used in BlipsProvider#sendBlip(BlipsGroup, PageView).",getValue(),N/A,N/A
zendesk.core.PageView,"Model class for BlipsPageView used in BlipsProvider#sendBlip(BlipsGroup, PageView).",getVersion(),N/A,N/A
zendesk.core.ProviderStore,Interface used to expose Providers through Zendesk.,pushRegistrationProvider(),Returns an implementation of PushRegistrationProvider,PushRegistrationProvider
zendesk.core.ProviderStore,Interface used to expose Providers through Zendesk.,userProvider(),Returns an implementation of UserProvider,UserProvider
zendesk.support.ProviderStore,Interface used to expose Providers through Support.,helpCenterProvider(),Returns an implementation of HelpCenterProvider,HelpCenterProvider
zendesk.support.ProviderStore,Interface used to expose Providers through Support.,requestProvider(),Returns an implementation of RequestProvider,RequestProvider
zendesk.support.ProviderStore,Interface used to expose Providers through Support.,uploadProvider(),Returns an implementation of UploadProvider,UploadProvider
zendesk.core.PushRegistrationProvider,"
 A provider which will offer a higher level of abstraction compared to the PushRegistrationService
 
 You can create an instance of PushRegistrationProvider like this:
 
       import zendesk.core.PushRegistrationProvider;
      import zendesk.core.Zendesk;
      ...
      PushRegistrationProvider provider = Zendesk.INSTANCE.provider().pushRegistrationProvider();
      ...
 
 
 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 the result of registering for and un-registering from push. The error callback will be called
 if there was some issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can register the device for push notifications like this:
 
    provider.registerWithDeviceIdentifier(""push-token"", Locale.getDefault(),  new
   ZendeskCallback<PushRegistrationResponse>() {
        @Override
       public void onSuccess(String pushRegistrationIdentifier) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ",isRegisteredForPush(),Returns whether or not the device is currently registered for push notifications.,boolean
zendesk.core.PushRegistrationProvider,"
 A provider which will offer a higher level of abstraction compared to the PushRegistrationService
 
 You can create an instance of PushRegistrationProvider like this:
 
       import zendesk.core.PushRegistrationProvider;
      import zendesk.core.Zendesk;
      ...
      PushRegistrationProvider provider = Zendesk.INSTANCE.provider().pushRegistrationProvider();
      ...
 
 
 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 the result of registering for and un-registering from push. The error callback will be called
 if there was some issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can register the device for push notifications like this:
 
    provider.registerWithDeviceIdentifier(""push-token"", Locale.getDefault(),  new
   ZendeskCallback<PushRegistrationResponse>() {
        @Override
       public void onSuccess(String pushRegistrationIdentifier) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ","registerWithDeviceIdentifier(java.lang.String identifier,
                            <any> callback)",Calls a push registration service to register a given identifier to receive push notifications.,void
zendesk.core.PushRegistrationProvider,"
 A provider which will offer a higher level of abstraction compared to the PushRegistrationService
 
 You can create an instance of PushRegistrationProvider like this:
 
       import zendesk.core.PushRegistrationProvider;
      import zendesk.core.Zendesk;
      ...
      PushRegistrationProvider provider = Zendesk.INSTANCE.provider().pushRegistrationProvider();
      ...
 
 
 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 the result of registering for and un-registering from push. The error callback will be called
 if there was some issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can register the device for push notifications like this:
 
    provider.registerWithDeviceIdentifier(""push-token"", Locale.getDefault(),  new
   ZendeskCallback<PushRegistrationResponse>() {
        @Override
       public void onSuccess(String pushRegistrationIdentifier) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ","registerWithUAChannelId(java.lang.String urbanAirshipChannelId,
                       <any> callback)",Calls a push registration service to register a given Urban Airship channel id to receive push notifications.,void
zendesk.core.PushRegistrationProvider,"
 A provider which will offer a higher level of abstraction compared to the PushRegistrationService
 
 You can create an instance of PushRegistrationProvider like this:
 
       import zendesk.core.PushRegistrationProvider;
      import zendesk.core.Zendesk;
      ...
      PushRegistrationProvider provider = Zendesk.INSTANCE.provider().pushRegistrationProvider();
      ...
 
 
 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 the result of registering for and un-registering from push. The error callback will be called
 if there was some issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can register the device for push notifications like this:
 
    provider.registerWithDeviceIdentifier(""push-token"", Locale.getDefault(),  new
   ZendeskCallback<PushRegistrationResponse>() {
        @Override
       public void onSuccess(String pushRegistrationIdentifier) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ",unregisterDevice(<any> callback),Calls a push registration service to unregister a device to receive push notifications.,void
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getCollaboratorIds(),Gets the IDs of all of the users who are collaborators on the Request,java.util.List<java.lang.Long>
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getCommentCount(),Gets the number of comments on the Request,java.lang.Integer
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getCreatedAt(),Gets the date that the Request was created at,java.util.Date
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getCustomFields(),Gets the custom fields on the Request,java.util.List<CustomField>
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getDescription(),Gets the description of the Request,java.lang.String
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getDueAt(),Gets the date that the Request is due at,java.util.Date
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getFirstComment(),Gets the first comment from the Request.,Comment
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getId(),Gets the ID of the Request,java.lang.String
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getLastComment(),Gets the last comment from the Request.,Comment
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getLastCommentingAgents(),Gets the last 5 commenting agents.,java.util.List<User>
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getOrganizationId(),Gets the ID of the Organization that the Request is associated with,java.lang.Long
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getPriority(),Gets the priority of the Request,java.lang.String
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getPublicUpdatedAt(),Gets the date that the Request was publicly updated at,java.util.Date
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getRequesterId(),Gets the ID of the user who requested the Request,java.lang.Long
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getStatus(),Gets the status of the Request,RequestStatus
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getSubject(),Gets the subject of the Request,java.lang.String
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getType(),Gets the type of the Request,java.lang.String
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getUpdatedAt(),Gets the date that the Request was updated at,java.util.Date
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",getUrl(),Gets the API URL of the Request,java.lang.String
zendesk.support.Request,"This is a model class for a Request object that will be created by the
 RequestProvider.",setComment(EndUserComment comment),Sets the comment for the Request.,void
zendesk.support.request.RequestActivity,"This Activity is the main entry point for showing and creating requests.
 
 This Activity is designed to be started with the RequestActivity.builder()
 ",builder(),Create a new builder for RequestActivity.,static RequestUiConfig.Builder
zendesk.support.request.RequestActivity,"This Activity is the main entry point for showing and creating requests.
 
 This Activity is designed to be started with the RequestActivity.builder()
 ",onBackPressed(),N/A,N/A
zendesk.support.request.RequestActivity,"This Activity is the main entry point for showing and creating requests.
 
 This Activity is designed to be started with the RequestActivity.builder()
 ",onCreate(Bundle savedInstanceState),N/A,N/A
zendesk.support.request.RequestActivity,"This Activity is the main entry point for showing and creating requests.
 
 This Activity is designed to be started with the RequestActivity.builder()
 ",onCreateOptionsMenu(Menu menu),N/A,N/A
zendesk.support.request.RequestActivity,"This Activity is the main entry point for showing and creating requests.
 
 This Activity is designed to be started with the RequestActivity.builder()
 ",onOptionsItemSelected(MenuItem item),N/A,N/A
zendesk.support.request.RequestActivity,"This Activity is the main entry point for showing and creating requests.
 
 This Activity is designed to be started with the RequestActivity.builder()
 ",onPause(),N/A,N/A
zendesk.support.request.RequestActivity,"This Activity is the main entry point for showing and creating requests.
 
 This Activity is designed to be started with the RequestActivity.builder()
 ",onResume(),N/A,N/A
zendesk.support.request.RequestActivity,"This Activity is the main entry point for showing and creating requests.
 
 This Activity is designed to be started with the RequestActivity.builder()
 ",onSaveInstanceState(Bundle outState),N/A,N/A
zendesk.support.requestlist.RequestInfo.AgentInfo,N/A,equals(java.lang.Object o),N/A,N/A
zendesk.support.requestlist.RequestInfo.AgentInfo,N/A,hashCode(),N/A,N/A
zendesk.support.requestlist.RequestInfo.MessageInfo,N/A,equals(java.lang.Object o),N/A,N/A
zendesk.support.requestlist.RequestInfo.MessageInfo,N/A,hashCode(),N/A,N/A
zendesk.support.requestlist.RequestInfoDataSource,N/A,load(<any> callback),N/A,N/A
zendesk.support.requestlist.RequestInfoDataSource.Disk,N/A,load(<any> callback),N/A,N/A
zendesk.support.requestlist.RequestInfoDataSource.LocalDataSource,N/A,"insert(RequestInfo requestInfo,
      <any> callback)",N/A,N/A
zendesk.support.requestlist.RequestInfoDataSource.LocalDataSource,N/A,load(<any> callback),N/A,N/A
zendesk.support.requestlist.RequestInfoDataSource.LocalDataSource,N/A,"remove(java.lang.String id,
      <any> callback)",N/A,N/A
zendesk.support.requestlist.RequestInfoDataSource.Network,N/A,load(<any> callback),N/A,N/A
zendesk.support.requestlist.RequestInfoDataSource.RemoteDataSource,N/A,load(<any> callback),N/A,N/A
zendesk.support.requestlist.RequestInfoDataSource.Repository,N/A,load(<any> callback),N/A,N/A
zendesk.support.requestlist.RequestListActivity,"This Activity is for showing a list of an end-user's requests
 
 This Activity is designed to be started with the RequestListActivity.builder()
 ",builder(),Create a new builder for RequestListActivity.,static RequestListUiConfig.Builder
zendesk.support.requestlist.RequestListActivity,"This Activity is for showing a list of an end-user's requests
 
 This Activity is designed to be started with the RequestListActivity.builder()
 ",onCreate(Bundle savedInstanceState),N/A,N/A
zendesk.support.requestlist.RequestListActivity,"This Activity is for showing a list of an end-user's requests
 
 This Activity is designed to be started with the RequestListActivity.builder()
 ",onDestroy(),N/A,N/A
zendesk.support.requestlist.RequestListActivity,"This Activity is for showing a list of an end-user's requests
 
 This Activity is designed to be started with the RequestListActivity.builder()
 ",onPause(),N/A,N/A
zendesk.support.requestlist.RequestListActivity,"This Activity is for showing a list of an end-user's requests
 
 This Activity is designed to be started with the RequestListActivity.builder()
 ",onResume(),N/A,N/A
zendesk.support.requestlist.RequestListActivity,"This Activity is for showing a list of an end-user's requests
 
 This Activity is designed to be started with the RequestListActivity.builder()
 ",onStart(),N/A,N/A
zendesk.support.requestlist.RequestListActivity,"This Activity is for showing a list of an end-user's requests
 
 This Activity is designed to be started with the RequestListActivity.builder()
 ",onStop(),N/A,N/A
zendesk.support.requestlist.RequestListActivity,"This Activity is for showing a list of an end-user's requests
 
 This Activity is designed to be started with the RequestListActivity.builder()
 ","refresh(Context context,
       ActionHandlerRegistry actionHandlerRegistry)",Refresh this screen,static void
zendesk.support.requestlist.RequestListUiConfig,"Data class, that represents the initial configuration of RequestListActivity. Use the
 RequestListUiConfig.Builder to create an instance.",getUiConfigs(),N/A,N/A
zendesk.support.requestlist.RequestListUiConfig.Builder,N/A,config(),Create a UiConfig for the passed in configuration options.,UiConfig
zendesk.support.requestlist.RequestListUiConfig.Builder,N/A,"intent(Context context,
      java.util.List<UiConfig> uiConfigs)","Create an Intent to start the RequestListActivity with the specified
 configuration options.",Intent
zendesk.support.requestlist.RequestListUiConfig.Builder,N/A,"intent(Context context,
      UiConfig... uiConfigs)","Create an Intent to start the RequestListActivity with the specified
 configuration options.",Intent
zendesk.support.requestlist.RequestListUiConfig.Builder,N/A,"show(Context context,
    java.util.List<UiConfig> uiConfigs)","Show the RequestListActivity with the specified
 configuration options.",void
zendesk.support.requestlist.RequestListUiConfig.Builder,N/A,"show(Context context,
    UiConfig... uiConfigs)","Show the RequestListActivity with the specified
 configuration options.",void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ","addComment(java.lang.String requestId,
          EndUserComment endUserComment,
          <any> callback)",Add a EndUserComment to a request.,void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ","createRequest(CreateRequest request,
             <any> callback)",Calls a request service to create a request on behalf of the end-user.,void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ",getAllRequests(<any> callback),Gets all requests that user has opened.,void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ","getComments(java.lang.String requestId,
           <any> callback)",Gets all comments for a request.,void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ","getCommentsSince(java.lang.String requestId,
                java.util.Date since,
                boolean onlyAgent,
                <any> callback)",Gets comments for a request since a specified point in time.,void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ","getRequest(java.lang.String requestId,
          <any> callback)",Calls a request service to get a request for the given request id.,void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ","getRequests(java.lang.String status,
           <any> callback)",Filters requests that user has opened by a status.,void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ","getTicketFormsById(java.util.List<java.lang.Long> ids,
                  <any> callback)",Get all available ticket forms.,void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ",getUpdatesForDevice(<any> callback),Gets the details of any updates to requests for this device.,void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ","markRequestAsRead(java.lang.String requestId,
                 int commentCount)",Marks a request as read on this device.,void
zendesk.support.RequestProvider,"
 A provider which will offer a higher level of abstraction compared to the RequestService
 
 You can create an instance of RequestProvider like this:

       import zendesk.support.RequestProvider;
      import zendesk.support.Support;
      ...
      RequestProvider provider = Support.INSTANCE.provider().requestProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting, like
 requests, comments, and so on. The error callback will be called if there was some
 issue with the method call and it will define details about the error in an
 ErrorResponse
 
 
 For example you can list all your requests like this:

    provider.getAllRequests(new ZendeskCallback <List&lt;Request>>() {
        @Override
       public void onSuccess(List<Request> requests) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
  });
 ",markRequestAsUnread(java.lang.String requestId),"Marks a request as unread on this device, by incrementing its total number of comments.",void
zendesk.support.RequestStatus,N/A,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static RequestStatus
zendesk.support.RequestStatus,N/A,values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static RequestStatus[]
zendesk.support.request.RequestUiConfig,"Data class, that represents the initial configuration of RequestActivity. Use the
 RequestUiConfig.Builder to create an instance.",getFiles(),N/A,N/A
zendesk.support.request.RequestUiConfig,"Data class, that represents the initial configuration of RequestActivity. Use the
 RequestUiConfig.Builder to create an instance.",getLocalRequestId(),N/A,N/A
zendesk.support.request.RequestUiConfig,"Data class, that represents the initial configuration of RequestActivity. Use the
 RequestUiConfig.Builder to create an instance.",getRequestId(),N/A,N/A
zendesk.support.request.RequestUiConfig,"Data class, that represents the initial configuration of RequestActivity. Use the
 RequestUiConfig.Builder to create an instance.",getRequestStatus(),N/A,N/A
zendesk.support.request.RequestUiConfig,"Data class, that represents the initial configuration of RequestActivity. Use the
 RequestUiConfig.Builder to create an instance.",getRequestSubject(),N/A,N/A
zendesk.support.request.RequestUiConfig,"Data class, that represents the initial configuration of RequestActivity. Use the
 RequestUiConfig.Builder to create an instance.",getTags(),N/A,N/A
zendesk.support.request.RequestUiConfig,"Data class, that represents the initial configuration of RequestActivity. Use the
 RequestUiConfig.Builder to create an instance.",getTicketForm(),N/A,N/A
zendesk.support.request.RequestUiConfig,"Data class, that represents the initial configuration of RequestActivity. Use the
 RequestUiConfig.Builder to create an instance.",getUiConfigs(),N/A,N/A
zendesk.support.request.RequestUiConfig.Builder,N/A,config(),Create a UiConfig for the passed in configuration options.,UiConfig
zendesk.support.request.RequestUiConfig.Builder,N/A,"deepLinkIntent(Context context,
              Intent... backStackActivities)","Creates and returns an Intent for starting a DeepLinkingBroadcastReceiver,
 for deep-linking to a RequestActivity.",Intent
zendesk.support.request.RequestUiConfig.Builder,N/A,"deepLinkIntent(Context context,
              java.util.List<UiConfig> uiConfigs,
              Intent... backStackActivities)","Creates and returns an Intent for starting a DeepLinkingBroadcastReceiver,
 for deep-linking to a RequestActivity.",Intent
zendesk.support.request.RequestUiConfig.Builder,N/A,"intent(Context context,
      java.util.List<UiConfig> uiConfigs)","Create an Intent to start the RequestActivity with the specified
 configuration options.",Intent
zendesk.support.request.RequestUiConfig.Builder,N/A,"intent(Context context,
      UiConfig... uiConfigs)","Create an Intent to start the RequestActivity with the specified
 configuration options.",Intent
zendesk.support.request.RequestUiConfig.Builder,N/A,"show(Context context,
    java.util.List<UiConfig> uiConfigs)",Display RequestActivity to the user.,void
zendesk.support.request.RequestUiConfig.Builder,N/A,"show(Context context,
    UiConfig... uiConfigs)",Display RequestActivity to the user.,void
zendesk.support.request.RequestUiConfig.Builder,N/A,withCustomFields(java.util.List<CustomField> customFields),Attach a custom field form to the request.,RequestUiConfig.Builder
zendesk.support.request.RequestUiConfig.Builder,N/A,withFiles(java.io.File... files),"Specify File objects to be selected as an attachment to any requests
 created using this RequestUiConfig.",RequestUiConfig.Builder
zendesk.support.request.RequestUiConfig.Builder,N/A,withFiles(java.util.List<java.io.File> files),"Specify a list of File objects to be selected as attachments to any requests
 created using this RequestUiConfig.",RequestUiConfig.Builder
zendesk.support.request.RequestUiConfig.Builder,N/A,withRequest(Request request),Show an existing request.,RequestUiConfig.Builder
zendesk.support.request.RequestUiConfig.Builder,N/A,withRequestId(java.lang.String id),Show an existing request.,RequestUiConfig.Builder
zendesk.support.request.RequestUiConfig.Builder,N/A,withRequestInfo(RequestInfo requestInfo),N/A,N/A
zendesk.support.request.RequestUiConfig.Builder,N/A,withRequestSubject(java.lang.String requestSubject),Attach request subject to the created request,RequestUiConfig.Builder
zendesk.support.request.RequestUiConfig.Builder,N/A,withTags(java.util.List<java.lang.String> tags),Attach tags to the created request.,RequestUiConfig.Builder
zendesk.support.request.RequestUiConfig.Builder,N/A,withTags(java.lang.String... tags),Attach tags to the created request.,RequestUiConfig.Builder
zendesk.support.request.RequestUiConfig.Builder,N/A,"withTicketForm(long ticketFormId,
              java.util.List<CustomField> customFields)",Attach a ticket form to the request.,RequestUiConfig.Builder
zendesk.support.RequestUpdates,N/A,getRequestUpdates(),N/A,N/A
zendesk.support.RequestUpdates,N/A,hasUpdatedRequests(),N/A,N/A
zendesk.support.RequestUpdates,N/A,isRequestUnread(java.lang.String requestId),N/A,N/A
zendesk.support.RequestUpdates,N/A,totalUpdates(),N/A,N/A
zendesk.support.ResponseWrapper,Wrapper class to encapsulate a generic response received from Zendesk service.,getCount(),Gets the count of the resources in this response,java.lang.Integer
zendesk.support.ResponseWrapper,Wrapper class to encapsulate a generic response received from Zendesk service.,getNextPage(),Gets the API URL of the next page,java.lang.String
zendesk.support.ResponseWrapper,Wrapper class to encapsulate a generic response received from Zendesk service.,getPreviousPage(),Gets the API URL of the previous page,java.lang.String
zendesk.core.RestServiceProvider,"A Provider which is used to create RestApis for sub-SDKs. This is used internally by the Zendesk
 SDKs and should not be used directly by integrators.","createRestService(java.lang.Class<E> clazz,
                 java.lang.String sdkVersion,
                 java.lang.String sdkVariant)",Create a RestApi from the provided class.,<E> E
zendesk.core.RestServiceProvider,"A Provider which is used to create RestApis for sub-SDKs. This is used internally by the Zendesk
 SDKs and should not be used directly by integrators.","createRestService(java.lang.Class<E> clazz,
                 java.lang.String sdkVersion,
                 java.lang.String sdkVariant,
                 CustomNetworkConfig customNetworkConfig)","Create a RestApi from the provided class, with a configuration class for
 custom network needs.",<E> E
zendesk.core.RestServiceProvider,"A Provider which is used to create RestApis for sub-SDKs. This is used internally by the Zendesk
 SDKs and should not be used directly by integrators.",getCoreOkHttpClient(),Gets an OkHttpClient that's not doing zendesk auth and is not caching responses.,OkHttpClient
zendesk.core.RestServiceProvider,"A Provider which is used to create RestApis for sub-SDKs. This is used internally by the Zendesk
 SDKs and should not be used directly by integrators.",getMediaOkHttpClient(),Gets an OkHttpClient that's doing zendesk auth and is heavily caching responses.,OkHttpClient
zendesk.core.RetryAction,RetryAction specifies behavior of things that can be retried,onRetry(),Called when actions should be retried,void
zendesk.support.SearchArticle,"This class will wrap a Article.
 
 This wrapper class will add Category and Section information to an Article.
 
 
 This class is not intended to be used directly in serialisation and deserialisation so it
 uses the m prefix for fields.
 ",getArticle(),Gets the wrapped Article object.,Article
zendesk.support.SearchArticle,"This class will wrap a Article.
 
 This wrapper class will add Category and Section information to an Article.
 
 
 This class is not intended to be used directly in serialisation and deserialisation so it
 uses the m prefix for fields.
 ",getCategory(),Gets the category that this article belongs in.,Category
zendesk.support.SearchArticle,"This class will wrap a Article.
 
 This wrapper class will add Category and Section information to an Article.
 
 
 This class is not intended to be used directly in serialisation and deserialisation so it
 uses the m prefix for fields.
 ",getSection(),Gets the section that this article belongs in.,Section
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getArticlesCount(),Gets the number of articles in this section,int
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getCategoryId(),Gets the id of the Category that this section belongs to,java.lang.Long
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getCreatedAt(),Gets the date that the section was created at,java.util.Date
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getDescription(),Gets the description of the section,java.lang.String
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getHtmlUrl(),"Gets the html URL of the section, which can be used to open the section in a web browser",java.lang.String
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getId(),Gets the ID of the section,java.lang.Long
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getLocale(),"Gets the locale of the section in the form of ll-CC, e.g.",java.lang.String
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getName(),Gets the name of the section,java.lang.String
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getPosition(),Gets the sorting position of the section.,int
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getSorting(),"Gets the sorting of the section, e.g.",java.lang.String
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getSourceLocale(),"Gets the source locale of the section in the form of ll-CC, e.g.",java.lang.String
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getUpdatedAt(),Gets the date that the section was updated at,java.util.Date
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,getUrl(),Gets the API URL of the section,java.lang.String
zendesk.support.Section,This is a model class for a Section object that will be created by the HelpCenterProvider.,isOutdated(),Checks whether the section is outdated or not,boolean
zendesk.support.SectionItem,A HelpItem for Help Center sections,addArticle(ArticleItem articleItem),N/A,N/A
zendesk.support.SectionItem,A HelpItem for Help Center sections,equals(java.lang.Object o),N/A,N/A
zendesk.support.SectionItem,A HelpItem for Help Center sections,getChildren(),N/A,N/A
zendesk.support.SectionItem,A HelpItem for Help Center sections,getId(),Gets the ID of this item.,java.lang.Long
zendesk.support.SectionItem,A HelpItem for Help Center sections,getName(),Gets the name of the item,java.lang.String
zendesk.support.SectionItem,A HelpItem for Help Center sections,getParentId(),Returns the ID of the parent item.,java.lang.Long
zendesk.support.SectionItem,A HelpItem for Help Center sections,getTotalArticlesCount(),Gets the number of articles in this SectionItem,int
zendesk.support.SectionItem,A HelpItem for Help Center sections,getViewType(),Gets the type of the item,int
zendesk.support.SectionItem,A HelpItem for Help Center sections,hashCode(),N/A,N/A
zendesk.support.SeeAllArticlesItem,A HelpItem for a 'See all articles' item,equals(java.lang.Object o),N/A,N/A
zendesk.support.SeeAllArticlesItem,A HelpItem for a 'See all articles' item,getId(),Gets the ID of this item.,java.lang.Long
zendesk.support.SeeAllArticlesItem,A HelpItem for a 'See all articles' item,getName(),Gets the name of the item,java.lang.String
zendesk.support.SeeAllArticlesItem,A HelpItem for a 'See all articles' item,getParentId(),Returns the ID of the parent item.,java.lang.Long
zendesk.support.SeeAllArticlesItem,A HelpItem for a 'See all articles' item,getSection(),Gets the SectionItem related to this SeeAllArticlesItem,SectionItem
zendesk.support.SeeAllArticlesItem,A HelpItem for a 'See all articles' item,getViewType(),Gets the type of the item,int
zendesk.support.SeeAllArticlesItem,A HelpItem for a 'See all articles' item,hashCode(),N/A,N/A
zendesk.support.SeeAllArticlesItem,A HelpItem for a 'See all articles' item,isLoading(),N/A,N/A
zendesk.support.SeeAllArticlesItem,A HelpItem for a 'See all articles' item,setLoading(boolean loading),N/A,N/A
zendesk.core.SessionStorage,"Class holding storage that is tied to a user. Likely to be cleared after an user logs out or
 the identity changes.",clear(),Clear all session related data.,void
zendesk.core.SessionStorage,"Class holding storage that is tied to a user. Likely to be cleared after an user logs out or
 the identity changes.",getAdditionalSdkStorage(),Gets a reference to additional sdk storage,BaseStorage
zendesk.core.SessionStorage,"Class holding storage that is tied to a user. Likely to be cleared after an user logs out or
 the identity changes.",getZendeskCacheDir(),Gets the absolute path to Core SDK specific cache directory.,java.io.File
zendesk.core.SessionStorage,"Class holding storage that is tied to a user. Likely to be cleared after an user logs out or
 the identity changes.",getZendeskDataDir(),Gets the absolute path to Core SDK specific data directory.,java.io.File
zendesk.core.Settings,Marker interface for SDK-specific Settings objects.,N/A,N/A,N/A
zendesk.core.SettingsPack,"Object for holding core settings and SDK specific settings. Returned by
 SettingsProvider#getSettingsForSdk(String, Class, ZendeskCallback)",getCoreSettings(),Gets core settings,CoreSettings
zendesk.core.SettingsPack,"Object for holding core settings and SDK specific settings. Returned by
 SettingsProvider#getSettingsForSdk(String, Class, ZendeskCallback)",getSettings(),Gets settings of the specified type.,E
zendesk.core.SettingsProvider,"
 A provider which will offer a higher level of abstraction compared to the SdkSettingsService
 
 This provider is used internally by the SDK and does not need to be called explicitly. If you do
 need to call it, create an instance of SettingsProvider like this:

       import zendesk.core.SettingsProvider;
      import zendesk.core.Zendesk;
      ...
      SettingsProvider provider = Zendesk.INSTANCE.provider().sdkSettingsProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting. The
 error callback will be called if there was some issue with the method call and it will define
 details about the error in an com.zendesk.service.ErrorResponse
 
 
 For example you can get the SDK Settings like this:

    provider.getCoreSettings(new ZendeskCallback <CoreSettings>() {
        @Override
       public void onSuccess(CoreSettings settings) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 
 
 When you request SDK settings in this way the settings will be saved to the device also.",getCoreSettings(<any> callback),Retrieves core settings from storage if they are valid or network if they are not.,void
zendesk.core.SettingsProvider,"
 A provider which will offer a higher level of abstraction compared to the SdkSettingsService
 
 This provider is used internally by the SDK and does not need to be called explicitly. If you do
 need to call it, create an instance of SettingsProvider like this:

       import zendesk.core.SettingsProvider;
      import zendesk.core.Zendesk;
      ...
      SettingsProvider provider = Zendesk.INSTANCE.provider().sdkSettingsProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting. The
 error callback will be called if there was some issue with the method call and it will define
 details about the error in an com.zendesk.service.ErrorResponse
 
 
 For example you can get the SDK Settings like this:

    provider.getCoreSettings(new ZendeskCallback <CoreSettings>() {
        @Override
       public void onSuccess(CoreSettings settings) {
           // Handle the success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle the error
       }
   });
 
 
 When you request SDK settings in this way the settings will be saved to the device also.","getSettingsForSdk(java.lang.String key,
                 java.lang.Class<E> sdkSettingsClass,
                 <any> callback)",Retrieves SDK-specific settings and Core settings in a SettingsPack object.,<E extends Settings>void
zendesk.support.SimpleArticle,"This is a model class for an simplified Article object that will be created by the
 HelpCenterProvider#getSuggestedArticles(SuggestedArticleSearch, ZendeskCallback).",getId(),Get the id of an article.,java.lang.Long
zendesk.support.SimpleArticle,"This is a model class for an simplified Article object that will be created by the
 HelpCenterProvider#getSuggestedArticles(SuggestedArticleSearch, ZendeskCallback).",getTitle(),Get the title of an article.,java.lang.String
zendesk.support.SortBy,This enum models the sorting types available in Help Center,getApiValue(),Gets the value used by the API.,java.lang.String
zendesk.support.SortBy,This enum models the sorting types available in Help Center,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static SortBy
zendesk.support.SortBy,This enum models the sorting types available in Help Center,values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static SortBy[]
zendesk.support.SortOrder,This enum models the sorting types available in Help Center,getApiValue(),This returns the value to use in an API call for this enum,java.lang.String
zendesk.support.SortOrder,This enum models the sorting types available in Help Center,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static SortOrder
zendesk.support.SortOrder,This enum models the sorting types available in Help Center,values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static SortOrder[]
zendesk.support.Streams.Use,Function for working with Closeable types,use(P closable),N/A,N/A
zendesk.support.SuggestedArticleResponse,"Wrapper class to encapsulate a list SimpleArticle
 received from HelpCenterProvider#getSuggestedArticles(SuggestedArticleSearch, ZendeskCallback)",getResults(),Get a list of suggested articles.,java.util.List<SimpleArticle>
zendesk.support.SuggestedArticleSearch,This class models a search for suggested articles,getCategoryId(),Returns the category ID to specify,java.lang.Long
zendesk.support.SuggestedArticleSearch,This class models a search for suggested articles,getLabelNames(),Returns the label names to specify.,java.lang.String
zendesk.support.SuggestedArticleSearch,This class models a search for suggested articles,getLocale(),Returns the locale to search in.,java.util.Locale
zendesk.support.SuggestedArticleSearch,This class models a search for suggested articles,getQuery(),Returns the free-form text query.,java.lang.String
zendesk.support.SuggestedArticleSearch,This class models a search for suggested articles,getSectionId(),Returns the section ID to specify,java.lang.Long
zendesk.support.SuggestedArticleSearch.Builder,This is a builder class which is used to generate a SuggestedArticleSearch,build(),"Builds a HelpCenterSearch object with the
 specified parameters.",SuggestedArticleSearch
zendesk.support.SuggestedArticleSearch.Builder,This is a builder class which is used to generate a SuggestedArticleSearch,forLocale(java.util.Locale locale),Specifies the locale to perform the search in.,SuggestedArticleSearch.Builder
zendesk.support.SuggestedArticleSearch.Builder,This is a builder class which is used to generate a SuggestedArticleSearch,withCategoryId(java.lang.Long categoryId),Specifies the category id to restrict the results to.,SuggestedArticleSearch.Builder
zendesk.support.SuggestedArticleSearch.Builder,This is a builder class which is used to generate a SuggestedArticleSearch,withLabelNames(java.lang.String... labelNames),Specifies the label names to restrict the results to.,SuggestedArticleSearch.Builder
zendesk.support.SuggestedArticleSearch.Builder,This is a builder class which is used to generate a SuggestedArticleSearch,withQuery(java.lang.String query),Specifies the free-form query to perform.,SuggestedArticleSearch.Builder
zendesk.support.SuggestedArticleSearch.Builder,This is a builder class which is used to generate a SuggestedArticleSearch,withSectionId(java.lang.Long sectionId),Specifies the section id to restrict the results to.,SuggestedArticleSearch.Builder
zendesk.support.Support,"Configuration class for Zendesk initialization. Call this first to configure Zendesk to use the
 correct credentials and Zendesk URL.",getHelpCenterLocaleOverride(),"Returns the override, if any, for the locale to be used in Help Center requests.",java.util.Locale
zendesk.support.Support,"Configuration class for Zendesk initialization. Call this first to configure Zendesk to use the
 correct credentials and Zendesk URL.",init(Zendesk zendesk),Initialises the Zendesk SDK,void
zendesk.support.Support,"Configuration class for Zendesk initialization. Call this first to configure Zendesk to use the
 correct credentials and Zendesk URL.",isInitialized(),Gets whether Support.init(Zendesk) was called or not.,boolean
zendesk.support.Support,"Configuration class for Zendesk initialization. Call this first to configure Zendesk to use the
 correct credentials and Zendesk URL.",provider(),"Gets a ProviderStore for accessing all available
 SDK Providers.",ProviderStore
zendesk.support.Support,"Configuration class for Zendesk initialization. Call this first to configure Zendesk to use the
 correct credentials and Zendesk URL.","refreshRequest(java.lang.String requestId,
              Context context)","Refreshes the Support SDK RequestActivity if it is currently being displayed (after
 Activity#onResume() but before Activity#onPause()) for the given request ID,
 or the RequestListActivity if it has not been destroyed (ie, by Activity#onDestroy().",boolean
zendesk.support.Support,"Configuration class for Zendesk initialization. Call this first to configure Zendesk to use the
 correct credentials and Zendesk URL.",setHelpCenterLocaleOverride(java.util.Locale locale),Set a locale override for Help Center content.,void
zendesk.support.Support,"Configuration class for Zendesk initialization. Call this first to configure Zendesk to use the
 correct credentials and Zendesk URL.",valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static Support
zendesk.support.Support,"Configuration class for Zendesk initialization. Call this first to configure Zendesk to use the
 correct credentials and Zendesk URL.",values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static Support[]
zendesk.support.SupportBlipsProvider,"A Provider for tracking user actions and page views.
 
 This is used internally by the Support SDK and should not be called directly by an integrator.",articleView(Article article),Tracks a view of a Help Center article as a PageView blip.,void
zendesk.support.SupportBlipsProvider,"A Provider for tracking user actions and page views.
 
 This is used internally by the Support SDK and should not be called directly by an integrator.","articleVote(java.lang.Long articleId,
           int vote)",Tracks a vote on a Help Center article as a UserAction blip.,void
zendesk.support.SupportBlipsProvider,"A Provider for tracking user actions and page views.
 
 This is used internally by the Support SDK and should not be called directly by an integrator.",helpCenterSearch(java.lang.String query),Tracks a Help Center search as a UserAction blip.,void
zendesk.support.SupportBlipsProvider,"A Provider for tracking user actions and page views.
 
 This is used internally by the Support SDK and should not be called directly by an integrator.",requestCreated(java.lang.String requestId),Tracks creation of a Support request as a UserAction blip.,void
zendesk.support.SupportBlipsProvider,"A Provider for tracking user actions and page views.
 
 This is used internally by the Support SDK and should not be called directly by an integrator.",requestListViewed(),Tracks a user's viewing of the request list as a UserAction blip.,void
zendesk.support.SupportBlipsProvider,"A Provider for tracking user actions and page views.
 
 This is used internally by the Support SDK and should not be called directly by an integrator.",requestUpdated(java.lang.String requestId),Tracks a user's update of a Support request as a UserAction blip.,void
zendesk.support.SupportBlipsProvider,"A Provider for tracking user actions and page views.
 
 This is used internally by the Support SDK and should not be called directly by an integrator.",requestViewed(java.lang.String requestId),Tracks a user's viewing of a Support request as a UserAction blip.,void
zendesk.support.SupportBlipsProvider,"A Provider for tracking user actions and page views.
 
 This is used internally by the Support SDK and should not be called directly by an integrator.",supportSdkInit(),Tracks a Support SDK initialisation event as a UserAction blip.,void
N/A,N/A,N/A,N/A,N/A
zendesk.support.SupportModule,Module holding references to internal dependencies.,getId(),N/A,N/A
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",getAuthenticationType(),N/A,N/A
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",getContactZendeskTags(),Gets the tags to use for the ContactZendesk components.,java.util.List<java.lang.String>
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",getHelpCenterLocale(),Gets the default locale of the help center,java.lang.String
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",getMaxAttachmentSize(),Gets the maximum attachment size allowed in bytes,long
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",getReferrerUrl(),Gets the url that will be opened when referrer logo is clicked.,java.lang.String
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",getRequestSystemMessage(),Gets the system message that will be shown after the first message was successfully sent.,java.lang.String
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",hasHelpCenterSettings(),Checks if we have Help Center settings or not.,boolean
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",isAttachmentsEnabled(),Checks if attachments are enabled or not,boolean
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",isConversationsEnabled(),Checks if conversations are enabled or not,boolean
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",isHelpCenterArticleVotingEnabled(),Checks if help center voting is enabled or not.,boolean
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",isHelpCenterEnabled(),Checks if help center is enabled or not.,boolean
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",isNeverAskForEmailEnabled(),Checks if the SDK is allowed to ask the end-user for an email address if needed,boolean
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",isShowClosedRequests(),Checks if the SDK is allowed to show closed requests in the RequestListView.,boolean
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",isShowReferrerLogoEnabled(),"Checks if the SDK is allowed to display a referrer logo inside the RequestListView
 and RequestViewConversationsDisabled.",boolean
zendesk.support.SupportSdkSettings,"Wraps SupportSettings and makes settings call null-safe.
 
 This class will generally default to false or 0 for return values if they don't exist.
 
 
 Created by Zendesk on 28/07/15.",isTicketFormSupportAvailable(),"Gets if TicketForm support is available, or not.",boolean
zendesk.support.SupportSettingsProvider,This provider is used internally by the SDK and does not need to be called explicitly.,getSettings(<any> callback),Retrieves the SupportSettings wrapped in a SupportSdkSettings object.,void
zendesk.support.TicketField,Model class for ticket field.,getDescription(),Gets the description of the ticket field.,java.lang.String
zendesk.support.TicketField,Model class for ticket field.,getId(),Gets the ID of the ticket field.,long
zendesk.support.TicketField,Model class for ticket field.,getRegexpForValidation(),Gets a regular expression for validation.,java.lang.String
zendesk.support.TicketField,Model class for ticket field.,getTicketFieldOptions(),"Ticket field options, this field will only be populated for TicketFieldType.Tagger field types",java.util.List<TicketFieldOption>
zendesk.support.TicketField,Model class for ticket field.,getTicketFieldSystemOptions(),"Ticket field system options, this field will only be populated for TicketFieldType.Priority field types",java.util.List<TicketFieldSystemOption>
zendesk.support.TicketField,Model class for ticket field.,getTitle(),Gets the title of the ticket field.,java.lang.String
zendesk.support.TicketField,Model class for ticket field.,getTitleInPortal(),Gets title of the ticket field for end user,java.lang.String
zendesk.support.TicketField,Model class for ticket field.,getType(),Gets the type of the ticket field.,TicketFieldType
zendesk.support.TicketFieldOption,Model class for ticket field option.,getId(),Gets the ID of the ticket field option.,long
zendesk.support.TicketFieldOption,Model class for ticket field option.,getName(),Gets the name of the ticket field option.,java.lang.String
zendesk.support.TicketFieldOption,Model class for ticket field option.,getValue(),Gets the value of the ticket field option.,java.lang.String
zendesk.support.TicketFieldOption,Model class for ticket field option.,isDefault(),Gets if the field is the default value.,boolean
zendesk.support.TicketFieldSystemOption,Model class for ticket field system option.,getName(),Gets the name of the ticket field system option.,java.lang.String
zendesk.support.TicketFieldSystemOption,Model class for ticket field system option.,getValue(),Gets the value of the ticket field system option.,java.lang.String
zendesk.support.TicketFieldType,All supported ticket field types.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static TicketFieldType
zendesk.support.TicketFieldType,All supported ticket field types.,values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static TicketFieldType[]
zendesk.support.TicketForm,Model class for ticket forms.,getId(),Gets the ID of the ticket form.,long
zendesk.support.TicketForm,Model class for ticket forms.,getName(),Gets the name of the ticket form.,java.lang.String
zendesk.support.TicketForm,Model class for ticket forms.,getTicketFields(),Gets a list of associated TicketField.,java.util.List<TicketField>
zendesk.support.TicketFormSettings,Models the TicketForm settings.,isAvailable(),Determines whether TicketForms are available or not.,boolean
zendesk.support.UiUtils.ScreenSize,N/A,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static UiUtils.ScreenSize
zendesk.support.UiUtils.ScreenSize,N/A,values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static UiUtils.ScreenSize[]
zendesk.support.UploadProvider,"
 A provider which will offer a higher level of abstraction compared to the UploadService
 
 You can create an instance of UploadProvider like this:

       import zendesk.support.UploadProvider;
      import zendesk.support.Support;
      ...
      UploadProvider provider = Support.INSTANCE.provider().uploadProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting. The error
 callback will be called if there was some issue with the method call and it will define details
 about the error in an ErrorResponse
 
 
 For example you can upload a file like this:
    File fileToUpload = new File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), ""picture.png"");

   provider.uploadAttachment(""screenshot.png"", fileToUpload, ""image/png"",  new
   ZendeskCallback<UploadResponse>() {
        @Override
       public void onSuccess(UploadResponse uploadResponse) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
   });
 ","deleteAttachment(java.lang.String token,
                <any> callback)",Calls a upload service to delete an upload on behalf of the end-user.,void
zendesk.support.UploadProvider,"
 A provider which will offer a higher level of abstraction compared to the UploadService
 
 You can create an instance of UploadProvider like this:

       import zendesk.support.UploadProvider;
      import zendesk.support.Support;
      ...
      UploadProvider provider = Support.INSTANCE.provider().uploadProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting. The error
 callback will be called if there was some issue with the method call and it will define details
 about the error in an ErrorResponse
 
 
 For example you can upload a file like this:
    File fileToUpload = new File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), ""picture.png"");

   provider.uploadAttachment(""screenshot.png"", fileToUpload, ""image/png"",  new
   ZendeskCallback<UploadResponse>() {
        @Override
       public void onSuccess(UploadResponse uploadResponse) {
           // Handle success
       }

        @Override
       public void onError(ErrorResponse errorResponse) {
           // Handle error
       }
   });
 ","uploadAttachment(java.lang.String fileName,
                java.io.File file,
                java.lang.String mimeType,
                <any> callback)",Calls a upload service to upload a file on behalf of the end-user.,void
zendesk.support.UploadResponse,"This is a class model for a response for an uploaded attachment. This object will be returned by
 UploadProvider",getAttachment(),Get a Attachment as a response of an uploaded file,Attachment
zendesk.support.UploadResponse,"This is a class model for a response for an uploaded attachment. This object will be returned by
 UploadProvider",getExpiresAt(),Gets the date that the token expires at,java.util.Date
zendesk.support.UploadResponse,"This is a class model for a response for an uploaded attachment. This object will be returned by
 UploadProvider",getToken(),Gets the token associated with the uploaded file.,java.lang.String
zendesk.core.User,This is a model class for a User,getId(),Get the id of the user.,java.lang.Long
zendesk.core.User,This is a model class for a User,getName(),Get the name of the user.,java.lang.String
zendesk.core.User,This is a model class for a User,getPhoto(),Get the URL for the avatar of the user.,java.lang.String
zendesk.core.User,This is a model class for a User,getTags(),Gets the list of tags associated with the user,java.util.List<java.lang.String>
zendesk.core.User,This is a model class for a User,getUserFields(),"Get a map of user fields, associated with the user.","java.util.Map<java.lang.String,java.lang.String>"
zendesk.core.User,This is a model class for a User,isAgent(),Is the user an agent.,boolean
zendesk.support.User,"This is a model class for a user that will be created by the
 RequestProvider as part of CommentsResponse.",equals(java.lang.Object o),N/A,N/A
zendesk.support.User,"This is a model class for a user that will be created by the
 RequestProvider as part of CommentsResponse.",getId(),Get the id of the user.,java.lang.Long
zendesk.support.User,"This is a model class for a user that will be created by the
 RequestProvider as part of CommentsResponse.",getName(),Get the name of the user.,java.lang.String
zendesk.support.User,"This is a model class for a user that will be created by the
 RequestProvider as part of CommentsResponse.",getOrganizationId(),Get the organization id of the user.,java.lang.Long
zendesk.support.User,"This is a model class for a user that will be created by the
 RequestProvider as part of CommentsResponse.",getPhoto(),Get avatar of the user.,Attachment
zendesk.support.User,"This is a model class for a user that will be created by the
 RequestProvider as part of CommentsResponse.",getTags(),Gets the list of tags associated with the user,java.util.List<java.lang.String>
zendesk.support.User,"This is a model class for a user that will be created by the
 RequestProvider as part of CommentsResponse.",getUserFields(),"Get a map of user fields, associated with the user.","java.util.Map<java.lang.String,java.lang.String>"
zendesk.support.User,"This is a model class for a user that will be created by the
 RequestProvider as part of CommentsResponse.",hashCode(),N/A,N/A
zendesk.support.User,"This is a model class for a user that will be created by the
 RequestProvider as part of CommentsResponse.",isAgent(),Is the user an agent.,boolean
zendesk.core.UserAction,N/A,getAction(),N/A,N/A
zendesk.core.UserAction,N/A,getCategory(),N/A,N/A
zendesk.core.UserAction,N/A,getChannel(),N/A,N/A
zendesk.core.UserAction,N/A,getLabel(),N/A,N/A
zendesk.core.UserAction,N/A,getValue(),N/A,N/A
zendesk.core.UserAction,N/A,getVersion(),N/A,N/A
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getCreatedAt(),Gets the date that the user field was created at,java.util.Date
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getDescription(),Get the description of the user field.,java.lang.String
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getId(),Get the id of the user field.,java.lang.Long
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getKey(),Get the unique key of the user field.,java.lang.String
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getPosition(),Gets the position of the user field,java.lang.Long
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getRawDescription(),Get the raw description of the user field.,java.lang.String
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getRawTitle(),Gets the raw title of the user field,java.lang.String
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getRegexpForValidation(),Gets the regexp which is used to validate the user field,java.lang.String
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getTitle(),Get the title of the user field.,java.lang.String
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getUpdatedAt(),Gets the date that the user field was updated at,java.util.Date
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getUrl(),Gets the API URL of the user field,java.lang.String
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getUserFieldOptions(),Get a list of UserFieldOption.,java.util.List<UserFieldOption>
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",getUserFieldType(),Get the type of the user field.,UserField.UserFieldType
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",isActive(),Checks if the user field is active or not,boolean
zendesk.core.UserField,"This is a model class for a user field that will be created by the UserProvider as part
 of UserFieldResponse.",isSystem(),Checks if the user field is a system field or not,boolean
zendesk.core.UserField.UserFieldType,Enum for describing the type of a user field.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static UserField.UserFieldType
zendesk.core.UserField.UserFieldType,Enum for describing the type of a user field.,values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static UserField.UserFieldType[]
zendesk.core.UserFieldOption,"This is a model class for a user field option that will be created by the UserProvider as part
 of UserField.",getId(),Get the id of the user field option.,java.lang.Long
zendesk.core.UserFieldOption,"This is a model class for a user field option that will be created by the UserProvider as part
 of UserField.",getName(),Get the name of the user field option.,java.lang.String
zendesk.core.UserFieldOption,"This is a model class for a user field option that will be created by the UserProvider as part
 of UserField.",getRawName(),Gets the raw name of the user field option,java.lang.String
zendesk.core.UserFieldOption,"This is a model class for a user field option that will be created by the UserProvider as part
 of UserField.",getValue(),Get the value of the user field options.,java.lang.String
zendesk.core.UserProvider,"
 Setting tags and fields on a user are features. Your plan must support these features in order to
 work with them.
 

 
 A provider which will offer a higher level of abstraction compared to the UserService
 
 You can create an instance of UserProvider like this:

       import zendesk.core.UserProvider;
      import zendesk.core.Zendesk;
      ...
      UserProvider provider = Zendesk.INSTANCE.provider().userProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting. The error
 callback will be called if there was some issue with the method call and it will define details
 about the error in an ErrorResponse
 
 
 For example you can upload a file like this:
 
   provider.addTags(Arrays.asList(""tag"", ""foo"", ""bar""), new ZendeskCallback<User>() {
       @Override
      public void onSuccess(final User user) {
          // Handle success
      }

       @Override
      public void onError(final ErrorResponse errorResponse) {
          // Handle error
      }
   });

 ","addTags(java.util.List<java.lang.String> tags,
       <any> callback)",Calls a user service to add tags to a user on behalf of the end-user.,void
zendesk.core.UserProvider,"
 Setting tags and fields on a user are features. Your plan must support these features in order to
 work with them.
 

 
 A provider which will offer a higher level of abstraction compared to the UserService
 
 You can create an instance of UserProvider like this:

       import zendesk.core.UserProvider;
      import zendesk.core.Zendesk;
      ...
      UserProvider provider = Zendesk.INSTANCE.provider().userProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting. The error
 callback will be called if there was some issue with the method call and it will define details
 about the error in an ErrorResponse
 
 
 For example you can upload a file like this:
 
   provider.addTags(Arrays.asList(""tag"", ""foo"", ""bar""), new ZendeskCallback<User>() {
       @Override
      public void onSuccess(final User user) {
          // Handle success
      }

       @Override
      public void onError(final ErrorResponse errorResponse) {
          // Handle error
      }
   });

 ","deleteTags(java.util.List<java.lang.String> tags,
          <any> callback)",Calls a user service to remove tags from a user on behalf of the end-user.,void
zendesk.core.UserProvider,"
 Setting tags and fields on a user are features. Your plan must support these features in order to
 work with them.
 

 
 A provider which will offer a higher level of abstraction compared to the UserService
 
 You can create an instance of UserProvider like this:

       import zendesk.core.UserProvider;
      import zendesk.core.Zendesk;
      ...
      UserProvider provider = Zendesk.INSTANCE.provider().userProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting. The error
 callback will be called if there was some issue with the method call and it will define details
 about the error in an ErrorResponse
 
 
 For example you can upload a file like this:
 
   provider.addTags(Arrays.asList(""tag"", ""foo"", ""bar""), new ZendeskCallback<User>() {
       @Override
      public void onSuccess(final User user) {
          // Handle success
      }

       @Override
      public void onError(final ErrorResponse errorResponse) {
          // Handle error
      }
   });

 ",getUser(<any> callback),Calls a user service to get information about the current logged in user.,void
zendesk.core.UserProvider,"
 Setting tags and fields on a user are features. Your plan must support these features in order to
 work with them.
 

 
 A provider which will offer a higher level of abstraction compared to the UserService
 
 You can create an instance of UserProvider like this:

       import zendesk.core.UserProvider;
      import zendesk.core.Zendesk;
      ...
      UserProvider provider = Zendesk.INSTANCE.provider().userProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting. The error
 callback will be called if there was some issue with the method call and it will define details
 about the error in an ErrorResponse
 
 
 For example you can upload a file like this:
 
   provider.addTags(Arrays.asList(""tag"", ""foo"", ""bar""), new ZendeskCallback<User>() {
       @Override
      public void onSuccess(final User user) {
          // Handle success
      }

       @Override
      public void onError(final ErrorResponse errorResponse) {
          // Handle error
      }
   });

 ",getUserFields(<any> callback),Gets a list of user field definitions that are available in your account.,void
zendesk.core.UserProvider,"
 Setting tags and fields on a user are features. Your plan must support these features in order to
 work with them.
 

 
 A provider which will offer a higher level of abstraction compared to the UserService
 
 You can create an instance of UserProvider like this:

       import zendesk.core.UserProvider;
      import zendesk.core.Zendesk;
      ...
      UserProvider provider = Zendesk.INSTANCE.provider().userProvider();
      ...
 

 
 Once you have an instance of the provider you can call methods on it and handle the results
 in callbacks. A success callback will give you the resource(s) that you are requesting. The error
 callback will be called if there was some issue with the method call and it will define details
 about the error in an ErrorResponse
 
 
 For example you can upload a file like this:
 
   provider.addTags(Arrays.asList(""tag"", ""foo"", ""bar""), new ZendeskCallback<User>() {
       @Override
      public void onSuccess(final User user) {
          // Handle success
      }

       @Override
      public void onError(final ErrorResponse errorResponse) {
          // Handle error
      }
   });

 ","setUserFields(java.util.Map<java.lang.String,java.lang.String> userFields,
             <any> callback)",Sets the user fields for the current user.,void
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",builder(),Create a new builder for ViewArticleActivity.,static ArticleUiConfig.Builder
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",builder(Article article),Create a new builder for ViewArticleActivity.,static ArticleUiConfig.Builder
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",builder(long articleId),Create a new builder for ViewArticleActivity.,static ArticleUiConfig.Builder
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",onCreate(Bundle savedInstanceState),N/A,N/A
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",onDestroy(),N/A,N/A
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ","onItemClick(<any> parent,
           View view,
           int position,
           long id)",N/A,N/A
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",onOptionsItemSelected(MenuItem item),N/A,N/A
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",onStart(),N/A,N/A
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",onStop(),N/A,N/A
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",setLoadingState(zendesk.support.guide.ViewArticleActivity.LoadingState loadingState),Sets the loading state of this fragment.,protected void
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",showContactZendesk(),N/A,N/A
zendesk.support.guide.ViewArticleActivity,"Activity used to render a Help Center article
 
 The recommended method of creating the activity is by using the following
 
 ViewArticleActivity.builder(Article) or
 ViewArticleActivity.builder(long)
 
 methods.
 ",showLoadingErrorState(int snackbarText),N/A,N/A
zendesk.core.Zendesk,"Configuration class for Zendesk Core SDK initialization. Call this first to configure Zendesk
 to use the correct credentials and Zendesk URL.",getIdentity(),"Return the current Identity for the SDK, or null if none has been set.",Identity
zendesk.core.Zendesk,"Configuration class for Zendesk Core SDK initialization. Call this first to configure Zendesk
 to use the correct credentials and Zendesk URL.","init(Context context,
    java.lang.String zendeskUrl,
    java.lang.String applicationId,
    java.lang.String oauthClientId)",Initialises the Zendesk Core SDK with your Zendesk subdomain settings and an Identity.,void
zendesk.core.Zendesk,"Configuration class for Zendesk Core SDK initialization. Call this first to configure Zendesk
 to use the correct credentials and Zendesk URL.",isInitialized(),"Gets whether Zendesk.init(Context, String, String, String) was called with valid
 values or not.",boolean
zendesk.core.Zendesk,"Configuration class for Zendesk Core SDK initialization. Call this first to configure Zendesk
 to use the correct credentials and Zendesk URL.",provider(),"Gets a ProviderStore for accessing all available
 SDK Providers.",ProviderStore
zendesk.core.Zendesk,"Configuration class for Zendesk Core SDK initialization. Call this first to configure Zendesk
 to use the correct credentials and Zendesk URL.",setIdentity(Identity identity),Set the Identity for the SDK.,void
zendesk.core.Zendesk,"Configuration class for Zendesk Core SDK initialization. Call this first to configure Zendesk
 to use the correct credentials and Zendesk URL.",valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static Zendesk
zendesk.core.Zendesk,"Configuration class for Zendesk Core SDK initialization. Call this first to configure Zendesk
 to use the correct credentials and Zendesk URL.",values(),"Returns an array containing the constants of this enum type, in
the order they are declared.",static Zendesk[]
zendesk.core.ZendeskLocaleConverter,"This class is responsible for mapping between Java locales and the representations
 of locales that Help Center expects.
 
 There are two large classes of remappings that need to be done:

 
 Mapping of legacy Java locales (iw, in, ji) to their modern counterparts (he, id, yi)
 Mapping of locales in Help Center that are different to Java (nb -> no)
 
 
 
 Created by Zendesk on 12/05/2016.",toHelpCenterLocaleString(java.util.Locale locale),Converts the specified locale into a string version which Help Center expects.,java.lang.String
