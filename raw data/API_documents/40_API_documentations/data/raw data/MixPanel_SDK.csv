class_name,class_description,method,method_description,data_type
com.mixpanel.android.mpmetrics.AutomaticEvents,N/A,N/A,N/A,N/A
com.mixpanel.android.mpmetrics.ExceptionHandler,N/A,init(),N/A,static void
com.mixpanel.android.mpmetrics.ExceptionHandler,N/A,"uncaughtException​(java.lang.Thread t,
                 java.lang.Throwable e)",N/A,void
com.mixpanel.android.viewcrawler.GestureTracker,"Tracking ABTesting Gestures
 $ab_gesture1 = 4 times two finger tap when last tap is hold for 3 seconds
 $ab_gesture2 = 5 times two finger tap",N/A,N/A,N/A
com.mixpanel.android.mpmetrics.InAppButton,N/A,describeContents(),N/A,int
com.mixpanel.android.mpmetrics.InAppButton,N/A,getBackgroundColor(),N/A,int
com.mixpanel.android.mpmetrics.InAppButton,N/A,getBorderColor(),N/A,int
com.mixpanel.android.mpmetrics.InAppButton,N/A,getCtaUrl(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.InAppButton,N/A,getText(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.InAppButton,N/A,getTextColor(),N/A,int
com.mixpanel.android.mpmetrics.InAppButton,N/A,toString(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.InAppButton,N/A,"writeToParcel​(android.os.Parcel dest,
             int flags)",N/A,void
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",describeContents(),N/A,int
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getBackgroundColor(),N/A,int
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getBody(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getBodyColor(),N/A,int
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getExtras(),N/A,protected org.json.JSONObject
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getId(),N/A,int
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getImage(),N/A,android.graphics.Bitmap
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getImage2xUrl(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getImage4xUrl(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getImageUrl(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getMessageId(),N/A,int
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",getType(),N/A,abstract InAppNotification.Type
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",hasBody(),N/A,boolean
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",isEventTriggered(),N/A,boolean
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",matchesEventDescription​(com.mixpanel.android.mpmetrics.AnalyticsMessages.EventDescription eventDescription),N/A,boolean
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",toString(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.InAppNotification,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.","writeToParcel​(android.os.Parcel dest,
             int flags)",N/A,void
com.mixpanel.android.mpmetrics.InAppNotification.Type,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",valueOf​(java.lang.String name),"
Returns the enum constant of this type with the specified name.
",static InAppNotification.Type
com.mixpanel.android.mpmetrics.InAppNotification.Type,"InApp Notifications in Mixpanel are either TAKEOVERs, that display full screen,
 or MINI notifications that appear and disappear on the margins of the screen.",values(),"
Returns an array containing the constants of this enum type, in
the order they are declared.
",static InAppNotification.Type[]
com.mixpanel.android.mpmetrics.InstallReferrerReceiver,Deprecated.,"onReceive​(android.content.Context context,
         android.content.Intent intent)","
Deprecated.
 ",void
com.mixpanel.android.mpmetrics.MiniInAppNotification,"Represents a mini in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",getBorderColor(),N/A,int
com.mixpanel.android.mpmetrics.MiniInAppNotification,"Represents a mini in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",getCtaUrl(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.MiniInAppNotification,"Represents a mini in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",getImageTintColor(),N/A,int
com.mixpanel.android.mpmetrics.MiniInAppNotification,"Represents a mini in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",getType(),N/A,InAppNotification.Type
com.mixpanel.android.mpmetrics.MiniInAppNotification,"Represents a mini in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)","writeToParcel​(android.os.Parcel dest,
             int flags)",N/A,void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","addGroup​(java.lang.String groupKey,
        java.lang.Object groupID)","
Add a group to this user's membership for a particular group key
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","alias​(java.lang.String alias,
     java.lang.String original)","
This function creates a distinct_id alias from alias to original.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","booleanTweak​(java.lang.String tweakName,
            boolean defaultValue)","
Declare a boolean-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Boolean>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","byteTweak​(java.lang.String tweakName,
         byte defaultValue)","
Declare byte-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Byte>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",clearSuperProperties(),"
Erase all currently registered superProperties.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","doubleTweak​(java.lang.String tweakName,
           double defaultValue)","
Declare a double-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Double>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","doubleTweak​(java.lang.String tweakName,
           double defaultValue,
           double minimumValue,
           double maximumValue)","
Declare a double-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Double>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",eventElapsedTime​(java.lang.String eventName),"
Retrieves the time elapsed for the named event since timeEvent() was called.
",double
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","floatTweak​(java.lang.String tweakName,
          float defaultValue)","
Declare a float-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Float>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","floatTweak​(java.lang.String tweakName,
          float defaultValue,
          float minimumValue,
          float maximumValue)","
Declare a float-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Float>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",flush(),"
Push all queued Mixpanel events and People Analytics changes to Mixpanel servers.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",flushNoDecideCheck(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",getAnonymousId(),"
Returns the anonymoous id currently being used to uniquely identify the device and all
 with events sent using track(String, JSONObject) will have this id as a device
 id
",protected java.lang.String
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",getDeviceInfo(),"
Returns an unmodifiable map that contains the device description properties
 that will be sent to Mixpanel.
","java.util.Map<java.lang.String,​java.lang.String>"
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",getDistinctId(),"
Returns the string id currently being used to uniquely identify the user associated
 with events sent using track(String, JSONObject).
",java.lang.String
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","getGroup​(java.lang.String groupKey,
        java.lang.Object groupID)","
Returns a Mixpanel.Group object that can be used to set and increment
 Group Analytics properties.
",MixpanelAPI.Group
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","getInstance​(android.content.Context context,
           java.lang.String token)","
Get the instance of MixpanelAPI associated with your Mixpanel project token.
",static MixpanelAPI
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","getInstance​(android.content.Context context,
           java.lang.String token,
           boolean optOutTrackingDefault)","
Get the instance of MixpanelAPI associated with your Mixpanel project token.
",static MixpanelAPI
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","getInstance​(android.content.Context context,
           java.lang.String token,
           boolean optOutTrackingDefault,
           org.json.JSONObject superProperties)","
Get the instance of MixpanelAPI associated with your Mixpanel project token.
",static MixpanelAPI
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","getInstance​(android.content.Context context,
           java.lang.String token,
           org.json.JSONObject superProperties)","
Get the instance of MixpanelAPI associated with your Mixpanel project token.
",static MixpanelAPI
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",getPeople(),"
Returns a Mixpanel.People object that can be used to set and increment
 People Analytics properties.
",MixpanelAPI.People
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",getSuperProperties(),"
Returns a json object of the user's current super properties
",org.json.JSONObject
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",getUserId(),"
Returns the user id with which identify is called  and all the with events sent using
 track(String, JSONObject) will have this id as a user id
",protected java.lang.String
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",hasOptedOutTracking(),"
Will return true if the user has opted out from tracking.
",boolean
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",identify​(java.lang.String distinctId),"
Associate all future calls to track(String, JSONObject) with the user identified by
 the given distinct id.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","intTweak​(java.lang.String tweakName,
        int defaultValue)","
Declare an int-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Integer>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","intTweak​(java.lang.String tweakName,
        int defaultValue,
        int minimumValue,
        int maximumValue)","
Declare an int-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Integer>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",isAppInForeground(),"
Based on the application's event lifecycle this method will determine whether the app
 is running in the foreground or not.
",boolean
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","longTweak​(java.lang.String tweakName,
         long defaultValue)","
Declare a long-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Long>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","longTweak​(java.lang.String tweakName,
         long defaultValue,
         long minimumValue,
         long maximumValue)","
Declare a long-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Long>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",optInTracking(),"
Use this method to opt-in an already opted-out user from tracking.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",optInTracking​(java.lang.String distinctId),"
Use this method to opt-in an already opted-out user from tracking.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","optInTracking​(java.lang.String distinctId,
             org.json.JSONObject properties)","
Use this method to opt-in an already opted-out user from tracking.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",optOutTracking(),"
Use this method to opt-out a user from tracking.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",registerSuperProperties​(org.json.JSONObject superProperties),"
Register properties that will be sent with every subsequent call to track(String, JSONObject).
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","registerSuperPropertiesMap​(java.util.Map<java.lang.String,​java.lang.Object> superProperties)","
Register properties that will be sent with every subsequent call to track(String, JSONObject).
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",registerSuperPropertiesOnce​(org.json.JSONObject superProperties),"
Register super properties for events, only if no other super property with the
 same names has already been registered.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","registerSuperPropertiesOnceMap​(java.util.Map<java.lang.String,​java.lang.Object> superProperties)","
Register super properties for events, only if no other super property with the
 same names has already been registered.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","removeGroup​(java.lang.String groupKey,
           java.lang.Object groupID)","
Remove a group from this user's membership for a particular group key
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",reset(),"
Clears tweaks and all distinct_ids, superProperties, and push registrations from persistent storage.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","setGroup​(java.lang.String groupKey,
        java.lang.Object groupID)","
Set the group this user belongs to.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","setGroup​(java.lang.String groupKey,
        java.util.List<java.lang.Object> groupIDs)","
Set the groups this user belongs to.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","shortTweak​(java.lang.String tweakName,
          short defaultValue)","
Declare short-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.Short>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","stringTweak​(java.lang.String tweakName,
           java.lang.String defaultValue)","
Declare a string-valued tweak, and return a reference you can use to read the value of the tweak.
",static Tweak<java.lang.String>
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",timeEvent​(java.lang.String eventName),"
Begin timing of an event.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",track​(java.lang.String eventName),"
Equivalent to track(String, JSONObject) with a null argument for properties.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","track​(java.lang.String eventName,
     org.json.JSONObject properties)","
Track an event.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","track​(java.lang.String eventName,
     org.json.JSONObject properties,
     boolean isAutomaticEvent)",N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","trackMap​(java.lang.String eventName,
        java.util.Map<java.lang.String,​java.lang.Object> properties)","
Track an event.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com","trackWithGroups​(java.lang.String eventName,
               java.util.Map<java.lang.String,​java.lang.Object> properties,
               java.util.Map<java.lang.String,​java.lang.Object> groups)","
Track an event with specific groups.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",unregisterSuperProperty​(java.lang.String superPropertyName),"
Remove a single superProperty, so that it will not be sent with future calls to track(String, JSONObject).
",void
com.mixpanel.android.mpmetrics.MixpanelAPI,"Core class for interacting with Mixpanel Analytics.

 Call getInstance(Context, String) with
 your main application activity and your Mixpanel API token as arguments
 an to get an instance you can use to report how users are using your
 application.

 Once you have an instance, you can send events to Mixpanel
 using track(String, JSONObject), and update People Analytics
 records with getPeople()

 The Mixpanel library will periodically send information to
 Mixpanel servers, so your application will need to have
 android.permission.INTERNET. In addition, to preserve
 battery life, messages to Mixpanel servers may not be sent immediately
 when you call track(String)or MixpanelAPI.People.set(String, Object).
 The library will send messages periodically throughout the lifetime
 of your application, but you will need to call flush()
 before your application is completely shutdown to ensure all of your
 events are sent.

 A typical use-case for the library might look like this:

  
 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void whenSomethingInterestingHappens(int flavor) {
          JSONObject properties = new JSONObject();
          properties.put(""flavor"", flavor);
          mMixpanel.track(""Something Interesting Happened"", properties);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }
 
 

 In addition to this documentation, you may wish to take a look at
 the Mixpanel sample Android application.
 It demonstrates a variety of techniques, including
 updating People Analytics records with MixpanelAPI.People and others.

 There are also step-by-step getting started documents
 available at mixpanel.com",updateSuperProperties​(SuperPropertyUpdate update),"
Updates super properties in place.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.Group,"Core interface for using Mixpanel Group Analytics features.
 You can get an instance by calling MixpanelAPI.getGroup(String, Object)

 The Group object is used to update properties in a group's Group Analytics record.

 A typical use case for the Group object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void companyPlanTypeChanged(string company, String newPlan) {
          mMixpanel.getGroup(""Company"", company).set(""Plan Type"", newPlan);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",deleteGroup(),"
Permanently deletes this group's record from Group Analytics.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.Group,"Core interface for using Mixpanel Group Analytics features.
 You can get an instance by calling MixpanelAPI.getGroup(String, Object)

 The Group object is used to update properties in a group's Group Analytics record.

 A typical use case for the Group object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void companyPlanTypeChanged(string company, String newPlan) {
          mMixpanel.getGroup(""Company"", company).set(""Plan Type"", newPlan);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","remove​(java.lang.String name,
      java.lang.Object value)","
Remove value from a list-valued property only if it is already present in the list.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.Group,"Core interface for using Mixpanel Group Analytics features.
 You can get an instance by calling MixpanelAPI.getGroup(String, Object)

 The Group object is used to update properties in a group's Group Analytics record.

 A typical use case for the Group object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void companyPlanTypeChanged(string company, String newPlan) {
          mMixpanel.getGroup(""Company"", company).set(""Plan Type"", newPlan);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","set​(java.lang.String propertyName,
   java.lang.Object value)","
Sets a single property with the given name and value for this group.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.Group,"Core interface for using Mixpanel Group Analytics features.
 You can get an instance by calling MixpanelAPI.getGroup(String, Object)

 The Group object is used to update properties in a group's Group Analytics record.

 A typical use case for the Group object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void companyPlanTypeChanged(string company, String newPlan) {
          mMixpanel.getGroup(""Company"", company).set(""Plan Type"", newPlan);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",set​(org.json.JSONObject properties),"
Set a collection of properties on the identified group all at once.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.Group,"Core interface for using Mixpanel Group Analytics features.
 You can get an instance by calling MixpanelAPI.getGroup(String, Object)

 The Group object is used to update properties in a group's Group Analytics record.

 A typical use case for the Group object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void companyPlanTypeChanged(string company, String newPlan) {
          mMixpanel.getGroup(""Company"", company).set(""Plan Type"", newPlan);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","setMap​(java.util.Map<java.lang.String,​java.lang.Object> properties)","
Set a collection of properties on the identified group all at once.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.Group,"Core interface for using Mixpanel Group Analytics features.
 You can get an instance by calling MixpanelAPI.getGroup(String, Object)

 The Group object is used to update properties in a group's Group Analytics record.

 A typical use case for the Group object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void companyPlanTypeChanged(string company, String newPlan) {
          mMixpanel.getGroup(""Company"", company).set(""Plan Type"", newPlan);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","setOnce​(java.lang.String propertyName,
       java.lang.Object value)","
Works just like set(String, Object), except it will not overwrite existing property values.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.Group,"Core interface for using Mixpanel Group Analytics features.
 You can get an instance by calling MixpanelAPI.getGroup(String, Object)

 The Group object is used to update properties in a group's Group Analytics record.

 A typical use case for the Group object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void companyPlanTypeChanged(string company, String newPlan) {
          mMixpanel.getGroup(""Company"", company).set(""Plan Type"", newPlan);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",setOnce​(org.json.JSONObject properties),"
Like set(String, Object), but will not set properties that already exist on a record.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.Group,"Core interface for using Mixpanel Group Analytics features.
 You can get an instance by calling MixpanelAPI.getGroup(String, Object)

 The Group object is used to update properties in a group's Group Analytics record.

 A typical use case for the Group object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void companyPlanTypeChanged(string company, String newPlan) {
          mMixpanel.getGroup(""Company"", company).set(""Plan Type"", newPlan);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","setOnceMap​(java.util.Map<java.lang.String,​java.lang.Object> properties)","
Like set(String, Object), but will not set properties that already exist on a record.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.Group,"Core interface for using Mixpanel Group Analytics features.
 You can get an instance by calling MixpanelAPI.getGroup(String, Object)

 The Group object is used to update properties in a group's Group Analytics record.

 A typical use case for the Group object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void companyPlanTypeChanged(string company, String newPlan) {
          mMixpanel.getGroup(""Company"", company).set(""Plan Type"", newPlan);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","union​(java.lang.String name,
     org.json.JSONArray value)","
Adds values to a list-valued property only if they are not already present in the list.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.Group,"Core interface for using Mixpanel Group Analytics features.
 You can get an instance by calling MixpanelAPI.getGroup(String, Object)

 The Group object is used to update properties in a group's Group Analytics record.

 A typical use case for the Group object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          ...
      }

      public void companyPlanTypeChanged(string company, String newPlan) {
          mMixpanel.getGroup(""Company"", company).set(""Plan Type"", newPlan);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",unset​(java.lang.String name),"
Permanently removes the property with the given name from the group's profile
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",addOnMixpanelTweaksUpdatedListener​(OnMixpanelTweaksUpdatedListener listener),"
Sets the listener that will receive a callback when new Tweaks from Mixpanel are discovered.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",addOnMixpanelUpdatesReceivedListener​(OnMixpanelUpdatesReceivedListener listener),"
Adds a new listener that will receive a callback when new updates from Mixpanel
 (like in-app notifications or A/B test experiments) are discovered.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","append​(java.lang.String name,
      java.lang.Object value)","
Appends a value to a list-valued property.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",clearCharges(),"
Permanently clear the whole transaction history for the identified people profile.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",clearPushRegistrationId(),"
Manually clear all current Firebase Cloud Messaging tokens from Mixpanel.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",clearPushRegistrationId​(java.lang.String registrationId),"
Manually clear a single Firebase Cloud Messaging token from Mixpanel.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",deleteUser(),"
Permanently deletes the identified user's record from People Analytics.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",getDistinctId(),"
Returns the string id currently being used to uniquely identify the user associated
 with events sent using set(String, Object) and increment(String, double).
",java.lang.String
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",getNotificationIfAvailable(),"
Returns an InAppNotification object if one is available and being held by the library, or null if
 no notification is currently available.
",InAppNotification
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",getPushRegistrationId(),"
Retrieves current Firebase Cloud Messaging token.
",java.lang.String
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",identify​(java.lang.String distinctId),"
Associate future calls to set(JSONObject), increment(Map),
 append(String, Object), etc...
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","increment​(java.lang.String name,
         double increment)","
Add the given amount to an existing property on the identified user.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","increment​(java.util.Map<java.lang.String,​? extends java.lang.Number> properties)","
Change the existing values of multiple People Analytics properties at once.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",isIdentified(),"
Checks if the people profile is identified or not.
",boolean
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",joinExperimentIfAvailable(),"
Applies A/B test changes, if they are present.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","merge​(java.lang.String name,
     org.json.JSONObject updates)","
Merge a given JSONObject into the object-valued property named name.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","remove​(java.lang.String name,
      java.lang.Object value)","
Remove value from a list-valued property only if they are already present in the list.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",removeOnMixpanelTweaksUpdatedListener​(OnMixpanelTweaksUpdatedListener listener),"
Removes the listener previously registered with addOnMixpanelTweaksUpdatedListener.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",removeOnMixpanelUpdatesReceivedListener​(OnMixpanelUpdatesReceivedListener listener),"
Removes a listener previously registered with addOnMixpanelUpdatesReceivedListener.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","set​(java.lang.String propertyName,
   java.lang.Object value)","
Sets a single property with the given name and value for this user.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",set​(org.json.JSONObject properties),"
Set a collection of properties on the identified user all at once.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","setMap​(java.util.Map<java.lang.String,​java.lang.Object> properties)","
Set a collection of properties on the identified user all at once.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","setOnce​(java.lang.String propertyName,
       java.lang.Object value)","
Works just like set(String, Object), except it will not overwrite existing property values.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",setOnce​(org.json.JSONObject properties),"
Like set(String, Object), but will not set properties that already exist on a record.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","setOnceMap​(java.util.Map<java.lang.String,​java.lang.Object> properties)","
Like set(String, Object), but will not set properties that already exist on a record.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",setPushRegistrationId​(java.lang.String token),"
Manually send a Firebase Cloud Messaging token to Mixpanel.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","showGivenNotification​(InAppNotification notif,
                     android.app.Activity parent)","
Shows the given in-app notification to the user.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","showNotificationById​(int id,
                    android.app.Activity parent)","
Shows an in-app notification identified by id.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",showNotificationIfAvailable​(android.app.Activity parent),"
Shows an in-app notification to the user if one is available.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","trackCharge​(double amount,
           org.json.JSONObject properties)","
Track a revenue transaction for the identified people profile.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","trackNotification​(java.lang.String eventName,
                 InAppNotification notif,
                 org.json.JSONObject properties)","
Sends an event to Mixpanel that includes the automatic properties associated
 with the given notification.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",trackNotificationSeen​(InAppNotification notif),"
Tells MixPanel that you have handled an InAppNotification
 in the case where you are manually dealing with your notifications (getNotificationIfAvailable()).
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ","union​(java.lang.String name,
     org.json.JSONArray value)","
Adds values to a list-valued property only if they are not already present in the list.
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",unset​(java.lang.String name),"
permanently removes the property with the given name from the user's profile
",void
com.mixpanel.android.mpmetrics.MixpanelAPI.People,"Core interface for using Mixpanel People Analytics features.
 You can get an instance by calling MixpanelAPI.getPeople()

 The People object is used to update properties in a user's People Analytics record,
 and to manage the receipt of push notifications sent via Mixpanel Engage.
 For this reason, it's important to call identify(String) on the People
 object before you work with it. Once you call identify, the user identity will
 persist across stops and starts of your application, until you make another
 call to identify using a different id.

 A typical use case for the People object might look like this:

  

 public class MainActivity extends Activity {
      MixpanelAPI mMixpanel;

      public void onCreate(Bundle saved) {
          mMixpanel = MixpanelAPI.getInstance(this, ""YOUR MIXPANEL API TOKEN"");
          mMixpanel.getPeople().identify(""A UNIQUE ID FOR THIS USER"");
          ...
      }

      public void userUpdatedJobTitle(String newTitle) {
          mMixpanel.getPeople().set(""Job Title"", newTitle);
          ...
      }

      public void onDestroy() {
          mMixpanel.flush();
          super.onDestroy();
      }
 }

 
 ",withIdentity​(java.lang.String distinctId),"
Return an instance of Mixpanel people with a temporary distinct id.
",MixpanelAPI.People
com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService,"Service for handling Firebase Cloud Messaging callbacks.

 You can use FirebaseMessagingService to report Firebase Cloud Messaging registration identifiers
 to Mixpanel, and to display incoming notifications from Mixpanel to
 the device status bar. This is the simplest way to get up and running with notifications from Mixpanel.

 To enable FCM in your application, place your google-services.json file in your Android project
 root directory, add firebase messaging as a dependency in your gradle file:

  
 buildscript {
      ...
      dependencies {
          classpath 'com.google.gms:google-services:4.1.0'
          ...
      }
 }

 dependencies {
     implementation 'com.google.firebase:firebase-messaging:17.3.4'
     ...
 }

 apply plugin: 'com.google.gms.google-services'
 
 

 And finally add a clause like the following
 to the <application> tag of your AndroidManifest.xml.



 <service
  android:name=""com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService""
  android:enabled=""true""
  android:exported=""false"">
      <intent-filter>
          <action android:name=""com.google.firebase.MESSAGING_EVENT""/>
      </intent-filter>
 </service>



 Once the FirebaseMessagingService is configured, the only thing you have to do to
 get set up Mixpanel messages is call MixpanelAPI.People.identify(String)
 with a distinct id for your user.

  

 MixpanelAPI.People people = mMixpanelAPI.getPeople();
 people.identify(""A USER DISTINCT ID"");

 
 ",addToken​(java.lang.String token),"
Only use this method if you have implemented your own custom FirebaseMessagingService.
",static void
com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService,"Service for handling Firebase Cloud Messaging callbacks.

 You can use FirebaseMessagingService to report Firebase Cloud Messaging registration identifiers
 to Mixpanel, and to display incoming notifications from Mixpanel to
 the device status bar. This is the simplest way to get up and running with notifications from Mixpanel.

 To enable FCM in your application, place your google-services.json file in your Android project
 root directory, add firebase messaging as a dependency in your gradle file:

  
 buildscript {
      ...
      dependencies {
          classpath 'com.google.gms:google-services:4.1.0'
          ...
      }
 }

 dependencies {
     implementation 'com.google.firebase:firebase-messaging:17.3.4'
     ...
 }

 apply plugin: 'com.google.gms.google-services'
 
 

 And finally add a clause like the following
 to the <application> tag of your AndroidManifest.xml.



 <service
  android:name=""com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService""
  android:enabled=""true""
  android:exported=""false"">
      <intent-filter>
          <action android:name=""com.google.firebase.MESSAGING_EVENT""/>
      </intent-filter>
 </service>



 Once the FirebaseMessagingService is configured, the only thing you have to do to
 get set up Mixpanel messages is call MixpanelAPI.People.identify(String)
 with a distinct id for your user.

  

 MixpanelAPI.People people = mMixpanelAPI.getPeople();
 people.identify(""A USER DISTINCT ID"");

 
 ","cancelNotification​(android.os.Bundle extras,
                  android.app.NotificationManager notificationManager)",N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService,"Service for handling Firebase Cloud Messaging callbacks.

 You can use FirebaseMessagingService to report Firebase Cloud Messaging registration identifiers
 to Mixpanel, and to display incoming notifications from Mixpanel to
 the device status bar. This is the simplest way to get up and running with notifications from Mixpanel.

 To enable FCM in your application, place your google-services.json file in your Android project
 root directory, add firebase messaging as a dependency in your gradle file:

  
 buildscript {
      ...
      dependencies {
          classpath 'com.google.gms:google-services:4.1.0'
          ...
      }
 }

 dependencies {
     implementation 'com.google.firebase:firebase-messaging:17.3.4'
     ...
 }

 apply plugin: 'com.google.gms.google-services'
 
 

 And finally add a clause like the following
 to the <application> tag of your AndroidManifest.xml.



 <service
  android:name=""com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService""
  android:enabled=""true""
  android:exported=""false"">
      <intent-filter>
          <action android:name=""com.google.firebase.MESSAGING_EVENT""/>
      </intent-filter>
 </service>



 Once the FirebaseMessagingService is configured, the only thing you have to do to
 get set up Mixpanel messages is call MixpanelAPI.People.identify(String)
 with a distinct id for your user.

  

 MixpanelAPI.People people = mMixpanelAPI.getPeople();
 people.identify(""A USER DISTINCT ID"");

 
 ","onMessageReceived​(android.content.Context context,
                 android.content.Intent intent)","
Util method to let subclasses customize the payload through the push notification intent.
",protected void
com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService,"Service for handling Firebase Cloud Messaging callbacks.

 You can use FirebaseMessagingService to report Firebase Cloud Messaging registration identifiers
 to Mixpanel, and to display incoming notifications from Mixpanel to
 the device status bar. This is the simplest way to get up and running with notifications from Mixpanel.

 To enable FCM in your application, place your google-services.json file in your Android project
 root directory, add firebase messaging as a dependency in your gradle file:

  
 buildscript {
      ...
      dependencies {
          classpath 'com.google.gms:google-services:4.1.0'
          ...
      }
 }

 dependencies {
     implementation 'com.google.firebase:firebase-messaging:17.3.4'
     ...
 }

 apply plugin: 'com.google.gms.google-services'
 
 

 And finally add a clause like the following
 to the <application> tag of your AndroidManifest.xml.



 <service
  android:name=""com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService""
  android:enabled=""true""
  android:exported=""false"">
      <intent-filter>
          <action android:name=""com.google.firebase.MESSAGING_EVENT""/>
      </intent-filter>
 </service>



 Once the FirebaseMessagingService is configured, the only thing you have to do to
 get set up Mixpanel messages is call MixpanelAPI.People.identify(String)
 with a distinct id for your user.

  

 MixpanelAPI.People people = mMixpanelAPI.getPeople();
 people.identify(""A USER DISTINCT ID"");

 
 ",onMessageReceived​(com.google.firebase.messaging.RemoteMessage remoteMessage),N/A,void
com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService,"Service for handling Firebase Cloud Messaging callbacks.

 You can use FirebaseMessagingService to report Firebase Cloud Messaging registration identifiers
 to Mixpanel, and to display incoming notifications from Mixpanel to
 the device status bar. This is the simplest way to get up and running with notifications from Mixpanel.

 To enable FCM in your application, place your google-services.json file in your Android project
 root directory, add firebase messaging as a dependency in your gradle file:

  
 buildscript {
      ...
      dependencies {
          classpath 'com.google.gms:google-services:4.1.0'
          ...
      }
 }

 dependencies {
     implementation 'com.google.firebase:firebase-messaging:17.3.4'
     ...
 }

 apply plugin: 'com.google.gms.google-services'
 
 

 And finally add a clause like the following
 to the <application> tag of your AndroidManifest.xml.



 <service
  android:name=""com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService""
  android:enabled=""true""
  android:exported=""false"">
      <intent-filter>
          <action android:name=""com.google.firebase.MESSAGING_EVENT""/>
      </intent-filter>
 </service>



 Once the FirebaseMessagingService is configured, the only thing you have to do to
 get set up Mixpanel messages is call MixpanelAPI.People.identify(String)
 with a distinct id for your user.

  

 MixpanelAPI.People people = mMixpanelAPI.getPeople();
 people.identify(""A USER DISTINCT ID"");

 
 ",onNewToken​(java.lang.String token),N/A,void
com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService,"Service for handling Firebase Cloud Messaging callbacks.

 You can use FirebaseMessagingService to report Firebase Cloud Messaging registration identifiers
 to Mixpanel, and to display incoming notifications from Mixpanel to
 the device status bar. This is the simplest way to get up and running with notifications from Mixpanel.

 To enable FCM in your application, place your google-services.json file in your Android project
 root directory, add firebase messaging as a dependency in your gradle file:

  
 buildscript {
      ...
      dependencies {
          classpath 'com.google.gms:google-services:4.1.0'
          ...
      }
 }

 dependencies {
     implementation 'com.google.firebase:firebase-messaging:17.3.4'
     ...
 }

 apply plugin: 'com.google.gms.google-services'
 
 

 And finally add a clause like the following
 to the <application> tag of your AndroidManifest.xml.



 <service
  android:name=""com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService""
  android:enabled=""true""
  android:exported=""false"">
      <intent-filter>
          <action android:name=""com.google.firebase.MESSAGING_EVENT""/>
      </intent-filter>
 </service>



 Once the FirebaseMessagingService is configured, the only thing you have to do to
 get set up Mixpanel messages is call MixpanelAPI.People.identify(String)
 with a distinct id for your user.

  

 MixpanelAPI.People people = mMixpanelAPI.getPeople();
 people.identify(""A USER DISTINCT ID"");

 
 ","showPushNotification​(android.content.Context context,
                    android.content.Intent messageIntent)","
Only use this method if you have implemented your own custom FirebaseMessagingService.
",static void
com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService,"Service for handling Firebase Cloud Messaging callbacks.

 You can use FirebaseMessagingService to report Firebase Cloud Messaging registration identifiers
 to Mixpanel, and to display incoming notifications from Mixpanel to
 the device status bar. This is the simplest way to get up and running with notifications from Mixpanel.

 To enable FCM in your application, place your google-services.json file in your Android project
 root directory, add firebase messaging as a dependency in your gradle file:

  
 buildscript {
      ...
      dependencies {
          classpath 'com.google.gms:google-services:4.1.0'
          ...
      }
 }

 dependencies {
     implementation 'com.google.firebase:firebase-messaging:17.3.4'
     ...
 }

 apply plugin: 'com.google.gms.google-services'
 
 

 And finally add a clause like the following
 to the <application> tag of your AndroidManifest.xml.



 <service
  android:name=""com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService""
  android:enabled=""true""
  android:exported=""false"">
      <intent-filter>
          <action android:name=""com.google.firebase.MESSAGING_EVENT""/>
      </intent-filter>
 </service>



 Once the FirebaseMessagingService is configured, the only thing you have to do to
 get set up Mixpanel messages is call MixpanelAPI.People.identify(String)
 with a distinct id for your user.

  

 MixpanelAPI.People people = mMixpanelAPI.getPeople();
 people.identify(""A USER DISTINCT ID"");

 
 ","showPushNotification​(android.content.Context context,
                    android.content.Intent messageIntent,
                    MixpanelPushNotification mixpanelPushNotification)","
Only use this method if you have implemented your own custom FirebaseMessagingService.
",static void
com.mixpanel.android.mpmetrics.MixpanelNotificationRouteActivity,N/A,handleRouteIntent​(android.content.Intent routeIntent),N/A,protected android.content.Intent
com.mixpanel.android.mpmetrics.MixpanelNotificationRouteActivity,N/A,onCreate​(android.os.Bundle savedInstanceState),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelNotificationRouteActivity,N/A,trackTapAction​(android.content.Intent routeIntent),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,buildBundle​(com.mixpanel.android.mpmetrics.MixpanelNotificationData.PushTapAction onTap),"
Util method to let subclasses customize the payload through the push notification intent.
",protected android.os.Bundle
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,"buildBundle​(com.mixpanel.android.mpmetrics.MixpanelNotificationData.PushTapAction onTap,
           java.lang.String buttonId,
           java.lang.CharSequence buttonLabel)","
Util method to let subclasses customize the payload through the push notification intent.
",protected android.os.Bundle
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,buildButtons​(java.lang.String buttonsJsonStr),N/A,protected java.util.List<com.mixpanel.android.mpmetrics.MixpanelNotificationData.MixpanelNotificationButtonData>
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,buildNotificationFromData(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,buildOnTap​(java.lang.String onTapStr),N/A,protected com.mixpanel.android.mpmetrics.MixpanelNotificationData.PushTapAction
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,buildOnTapFromURI​(java.lang.String uriString),N/A,protected com.mixpanel.android.mpmetrics.MixpanelNotificationData.PushTapAction
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,"createAction​(java.lang.CharSequence title,
            com.mixpanel.android.mpmetrics.MixpanelNotificationData.PushTapAction onTap,
            java.lang.String actionId,
            int index)",N/A,protected android.app.Notification.Action
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,"createActionIntent​(com.mixpanel.android.mpmetrics.MixpanelNotificationData.PushTapAction onTap,
                  java.lang.String buttonId,
                  java.lang.CharSequence label,
                  int index)",N/A,protected android.app.PendingIntent
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,getAppInfo(),N/A,protected android.content.pm.ApplicationInfo
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,getCanonicalIdentifier(),N/A,protected java.lang.String
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,getDefaultIcon(),N/A,protected int
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,getDefaultOnTap(),N/A,protected com.mixpanel.android.mpmetrics.MixpanelNotificationData.PushTapAction
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,getDefaultTitle(),N/A,protected java.lang.CharSequence
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,getDeleteIntent(),N/A,protected android.content.Intent
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,getNotificationId(),N/A,protected int
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,getRoutingIntent​(com.mixpanel.android.mpmetrics.MixpanelNotificationData.PushTapAction onTap),N/A,protected android.content.Intent
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,"getRoutingIntent​(com.mixpanel.android.mpmetrics.MixpanelNotificationData.PushTapAction onTap,
                java.lang.String buttonId,
                java.lang.CharSequence label)",N/A,protected android.content.Intent
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,isValid(),N/A,protected boolean
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,maybeAddActionButtons(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,maybeSetChannel(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,maybeSetCustomIconColor(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,maybeSetExpandableNotification(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,maybeSetLargeIcon(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,maybeSetNotificationBadge(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,maybeSetNotificationBarIcon(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,maybeSetSubText(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,maybeSetTime(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,maybeSetVisibility(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,setBigPictureStyle​(android.graphics.Bitmap imageBitmap),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,setBigTextStyle​(java.lang.String message),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotification,Util method to let subclasses customize the payload through the push notification intent.,trackCampaignReceived(),N/A,protected void
com.mixpanel.android.mpmetrics.MixpanelPushNotificationDismissedReceiver,N/A,"onReceive​(android.content.Context context,
         android.content.Intent intent)",N/A,void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getAutoShowMixpanelUpdates(),N/A,boolean
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getBulkUploadLimit(),N/A,int
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getDataExpiration(),N/A,long
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getDecideEndpoint(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getDisableAppOpenEvent(),N/A,boolean
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getDisableDecideChecker(),N/A,boolean
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getDisableEmulatorBindingUI(),N/A,boolean
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getDisableExceptionHandler(),N/A,boolean
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getDisableGestureBindingUI(),N/A,boolean
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getDisableViewCrawler(),N/A,boolean
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getDisableViewCrawlerForProjects(),N/A,java.lang.String[]
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getEditorUrl(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getEventsEndpoint(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getFlushInterval(),N/A,int
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getGroupsEndpoint(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getIgnoreInvisibleViewsEditor(),N/A,boolean
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getImageCacheMaxMemoryFactor(),N/A,int
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getInstance​(android.content.Context context),N/A,static MPConfig
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getMinimumDatabaseLimit(),N/A,int
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getMinimumSessionDuration(),N/A,int
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getNotificationChannelId(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getNotificationChannelImportance(),N/A,int
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getNotificationChannelName(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getNotificationDefaults(),N/A,int
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getOfflineMode(),N/A,OfflineMode
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getPeopleEndpoint(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getResourcePackageName(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getSessionTimeoutDuration(),N/A,int
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getSSLSocketFactory(),N/A,javax.net.ssl.SSLSocketFactory
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getTestMode(),N/A,boolean
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",getUseIpAddressForGeolocation(),N/A,boolean
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",setDecideEndpoint​(java.lang.String decideEndpoint),N/A,void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",setEventsEndpoint​(java.lang.String eventsEndpoint),N/A,void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",setGroupsEndpoint​(java.lang.String groupsEndpoint),N/A,void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",setMixpanelDecideEndpoint(),N/A,void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",setMixpanelEventsEndpoint(),N/A,void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",setMixpanelGroupsEndpoint(),N/A,void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",setMixpanelPeopleEndpoint(),N/A,void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",setOfflineMode​(OfflineMode offlineMode),"
OfflineMode allows Mixpanel to be in-sync with client offline internal logic.
",void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",setPeopleEndpoint​(java.lang.String peopleEndpoint),N/A,void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",setSSLSocketFactory​(javax.net.ssl.SSLSocketFactory factory),"
The MixpanelAPI will use the system default SSL socket settings under ordinary circumstances.
",void
com.mixpanel.android.mpmetrics.MPConfig,"Stores global configuration options for the Mixpanel library. You can enable and disable configuration
 options using <meta-data> tags inside of the <application> tag in your AndroidManifest.xml.
 All settings are optional, and default to reasonable recommended values. Most users will not have to
 set any options.

 Mixpanel understands the following options:

 
     com.mixpanel.android.MPConfig.EnableDebugLogging
     A boolean value. If true, emit more detailed log messages. Defaults to false

     com.mixpanel.android.MPConfig.BulkUploadLimit
     An integer count of messages, the maximum number of messages to queue before an upload attempt. This value should be less than 50.

     com.mixpanel.android.MPConfig.FlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached.

     com.mixpanel.android.MPConfig.DebugFlushInterval
     An integer number of milliseconds, the maximum time to wait before an upload if the bulk upload limit isn't reached in debug mode.

     com.mixpanel.android.MPConfig.DataExpiration
     An integer number of milliseconds, the maximum age of records to send to Mixpanel. Corresponds to Mixpanel's server-side limit on record age.

     com.mixpanel.android.MPConfig.MinimumDatabaseLimit
     An integer number of bytes. Mixpanel attempts to limit the size of its persistent data
          queue based on the storage capacity of the device, but will always allow queing below this limit. Higher values
          will take up more storage even when user storage is very full.

     com.mixpanel.android.MPConfig.ResourcePackageName
     A string java package name. Defaults to the package name of the Application. Users should set if the package name of their R class is different from the application package name due to application id settings.

     com.mixpanel.android.MPConfig.DisableGestureBindingUI
     A boolean value. If true, do not allow connecting to the codeless event binding or A/B testing editor using an accelerometer gesture. Defaults to false.

     com.mixpanel.android.MPConfig.DisableEmulatorBindingUI
     A boolean value. If true, do not attempt to connect to the codeless event binding or A/B testing editor when running in the Android emulator. Defaults to false.

     com.mixpanel.android.MPConfig.DisableAppOpenEvent
     A boolean value. If true, do not send an ""$app_open"" event when the MixpanelAPI object is created for the first time. Defaults to true - the $app_open event will not be sent by default.

     com.mixpanel.android.MPConfig.DisableExceptionHandler
     A boolean value. If true, do not automatically capture app crashes. ""App Crashed"" events won't show up on Mixpanel. Defaults to false.

     com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates
     A boolean value. If true, automatically show notifications and A/B test variants. Defaults to true.

     com.mixpanel.android.MPConfig.EventsEndpoint
     A string URL. If present, the library will attempt to send events to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.PeopleEndpoint
     A string URL. If present, the library will attempt to send people updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.GroupsEndpoint
     A string URL. If present, the library will attempt to send group updates to this endpoint rather than to the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.DecideEndpoint
     A string URL. If present, the library will attempt to get notification, codeless event tracking, and A/B test variant information from this url rather than the default Mixpanel endpoint.

     com.mixpanel.android.MPConfig.EditorUrl
     A string URL. If present, the library will attempt to connect to this endpoint when in interactive editing mode, rather than to the default Mixpanel editor url.

     com.mixpanel.android.MPConfig.IgnoreInvisibleViewsVisualEditor
     A boolean value. If true, invisible views won't be shown on Mixpanel Visual Editor (AB Test and codeless events) . Defaults to false.

     com.mixpanel.android.MPConfig.DisableViewCrawler
     A boolean value. If true, AB tests, tweaks and codeless events will be disabled. Defaults to false.

     com.mixpanel.android.MPConfig.DisableDecideChecker
     A boolean value. If true, the library will not query our decide endpoint and won't retrieve in-app notifications, codeless events, Ab Tests or tweaks. Defaults to false.

     com.mixpanel.android.MPConfig.NotificationDefaults
     An integer number. This value is used to create a notification before API 26 (https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int)). Defaults to 0.

     com.mixpanel.android.MPConfig.MinimumSessionDuration
     An integer number. The minimum session duration (ms) that is tracked in automatic events. Defaults to 10000 (10 seconds).

     com.mixpanel.android.MPConfig.SessionTimeoutDuration
     An integer number. The maximum session duration (ms) that is tracked in automatic events. Defaults to Integer.MAX_VALUE (no maximum session duration).

     com.mixpanel.android.MPConfig.TestMode
     A boolean value. If true, in-app notifications won't be marked as seen. Defaults to false.

     com.mixpanel.android.MPConfig.ImageCacheMaxMemoryFactor
     An integer value. The LRU cache size that Mixpanel uses to store images is calculated by the available memory divided by this factor. Defaults to 10.

     com.mixpanel.android.MPConfig.DisableViewCrawlerForProjects
     A resource array list (e.g. @array/my_project_list). AB tests, tweaks and codeless events will be disabled for the projects from that list. Defaults to null.

     com.mixpanel.android.MPConfig.UseIpAddressForGeolocation
     A boolean value. If true, Mixpanel will automatically determine city, region and country data using the IP address of the client.Defaults to true.

     com.mixpanel.android.MPConfig.NotificationChannelId
     An string value. If present, the library will use this id when creating a notification channel. Applicable only for Android 26 and above.

     com.mixpanel.android.MPConfig.NotificationChannelName
     An string value. If present, the library will use this user-visible name for our notification channel. Applicable only for Android 26 and above. Defaults to the application name.

     com.mixpanel.android.MPConfig.NotificationChannelImportance
     An integer number. Importance of the notification channel (see https://developer.android.com/reference/android/app/NotificationManager.html). Defaults to 3 (IMPORTANCE_DEFAULT). Applicable only for Android 26 and above.
 ",toString(),N/A,java.lang.String
com.mixpanel.android.util.MPConstants,Created by sergioalonso on 2/15/18.,N/A,N/A,N/A
com.mixpanel.android.util.MPConstants.URL,N/A,N/A,N/A,N/A
com.mixpanel.android.util.MPLog,N/A,"d​(java.lang.String tag,
 java.lang.String message)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,"d​(java.lang.String tag,
 java.lang.String message,
 java.lang.Throwable throwable)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,"e​(java.lang.String tag,
 java.lang.String message)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,"e​(java.lang.String tag,
 java.lang.String message,
 java.lang.Throwable throwable)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,"i​(java.lang.String tag,
 java.lang.String message)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,"i​(java.lang.String tag,
 java.lang.String message,
 java.lang.Throwable throwable)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,setLevel​(int minLevel),N/A,static void
com.mixpanel.android.util.MPLog,N/A,"v​(java.lang.String tag,
 java.lang.String message)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,"v​(java.lang.String tag,
 java.lang.String message,
 java.lang.Throwable throwable)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,"w​(java.lang.String tag,
 java.lang.String message)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,"w​(java.lang.String tag,
 java.lang.String message,
 java.lang.Throwable throwable)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,"wtf​(java.lang.String tag,
   java.lang.String message)",N/A,static void
com.mixpanel.android.util.MPLog,N/A,"wtf​(java.lang.String tag,
   java.lang.String message,
   java.lang.Throwable throwable)",N/A,static void
com.mixpanel.android.util.MPPair,"Extends Pair class to be backwards compatible with old Android versions.
 Before Jelly Bean, Pair.hashCode() and Pair.equals(Object) methods assume the
 first and second objects are never null. However, Mixpanel relies on the fist object to
 be null to apply wildcard changes.",equals​(java.lang.Object o),N/A,boolean
com.mixpanel.android.util.MPPair,"Extends Pair class to be backwards compatible with old Android versions.
 Before Jelly Bean, Pair.hashCode() and Pair.equals(Object) methods assume the
 first and second objects are never null. However, Mixpanel relies on the fist object to
 be null to apply wildcard changes.",hashCode(),N/A,int
com.mixpanel.android.util.OfflineMode,Implement this to allow Mixpanel behave in-sync with your current custom offline logic,isOffline(),"
Returns true if offline-mode is active on the client.
",boolean
com.mixpanel.android.mpmetrics.OnMixpanelTweaksUpdatedListener,For use with MixpanelAPI.People.addOnMixpanelTweaksUpdatedListener(OnMixpanelTweaksUpdatedListener),onMixpanelTweakUpdated​(java.util.Set<java.lang.String> updatedTweaksName),"
Called when the Mixpanel library has updated tweaks.
",void
com.mixpanel.android.mpmetrics.OnMixpanelUpdatesReceivedListener,For use with MixpanelAPI.People.addOnMixpanelUpdatesReceivedListener(OnMixpanelUpdatesReceivedListener),onMixpanelUpdatesReceived(),"
Called when the Mixpanel library has updates, for example, Notifications.
",void
com.mixpanel.android.mpmetrics.SuperPropertyUpdate,"Use SuperPropertyUpdate objects to make changes to super properties
 in place, in a thread-safe way. See MixpanelAPI.updateSuperProperties(SuperPropertyUpdate)
 for details.",update​(org.json.JSONObject oldValues),"
update should take a JSONObject and return a JSON object.
",org.json.JSONObject
com.mixpanel.android.mpmetrics.TakeoverInAppNotification,"Represents a takeover in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",getButton​(int index),N/A,InAppButton
com.mixpanel.android.mpmetrics.TakeoverInAppNotification,"Represents a takeover in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",getCloseColor(),N/A,int
com.mixpanel.android.mpmetrics.TakeoverInAppNotification,"Represents a takeover in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",getNumButtons(),N/A,int
com.mixpanel.android.mpmetrics.TakeoverInAppNotification,"Represents a takeover in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",getTitle(),N/A,java.lang.String
com.mixpanel.android.mpmetrics.TakeoverInAppNotification,"Represents a takeover in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",getTitleColor(),N/A,int
com.mixpanel.android.mpmetrics.TakeoverInAppNotification,"Represents a takeover in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",getType(),N/A,InAppNotification.Type
com.mixpanel.android.mpmetrics.TakeoverInAppNotification,"Represents a takeover in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",hasTitle(),N/A,boolean
com.mixpanel.android.mpmetrics.TakeoverInAppNotification,"Represents a takeover in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)",setShouldShowShadow(),N/A,boolean
com.mixpanel.android.mpmetrics.TakeoverInAppNotification,"Represents a takeover in-app notification delivered from Mixpanel. Under ordinary circumstances,
 most code won't have to interact with this class directly, but rather will display
 InAppNotifications using MixpanelAPI.People.showNotificationIfAvailable(Activity)","writeToParcel​(android.os.Parcel dest,
             int flags)",N/A,void
com.mixpanel.android.mpmetrics.Tweak,"A Tweak allows you to alter values in your user's applications through the Mixpanel UI.
 Use Tweaks to expose parameters you can adjust in A/B tests, to determine what application
 settings result in the best experiences for your users and which are best for achieving
 your goals.

 You can declare tweaks with
 MixpanelAPI.stringTweak(String, String), MixpanelAPI.booleanTweak(String, boolean),
 MixpanelAPI.doubleTweak(String, double), MixpanelAPI.longTweak(String, long),
 and other tweak-related interfaces on MixpanelAPI.",get(),N/A,T
com.mixpanel.android.util.ViewUtils,N/A,"dpToPx​(float dp,
      android.content.Context context)",N/A,static float
com.mixpanel.android.util.ViewUtils,N/A,"mixColors​(int color1,
         int color2)",N/A,static int
