class_name,class_description,method,method_description,data_type
sqip.BuyerAction,Indicates the action that will be performed onto the card payment source id after retrieving the verification token.,N/A,N/A,N/A
sqip.BuyerAction.Charge,Action that will charge the card payment source id with Money.amount in the specified Money.currencyCode,component1(),N/A,Money
sqip.BuyerAction.Charge,Action that will charge the card payment source id with Money.amount in the specified Money.currencyCode,copy(Money money),Action that will charge the card payment source id with Money.amount in the specified Money.currencyCode,BuyerAction.Charge
sqip.BuyerAction.Charge,Action that will charge the card payment source id with Money.amount in the specified Money.currencyCode,equals(java.lang.Object p),N/A,boolean
sqip.BuyerAction.Charge,Action that will charge the card payment source id with Money.amount in the specified Money.currencyCode,getMoney(),N/A,Money
sqip.BuyerAction.Charge,Action that will charge the card payment source id with Money.amount in the specified Money.currencyCode,hashCode(),N/A,int
sqip.BuyerAction.Charge,Action that will charge the card payment source id with Money.amount in the specified Money.currencyCode,toString(),N/A,java.lang.String
sqip.BuyerAction.Store,Action that will store the card paymentSourceId.,equals(java.lang.Object other),N/A,boolean
sqip.BuyerAction.Store,Action that will store the card paymentSourceId.,hashCode(),N/A,int
sqip.BuyerVerification,Lets the application retrieve a verification token for a payment source ID.,"handleActivityResult(Intent intent,                    Callback<sqip.BuyerVerificationResult> callback)",Use this function to handle results of the buyer verification activity. This function should be calledfrom Activity.onActivityResult with the provided data parameter.callback will be called immediately with the result of the buyer verification activity.BuyerVerificationActivityCommand,void
sqip.BuyerVerification,Lets the application retrieve a verification token for a payment source ID.,"verify(Activity activity,      VerificationParameters verificationParameters,      int requestCode)",Starts an activity that requests a verification token for a card paymentSourceId.,void
sqip.BuyerVerificationResult,Represents the result of a BuyerVerification.verify operation. The result will be aninstance of class BuyerVerificationResult.Success if the operation is successful or class BuyerVerificationResult.Error if the operation failed.,getErrorValue(),The result of an erroneous BuyerVerification.verify operation.,BuyerVerificationResult.Error
sqip.BuyerVerificationResult,Represents the result of a BuyerVerification.verify operation. The result will be aninstance of class BuyerVerificationResult.Success if the operation is successful or class BuyerVerificationResult.Error if the operation failed.,getSuccessValue(),The result of a successful BuyerVerification.verify operation.,BuyerVerificationResult.Success
sqip.BuyerVerificationResult,Represents the result of a BuyerVerification.verify operation. The result will be aninstance of class BuyerVerificationResult.Success if the operation is successful or class BuyerVerificationResult.Error if the operation failed.,isError(),True if the BuyerVerification.verify operation resulted in an error.,boolean
sqip.BuyerVerificationResult,Represents the result of a BuyerVerification.verify operation. The result will be aninstance of class BuyerVerificationResult.Success if the operation is successful or class BuyerVerificationResult.Error if the operation failed.,isSuccess(),True if the BuyerVerification.verify operation was successful.See BuyerVerificationResult.getSuccessValue for the result.,boolean
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,component1(),The error code.,Error.Code
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,component2(),A displayable message that summarizes the possible cause of the error.,java.lang.String
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,component3(),A more detailed error code for troubleshooting.,java.lang.String
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,component4(),A human-readable message containing additional debug,java.lang.String
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,"copy(Error.Code code,    java.lang.String message,    java.lang.String debugCode,    java.lang.String debugMessage)",Represents the result of an unsuccessful BuyerVerification.verify operation.,BuyerVerificationResult.Error
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,equals(java.lang.Object p),N/A,boolean
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,getCode(),The error code.,Error.Code
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,getDebugCode(),A more detailed error code for troubleshooting.,java.lang.String
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,getDebugMessage(),A human-readable message containing additional debug,java.lang.String
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,getMessage(),A displayable message that summarizes the possible cause of the error.,java.lang.String
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,hashCode(),N/A,int
sqip.BuyerVerificationResult.Error,Represents the result of an unsuccessful BuyerVerification.verify operation.,toString(),N/A,java.lang.String
sqip.BuyerVerificationResult.Success,Represents the result of a successful BuyerVerificationResult.verify operation. Containsa value indicating whether the user was challenged and the verification token.,component1(),true if the buyer was challenged for additional authentication factors.,boolean
sqip.BuyerVerificationResult.Success,Represents the result of a successful BuyerVerificationResult.verify operation. Containsa value indicating whether the user was challenged and the verification token.,component2(),The token representing a verified buyer.,java.lang.String
sqip.BuyerVerificationResult.Success,Represents the result of a successful BuyerVerificationResult.verify operation. Containsa value indicating whether the user was challenged and the verification token.,"copy(boolean hasChallengedUser,    java.lang.String verificationToken)",Represents the result of a successful BuyerVerificationResult.verify operation. Containsa value indicating whether the user was challenged and the verification token.,BuyerVerificationResult.Success
sqip.BuyerVerificationResult.Success,Represents the result of a successful BuyerVerificationResult.verify operation. Containsa value indicating whether the user was challenged and the verification token.,equals(java.lang.Object p),N/A,boolean
sqip.BuyerVerificationResult.Success,Represents the result of a successful BuyerVerificationResult.verify operation. Containsa value indicating whether the user was challenged and the verification token.,getHasChallengedUser(),true if the buyer was challenged for additional authentication factors.,boolean
sqip.BuyerVerificationResult.Success,Represents the result of a successful BuyerVerificationResult.verify operation. Containsa value indicating whether the user was challenged and the verification token.,getVerificationToken(),The token representing a verified buyer.,java.lang.String
sqip.BuyerVerificationResult.Success,Represents the result of a successful BuyerVerificationResult.verify operation. Containsa value indicating whether the user was challenged and the verification token.,hashCode(),N/A,int
sqip.BuyerVerificationResult.Success,Represents the result of a successful BuyerVerificationResult.verify operation. Containsa value indicating whether the user was challenged and the verification token.,toString(),N/A,java.lang.String
sqip.BuyerVerifiedDetails,Represents the result of a successful operation to verify a payment token,getHasChallengedUser(),true if the buyer was challenged for additional authentication factors.,boolean
sqip.BuyerVerifiedDetails,Represents the result of a successful operation to verify a payment token,getVerificationToken(),The token representing a verified buyer.,java.lang.String
sqip.Call,"An invocation of an SDK call that sends a request to Square servers and returns a response.Each call yields its own request and response. Use Call.clone to make multiple calls with thesame parameters to the same web server; this may be used to retry a failed call.Calls may be executed synchronously with Call.execute, or asynchronously with Call.enqueue. In eithercase the call can be canceled at any time with Call.cancel.",cancel(),"Cancels this call. An attempt will be made to cancel in-flight calls, and if the call has notyet been executed it never will be.",void
sqip.Call,"An invocation of an SDK call that sends a request to Square servers and returns a response.Each call yields its own request and response. Use Call.clone to make multiple calls with thesame parameters to the same web server; this may be used to retry a failed call.Calls may be executed synchronously with Call.execute, or asynchronously with Call.enqueue. In eithercase the call can be canceled at any time with Call.cancel.",clone(),"Creates a new, identical call to this one which can be enqueued or executed even if this callhas already been executed.",Call<T>
sqip.Call,"An invocation of an SDK call that sends a request to Square servers and returns a response.Each call yields its own request and response. Use Call.clone to make multiple calls with thesame parameters to the same web server; this may be used to retry a failed call.Calls may be executed synchronously with Call.execute, or asynchronously with Call.enqueue. In eithercase the call can be canceled at any time with Call.cancel.",enqueue(Callback<T> callback),Asynchronously sends the request and notifies callback of the result.,void
sqip.Call,"An invocation of an SDK call that sends a request to Square servers and returns a response.Each call yields its own request and response. Use Call.clone to make multiple calls with thesame parameters to the same web server; this may be used to retry a failed call.Calls may be executed synchronously with Call.execute, or asynchronously with Call.enqueue. In eithercase the call can be canceled at any time with Call.cancel.",execute(),Synchronously sends the request and returns the result.,T
sqip.Call,"An invocation of an SDK call that sends a request to Square servers and returns a response.Each call yields its own request and response. Use Call.clone to make multiple calls with thesame parameters to the same web server; this may be used to retry a failed call.Calls may be executed synchronously with Call.execute, or asynchronously with Call.enqueue. In eithercase the call can be canceled at any time with Call.cancel.",isCanceled(),True if Call.cancel was called.,boolean
sqip.Call,"An invocation of an SDK call that sends a request to Square servers and returns a response.Each call yields its own request and response. Use Call.clone to make multiple calls with thesame parameters to the same web server; this may be used to retry a failed call.Calls may be executed synchronously with Call.execute, or asynchronously with Call.enqueue. In eithercase the call can be canceled at any time with Call.cancel.",isExecuted(),True if this call has been either Call.execute or Call.enqueue.It is an error to execute or enqueue a call more than once.,boolean
sqip.Callback,Communicates the result of an asynchronous operation. Callback.onResult is invoked exactly once peroperation.,onResult(R result),N/A,void
sqip.Card,Represents a payment card.,component1(),The card brand,Card.Brand
sqip.Card,Represents a payment card.,component2(),The last 4 digits of the card number.,java.lang.String
sqip.Card,Represents a payment card.,component3(),The expiration month of the card.,int
sqip.Card,Represents a payment card.,component4(),The 4-digit expiration year of the card.,int
sqip.Card,Represents a payment card.,component5(),"The billing postal code associated with the card,",java.lang.String
sqip.Card,Represents a payment card.,component6(),The card’s type.,Card.Type
sqip.Card,Represents a payment card.,component7(),Indicates whether or not this is a prepaid card.,Card.PrepaidType
sqip.Card,Represents a payment card.,"copy(Card.Brand brand,    java.lang.String lastFourDigits,    int expirationMonth,    int expirationYear,    java.lang.String postalCode,    Card.Type type,    Card.PrepaidType prepaidType)",Represents a payment card.,Card
sqip.Card,Represents a payment card.,equals(java.lang.Object p),N/A,boolean
sqip.Card,Represents a payment card.,getBrand(),The card brand,Card.Brand
sqip.Card,Represents a payment card.,getExpirationMonth(),The expiration month of the card.,int
sqip.Card,Represents a payment card.,getExpirationYear(),The 4-digit expiration year of the card.,int
sqip.Card,Represents a payment card.,getLastFourDigits(),The last 4 digits of the card number.,java.lang.String
sqip.Card,Represents a payment card.,getPostalCode(),"The billing postal code associated with the card,",java.lang.String
sqip.Card,Represents a payment card.,getPrepaidType(),Indicates whether or not this is a prepaid card.,Card.PrepaidType
sqip.Card,Represents a payment card.,getType(),The card’s type.,Card.Type
sqip.Card,Represents a payment card.,hashCode(),N/A,int
sqip.Card,Represents a payment card.,toString(),N/A,java.lang.String
sqip.Card.Brand,"The card brand (for example, Visa).",N/A,N/A,N/A
sqip.Card.PrepaidType,N/A,N/A,N/A,N/A
sqip.Card.Type,N/A,N/A,N/A,N/A
sqip.CardDetails,Represents the result of a successful operation to process card payment information.,getCard(),The payment card.,Card
sqip.CardDetails,Represents the result of a successful operation to process card payment information.,getNonce(),A one-time-use payment token that is used with the Transactions APIto charge the card or theCustomers API to store a Card on File.,java.lang.String
sqip.CardEntry,Lets the application collect card information from the customer.,"handleActivityResult(Intent intent,                    Callback<sqip.CardEntryActivityResult> callback)",Use this function to handle results of the card entry activity. This function should be calledfrom Activity.onActivityResult with the provided data parameter.callback will be called immediately with the result of the card entry activity.,void
sqip.CardEntry,Lets the application collect card information from the customer.,setCardNonceBackgroundHandler(CardNonceBackgroundHandler handler),"Sets an optional handler that will be called from a background thread with the card result,before the card entry activity finishes. This allows the application to perform additionalwork such as attempting to charge the card and offers the ability to retry(for instance in case of a network error).",void
sqip.CardEntry,Lets the application collect card information from the customer.,"startCardEntryActivity(Activity activity,                      boolean collectPostalCode,                      int requestCode)",Starts an activity that lets the application collect card information from the customer.,void
sqip.CardEntryActivityCommand,Commands that determine the behavior of the Square card entry activity after the completion ofa interface CardNonceBackgroundHandler.,N/A,N/A,N/A
sqip.CardEntryActivityCommand.Finish,Finish the card entry activity with class CardEntryActivityResult.Success.,N/A,N/A,N/A
sqip.CardEntryActivityCommand.ShowError,"Display message in an error dialog to the customer, and allow the customer to edit their cardinformation and re-submit.",component1(),N/A,java.lang.CharSequence
sqip.CardEntryActivityCommand.ShowError,"Display message in an error dialog to the customer, and allow the customer to edit their cardinformation and re-submit.",copy(java.lang.CharSequence message),"Display message in an error dialog to the customer, and allow the customer to edit their cardinformation and re-submit.",CardEntryActivityCommand.ShowError
sqip.CardEntryActivityCommand.ShowError,"Display message in an error dialog to the customer, and allow the customer to edit their cardinformation and re-submit.",equals(java.lang.Object p),N/A,boolean
sqip.CardEntryActivityCommand.ShowError,"Display message in an error dialog to the customer, and allow the customer to edit their cardinformation and re-submit.",getMessage(),N/A,java.lang.CharSequence
sqip.CardEntryActivityCommand.ShowError,"Display message in an error dialog to the customer, and allow the customer to edit their cardinformation and re-submit.",hashCode(),N/A,int
sqip.CardEntryActivityCommand.ShowError,"Display message in an error dialog to the customer, and allow the customer to edit their cardinformation and re-submit.",toString(),N/A,java.lang.String
sqip.CardEntryActivityResult,"Represents the result of a card entry activity. The result will be an instance of class CardEntryActivityResult.Success ifthe request is successful, or class CardEntryActivityResult.Canceled if the customer cancels the request.",getSuccessValue(),N/A,CardEntryActivityResult.Success
sqip.CardEntryActivityResult,"Represents the result of a card entry activity. The result will be an instance of class CardEntryActivityResult.Success ifthe request is successful, or class CardEntryActivityResult.Canceled if the customer cancels the request.",isCanceled(),True if the customer cancels the Square card entry activity before a card is successfullyentered.,boolean
sqip.CardEntryActivityResult,"Represents the result of a card entry activity. The result will be an instance of class CardEntryActivityResult.Success ifthe request is successful, or class CardEntryActivityResult.Canceled if the customer cancels the request.",isSuccess(),True if card entry is successful.See CardEntryActivityResult.getSuccessValue for the result.,boolean
sqip.CardEntryActivityResult.Canceled,The result when the customer cancels the Square card entry activity before a card issuccessfully entered.,N/A,N/A,N/A
sqip.CardEntryActivityResult.Success,Represents the result of a successful operation to process card payment information. Containsthe card nonce and additional class Card details.,component1(),A one-time-use payment token that is used with the Transactions API,java.lang.String
sqip.CardEntryActivityResult.Success,Represents the result of a successful operation to process card payment information. Containsthe card nonce and additional class Card details.,component2(),The payment card.,Card
sqip.CardEntryActivityResult.Success,Represents the result of a successful operation to process card payment information. Containsthe card nonce and additional class Card details.,"copy(java.lang.String nonce,    Card card)",Represents the result of a successful operation to process card payment information. Containsthe card nonce and additional class Card details.,CardEntryActivityResult.Success
sqip.CardEntryActivityResult.Success,Represents the result of a successful operation to process card payment information. Containsthe card nonce and additional class Card details.,equals(java.lang.Object p),N/A,boolean
sqip.CardEntryActivityResult.Success,Represents the result of a successful operation to process card payment information. Containsthe card nonce and additional class Card details.,getCard(),The payment card.,Card
sqip.CardEntryActivityResult.Success,Represents the result of a successful operation to process card payment information. Containsthe card nonce and additional class Card details.,getNonce(),A one-time-use payment token that is used with the Transactions API,java.lang.String
sqip.CardEntryActivityResult.Success,Represents the result of a successful operation to process card payment information. Containsthe card nonce and additional class Card details.,hashCode(),N/A,int
sqip.CardEntryActivityResult.Success,Represents the result of a successful operation to process card payment information. Containsthe card nonce and additional class Card details.,toString(),N/A,java.lang.String
sqip.CardNonceBackgroundHandler,"A callback invoked on a background thread after the customer successfully enters their cardinformation and before the card entry activity finishes. This lets the application performadditional work using the card information, such as as charging the card.If your server successfully processes the card, CardNonceBackgroundHandler.handleEnteredCardInBackground should returnclass CardEntryActivityCommand.Finish to finish the card entry activity.If your server encounters an error while processing the card, CardNonceBackgroundHandler.handleEnteredCardInBackgroundshould return class CardEntryActivityCommand.ShowError. The error will be displayed and the customerwill have an opportunity to edit their card information and re-submit.",handleEnteredCardInBackground(CardDetails cardDetails),N/A,CardEntryActivityCommand
sqip.Contact,"This represents the required given name field and optional fields that can be passed in as part of the verification process.The more fields you supply, the greater the chance the verification will be successful.",getAddress_lines(),N/A,java.util.List<java.lang.String>
sqip.Contact,"This represents the required given name field and optional fields that can be passed in as part of the verification process.The more fields you supply, the greater the chance the verification will be successful.",getCity(),The contact address city name,java.lang.String
sqip.Contact,"This represents the required given name field and optional fields that can be passed in as part of the verification process.The more fields you supply, the greater the chance the verification will be successful.",getCountry_code(),N/A,Country
sqip.Contact,"This represents the required given name field and optional fields that can be passed in as part of the verification process.The more fields you supply, the greater the chance the verification will be successful.",getEmail(),Email address of the contact.,java.lang.String
sqip.Contact,"This represents the required given name field and optional fields that can be passed in as part of the verification process.The more fields you supply, the greater the chance the verification will be successful.",getFamily_name(),N/A,java.lang.String
sqip.Contact,"This represents the required given name field and optional fields that can be passed in as part of the verification process.The more fields you supply, the greater the chance the verification will be successful.",getGiven_name(),N/A,java.lang.String
sqip.Contact,"This represents the required given name field and optional fields that can be passed in as part of the verification process.The more fields you supply, the greater the chance the verification will be successful.",getPhone(),the telephone number of the contact,java.lang.String
sqip.Contact,"This represents the required given name field and optional fields that can be passed in as part of the verification process.The more fields you supply, the greater the chance the verification will be successful.",getPostal_code(),N/A,java.lang.String
sqip.Contact,"This represents the required given name field and optional fields that can be passed in as part of the verification process.The more fields you supply, the greater the chance the verification will be successful.",getRegion(),The applicable administrative region,java.lang.String
sqip.Contact.Builder,N/A,addressLines(java.util.List<java.lang.String> addressLines),N/A,java.util.List<java.lang.String
sqip.Contact.Builder,N/A,build(java.lang.String given_name),N/A,Contact
sqip.Contact.Builder,N/A,city(java.lang.String city),N/A,java.lang.String
sqip.Contact.Builder,N/A,countryCode(Country countryCode),N/A,Country 
sqip.Contact.Builder,N/A,email(java.lang.String email),N/A,java.lang.String
sqip.Contact.Builder,N/A,familyName(java.lang.String familyName),N/A,java.lang.String
sqip.Contact.Builder,N/A,phone(java.lang.String phone),N/A,java.lang.String
sqip.Contact.Builder,N/A,postalCode(java.lang.String postalCode),N/A,java.lang.String
sqip.Contact.Builder,N/A,region(java.lang.String region),N/A,java.lang.String
sqip.Country,"Indicates the country associated with an entity, such as a business.Values are in ISO 3166-1-alpha-2 format.",getCode(),N/A,java.lang.String
sqip.Currency,Indicates the associated currency for a money amount . Values correspond to ISO 4217.,getCode(),N/A,java.lang.String
sqip.Error.Code,Possible error codes that can be returned as a result of attempting to verify a card nonce.,N/A,N/A,N/A
sqip.Error.Code,Possible error codes that can be returned as a result of attempting to verify a card nonce.,N/A,N/A,N/A
sqip.GooglePay,Lets the application retrieve a card nonce using a Google Pay token.,createIsReadyToPayRequest(),Creates an IsReadyToPayRequest instance with Square-supported card networks and paymentmethods configured.,IsReadyToPayRequest
sqip.GooglePay,Lets the application retrieve a card nonce using a Google Pay token.,"createPaymentDataRequest(java.lang.String squareLocationId,                        TransactionInfo transactionInfo)",Creates a PaymentDataRequest instance configured for the Square payment gateway.,PaymentDataRequest
sqip.GooglePay,Lets the application retrieve a card nonce using a Google Pay token.,requestGooglePayNonce(java.lang.String googlePayToken),Creates a interface Call that requests a card nonce from a Google Pay token.,Call<sqip.GooglePayNonceResult>
sqip.GooglePayNonceResult,Represents the result of a GooglePay.requestGooglePayNonce operation. The result will be aninstance of class GooglePayNonceResult.Success if the operation is successful or class GooglePayNonceResult.Error if the operation failed.,getErrorValue(),The result of an erroneous GooglePay.requestGooglePayNonce operation.,GooglePayNonceResult.Error
sqip.GooglePayNonceResult,Represents the result of a GooglePay.requestGooglePayNonce operation. The result will be aninstance of class GooglePayNonceResult.Success if the operation is successful or class GooglePayNonceResult.Error if the operation failed.,getSuccessValue(),The result of a successful GooglePay.requestGooglePayNonce operation.,GooglePayNonceResult.Success
sqip.GooglePayNonceResult,Represents the result of a GooglePay.requestGooglePayNonce operation. The result will be aninstance of class GooglePayNonceResult.Success if the operation is successful or class GooglePayNonceResult.Error if the operation failed.,isError(),True if the GooglePay.requestGooglePayNonce operation resulted in an error.,boolean
sqip.GooglePayNonceResult,Represents the result of a GooglePay.requestGooglePayNonce operation. The result will be aninstance of class GooglePayNonceResult.Success if the operation is successful or class GooglePayNonceResult.Error if the operation failed.,isSuccess(),True if the GooglePay.requestGooglePayNonce operation was successful.See GooglePayNonceResult.getSuccessValue for the result.,boolean
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,component1(),The error code.,Error.Code
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,component2(),A displayable message that summarizes the possible cause of the error.,java.lang.String
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,component3(),A more detailed error code for troubleshooting.,java.lang.String
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,component4(),A human-readable message containing additional debug,java.lang.String
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,"copy(Error.Code code,    java.lang.String message,    java.lang.String debugCode,    java.lang.String debugMessage)",Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,GooglePayNonceResult.Error
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,equals(java.lang.Object p),N/A,boolean
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,getCode(),The error code.,Error.Code
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,getDebugCode(),A more detailed error code for troubleshooting.,java.lang.String
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,getDebugMessage(),A human-readable message containing additional debug,java.lang.String
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,getMessage(),A displayable message that summarizes the possible cause of the error.,java.lang.String
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,hashCode(),N/A,int
sqip.GooglePayNonceResult.Error,Represents the result of an unsuccessful GooglePay.requestGooglePayNonce operation.,toString(),N/A,java.lang.String
sqip.GooglePayNonceResult.Success,Represents the result of a successful GooglePay.requestGooglePayNonce operation. Containsthe card nonce and additional class Card details.,component1(),A one-time-use payment token that is used with the Transactions API,java.lang.String
sqip.GooglePayNonceResult.Success,Represents the result of a successful GooglePay.requestGooglePayNonce operation. Containsthe card nonce and additional class Card details.,component2(),The payment card.,Card
sqip.GooglePayNonceResult.Success,Represents the result of a successful GooglePay.requestGooglePayNonce operation. Containsthe card nonce and additional class Card details.,"copy(java.lang.String nonce,    Card card)",Represents the result of a successful GooglePay.requestGooglePayNonce operation. Containsthe card nonce and additional class Card details.,GooglePayNonceResult.Success
sqip.GooglePayNonceResult.Success,Represents the result of a successful GooglePay.requestGooglePayNonce operation. Containsthe card nonce and additional class Card details.,equals(java.lang.Object p),N/A,boolean
sqip.GooglePayNonceResult.Success,Represents the result of a successful GooglePay.requestGooglePayNonce operation. Containsthe card nonce and additional class Card details.,getCard(),The payment card.,Card
sqip.GooglePayNonceResult.Success,Represents the result of a successful GooglePay.requestGooglePayNonce operation. Containsthe card nonce and additional class Card details.,getNonce(),A one-time-use payment token that is used with the Transactions API,java.lang.String
sqip.GooglePayNonceResult.Success,Represents the result of a successful GooglePay.requestGooglePayNonce operation. Containsthe card nonce and additional class Card details.,hashCode(),N/A,int
sqip.GooglePayNonceResult.Success,Represents the result of a successful GooglePay.requestGooglePayNonce operation. Containsthe card nonce and additional class Card details.,toString(),N/A,java.lang.String
sqip.InAppPaymentsSdk,Lets the application read and write the Square application ID via the InAppPaymentsSdk.getSquareApplicationIdproperty. You can also specify the application ID at build time in the AndroidManifest.xml:,getSquareApplicationId(),N/A,java.lang.String
sqip.InAppPaymentsSdk,Lets the application read and write the Square application ID via the InAppPaymentsSdk.getSquareApplicationIdproperty. You can also specify the application ID at build time in the AndroidManifest.xml:,setSquareApplicationId(java.lang.String p),N/A,void
sqip.KotlinExtensions,Asynchronously send the request and notify callback of the result.,"enqueue(Call<T> $receiver,       Function1<? super T,Unit> callback)",Asynchronously send the request and notify callback of the result.,static <T> void
sqip.KotlinExtensions,Asynchronously send the request and notify callback of the result.,"handleActivityResult(CardEntry $receiver,                    Intent intent,                    Function1<? super sqip.CardEntryActivityResult,Unit> callback)",N/A,static void
sqip.KotlinExtensions,Asynchronously send the request and notify callback of the result.,"setCardNonceBackgroundHandler(CardEntry $receiver,                             Function1<? super sqip.CardDetails,? extends sqip.CardEntryActivityCommand> handler)","Adds a callback to handle the result of the card entry prior to finishing the card entry activity.This allows the application to perform additional work such as saving the card to a server,and offers the ability to retry by returning class CardEntryActivityCommand.ShowError (for instance in case of a network error).",static void
sqip.KotlinExtensionsKt,N/A,"handleActivityResult(BuyerVerification $receiver,                    Intent intent,                    Function1<? super sqip.BuyerVerificationResult,Unit> callback)",N/A,static void
sqip.Money,Amount to charge the card payment source ID in the specified currencyCode,component1(),Amount of money that will be charged,int
sqip.Money,Amount to charge the card payment source ID in the specified currencyCode,component2(),The currency type the paymentSourceId will be charged in.,Currency
sqip.Money,Amount to charge the card payment source ID in the specified currencyCode,"copy(int amount,    Currency currencyCode)",Amount to charge the card payment source ID in the specified currencyCode,Money
sqip.Money,Amount to charge the card payment source ID in the specified currencyCode,equals(java.lang.Object p),N/A,boolean
sqip.Money,Amount to charge the card payment source ID in the specified currencyCode,getAmount(),Amount of money that will be charged,int
sqip.Money,Amount to charge the card payment source ID in the specified currencyCode,getCurrencyCode(),The currency type the paymentSourceId will be charged in.,Currency
sqip.Money,Amount to charge the card payment source ID in the specified currencyCode,hashCode(),N/A,int
sqip.Money,Amount to charge the card payment source ID in the specified currencyCode,toString(),N/A,java.lang.String
sqip.SquareIdentifier,N/A,N/A,N/A,N/A
sqip.SquareIdentifier.LocationToken,N/A,component1(),N/A,java.lang.String
sqip.SquareIdentifier.LocationToken,N/A,copy(java.lang.String tokenId),N/A,SquareIdentifier.LocationToken
sqip.SquareIdentifier.LocationToken,N/A,equals(java.lang.Object p),N/A,boolean
sqip.SquareIdentifier.LocationToken,N/A,getTokenId(),N/A,java.lang.String
sqip.SquareIdentifier.LocationToken,N/A,hashCode(),N/A,int
sqip.SquareIdentifier.LocationToken,N/A,toString(),N/A,java.lang.String
sqip.VerificationParameters,N/A,component1(),N/A,java.lang.String
sqip.VerificationParameters,N/A,component2(),N/A,BuyerAction
sqip.VerificationParameters,N/A,component3(),N/A,SquareIdentifier
sqip.VerificationParameters,N/A,component4(),N/A,Contact
sqip.VerificationParameters,N/A,"copy(java.lang.String paymentSourceId,    BuyerAction action,    SquareIdentifier squareIdentifier,    Contact contact)",N/A,VerificationParameters
sqip.VerificationParameters,N/A,equals(java.lang.Object p),N/A,boolean
sqip.VerificationParameters,N/A,getAction(),N/A,BuyerAction
sqip.VerificationParameters,N/A,getContact(),N/A,Contact
sqip.VerificationParameters,N/A,getPaymentSourceId(),N/A,java.lang.String
sqip.VerificationParameters,N/A,getSquareIdentifier(),N/A,SquareIdentifier
sqip.VerificationParameters,N/A,hashCode(),N/A,int
sqip.VerificationParameters,N/A,toString(),N/A,java.lang.String
com.squareup.sdk.pos.ChargeRequest,"Represents the details of a transaction to initiate with the Point of Sale API. After building a ChargeRequest instance with Builder#Builder(int, CurrencyCode), pass it to the PosClient.createChargeIntent(ChargeRequest) method to initiate the transaction.",equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.pos.ChargeRequest,"Represents the details of a transaction to initiate with the Point of Sale API. After building a ChargeRequest instance with Builder#Builder(int, CurrencyCode), pass it to the PosClient.createChargeIntent(ChargeRequest) method to initiate the transaction.",hashCode(),N/A,int
com.squareup.sdk.pos.ChargeRequest,"Represents the details of a transaction to initiate with the Point of Sale API. After building a ChargeRequest instance with Builder#Builder(int, CurrencyCode), pass it to the PosClient.createChargeIntent(ChargeRequest) method to initiate the transaction.",newBuilder(),Creates a new ChargeRequest.Builder copied from this transaction.,ChargeRequest.Builder
com.squareup.sdk.pos.ChargeRequest,"Represents the details of a transaction to initiate with the Point of Sale API. After building a ChargeRequest instance with Builder#Builder(int, CurrencyCode), pass it to the PosClient.createChargeIntent(ChargeRequest) method to initiate the transaction.","newBuilder(int totalAmount,          CurrencyCode currencyCode)","Creates a new ChargeRequest.Builder copied from this transaction, with a different amount.",ChargeRequest.Builder
com.squareup.sdk.pos.ChargeRequest.Builder,A flexible builder to create a ChargeRequest.,"autoReturn(long timeout,          java.util.concurrent.TimeUnit unit)","After a transaction completes, Square Point of Sale automatically returns to your app after the timeout you provide to this method.",ChargeRequest.Builder
com.squareup.sdk.pos.ChargeRequest.Builder,A flexible builder to create a ChargeRequest.,build(),Constructs a ChargeRequest from the current state of this builder.,ChargeRequest
com.squareup.sdk.pos.ChargeRequest.Builder,A flexible builder to create a ChargeRequest.,customerId(java.lang.String customerId),Optional customer id to associate the sale to a specific customer.,ChargeRequest.Builder
com.squareup.sdk.pos.ChargeRequest.Builder,A flexible builder to create a ChargeRequest.,enforceBusinessLocation(java.lang.String locationId),Requires a transaction to be processed by a particular location of a merchant's business.,ChargeRequest.Builder
com.squareup.sdk.pos.ChargeRequest.Builder,A flexible builder to create a ChargeRequest.,note(java.lang.String note),Specifies a note to associate with a processed transaction.,ChargeRequest.Builder
com.squareup.sdk.pos.ChargeRequest.Builder,A flexible builder to create a ChargeRequest.,requestMetadata(java.lang.String requestMetadata),"Optional request metadata that Square Point of Sale will return in its response, as ChargeRequest.Success.requestMetadata or Error#requestMetadata.",ChargeRequest.Builder
com.squareup.sdk.pos.ChargeRequest.Builder,A flexible builder to create a ChargeRequest.,restrictTendersTo(ChargeRequest.TenderType... tenderTypes),N/A,ChargeRequest.Builder
com.squareup.sdk.pos.ChargeRequest.Builder,A flexible builder to create a ChargeRequest.,restrictTendersTo(java.util.Collection<ChargeRequest.TenderType> tenderTypes),Restricts the payment methods the merchant can accept for the transaction.,ChargeRequest.Builder
com.squareup.sdk.pos.ChargeRequest.Error,Contains values returned by Square Point of Sale after failing to process a transaction.,N/A,N/A,N/A
com.squareup.sdk.pos.ChargeRequest.ErrorCode,The merchant account does not support Customer Management.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static ChargeRequest.ErrorCode
com.squareup.sdk.pos.ChargeRequest.ErrorCode,The merchant account does not support Customer Management.,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static ChargeRequest.ErrorCode[]
com.squareup.sdk.pos.ChargeRequest.Success,Contains values returned by Square Point of Sale after a successfully processed transaction.,N/A,N/A,N/A
com.squareup.sdk.pos.ChargeRequest.TenderType,Possible forms of payment that a merchant can accept for a Point of Sale API transaction.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static ChargeRequest.TenderType
com.squareup.sdk.pos.ChargeRequest.TenderType,Possible forms of payment that a merchant can accept for a Point of Sale API transaction.,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static ChargeRequest.TenderType[]
com.squareup.sdk.pos.CurrencyCode,ISO-4217 Currency Codes: http://www.currency-iso.org/dl_iso_table_a1.xml Names are the alpha-3 code.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static CurrencyCode
com.squareup.sdk.pos.CurrencyCode,ISO-4217 Currency Codes: http://www.currency-iso.org/dl_iso_table_a1.xml Names are the alpha-3 code.,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static CurrencyCode[]
com.squareup.sdk.pos.PosApi,This class replicates constants used by Square Point of Sale for parsing Point of Sale API transaction requests. These constants are used directly by the SDK. You do not need to use them in your code.,N/A,N/A,N/A
com.squareup.sdk.pos.PosClient,"Provides methods for interacting with the Square Point of Sale app, such as by generating Intents that initiate transactions.",createChargeIntent(ChargeRequest chargeRequest),Creates an Intent that can be used to initiate a Square Point of Sale transaction.,android.content.Intent
com.squareup.sdk.pos.PosClient,"Provides methods for interacting with the Square Point of Sale app, such as by generating Intents that initiate transactions.",isPointOfSaleInstalled(),N/A,boolean
com.squareup.sdk.pos.PosClient,"Provides methods for interacting with the Square Point of Sale app, such as by generating Intents that initiate transactions.",launchPointOfSale(),Launches the Square Point of Sale application.,void
com.squareup.sdk.pos.PosClient,"Provides methods for interacting with the Square Point of Sale app, such as by generating Intents that initiate transactions.",openPointOfSalePlayStoreListing(),Opens the Square Point of Sale install page in the Google Play Store.,void
com.squareup.sdk.pos.PosClient,"Provides methods for interacting with the Square Point of Sale app, such as by generating Intents that initiate transactions.",parseChargeError(android.content.Intent data),"Use this method to parse the data Intent passed in android.app.Activity#onActivityResult(int, int, Intent) when resultCode is equal to android.app.Activity#RESULT_CANCELED (canceled transaction).",ChargeRequest.Error
com.squareup.sdk.pos.PosClient,"Provides methods for interacting with the Square Point of Sale app, such as by generating Intents that initiate transactions.",parseChargeSuccess(android.content.Intent data),"Use this method to parse the data Intent passed in android.app.Activity#onActivityResult(int, int, Intent) when resultCode is equal to android.app.Activity#RESULT_OK (successful transaction).",ChargeRequest.Success
com.squareup.sdk.pos.PosSdk,"The Point of Sale SDK lets you start the Square Point of Sale app to take transactions with the Square hardware. Usage Starting a charge request  PosClient posClient = PosSdk.createClient(context, CLIENT_ID); ChargeRequest request = new ChargeRequest.Builder(550, CurrencyCode.USD)   .note(""Super Burrito, no cilantro"")   .enforceBusinessLocation(locationId)   .autoReturn(4, TimeUnit.SECONDS)   .requestMetadata(""#329"")   .restrictTenderTypesTo(ChargeRequest.TenderType.CARD)   .build(); try {   Intent chargeIntent = posClient.createChargeIntent(request);   activity.startActivityForResult(chargeIntent, CHARGE_REQUEST_CODE); } catch (ActivityNotFoundException e) {   posClient.openPointOfSalePlayStoreListing(); }  Handling a charge result  @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {   if (requestCode == CHARGE_REQUEST_CODE) {     if (data == null) {       // This happens if Point of Sale was uninstalled or crashed while we're waiting for a result.       return;     }     if (resultCode == Activity.RESULT_OK) {       onTransactionSuccess(posClient.parseChargeSuccess(data));     } else {       onTransactionError(posClient.parseChargeError(data));     }   } }","createClient(android.content.Context context,            java.lang.String clientId)",Creates a new instance of PosClient that can then be used to create charge intents.,static PosClient
com.squareup.sdk.reader.checkout.AdditionalPaymentType,The payment types an application may accept during checkout in addition to payments via Square Readers.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static AdditionalPaymentType
com.squareup.sdk.reader.checkout.AdditionalPaymentType,The payment types an application may accept during checkout in addition to payments via Square Readers.,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static AdditionalPaymentType[]
com.squareup.sdk.reader.authorization.AuthorizationManager,Lets the application authorize and deauthorize Reader SDK to collect payments on behalf of a Square location.,addAuthorizeCallback(AuthorizeCallback callback),Adds a callback to handle the result of an authorization attempt.,CallbackReference
com.squareup.sdk.reader.authorization.AuthorizationManager,Lets the application authorize and deauthorize Reader SDK to collect payments on behalf of a Square location.,addDeauthorizeCallback(DeauthorizeCallback callback),Adds a callback that handles the result of a deauthorization attempt.,CallbackReference
com.squareup.sdk.reader.authorization.AuthorizationManager,Lets the application authorize and deauthorize Reader SDK to collect payments on behalf of a Square location.,authorize(java.lang.String code),Asynchronously authorizes Reader SDK with a mobile authorization code.,void
com.squareup.sdk.reader.authorization.AuthorizationManager,Lets the application authorize and deauthorize Reader SDK to collect payments on behalf of a Square location.,deauthorize(),Deauthorizes Reader SDK.,void
com.squareup.sdk.reader.authorization.AuthorizationManager,Lets the application authorize and deauthorize Reader SDK to collect payments on behalf of a Square location.,getAuthorizationState(),Returns an immutable snapshot of the current authorization state.,AuthorizationState
com.squareup.sdk.reader.authorization.AuthorizationState,An immutable snapshot of the authorization state of Reader SDK.,canDeauthorize(),Deauthorization fails if there are asynchronous payments recorded on the device that have not been uploaded to Square servers.,boolean
com.squareup.sdk.reader.authorization.AuthorizationState,An immutable snapshot of the authorization state of Reader SDK.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.authorization.AuthorizationState,An immutable snapshot of the authorization state of Reader SDK.,getAuthorizedLocation(),Returns the currently authorized location.,Location
com.squareup.sdk.reader.authorization.AuthorizationState,An immutable snapshot of the authorization state of Reader SDK.,hashCode(),N/A,int
com.squareup.sdk.reader.authorization.AuthorizationState,An immutable snapshot of the authorization state of Reader SDK.,isAuthorizationInProgress(),"Returns true if a Reader SDK authorization is in progress, false otherwise.",boolean
com.squareup.sdk.reader.authorization.AuthorizationState,An immutable snapshot of the authorization state of Reader SDK.,isAuthorized(),"Returns true if Reader SDK is currently authorized to collect payments on behalf of a Square location, false otherwise.",boolean
com.squareup.sdk.reader.authorization.AuthorizationState,An immutable snapshot of the authorization state of Reader SDK.,"newAuthorizedState(Location location,                  boolean canDeauthorize)",Returns new authorized AuthorizationState instance.,static AuthorizationState
com.squareup.sdk.reader.authorization.AuthorizationState,An immutable snapshot of the authorization state of Reader SDK.,newInProgressState(),Returns a new in progress AuthorizationState instance.,static AuthorizationState
com.squareup.sdk.reader.authorization.AuthorizationState,An immutable snapshot of the authorization state of Reader SDK.,newUnauthorizedState(),Returns a new unauthorized AuthorizationState instance.,static AuthorizationState
com.squareup.sdk.reader.authorization.AuthorizationState,An immutable snapshot of the authorization state of Reader SDK.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.authorization.AuthorizeCallback,"A callback that handles the result of an authorization attempt. A successful result contains the authorized Location. In case of error, ResultError.getCode() returns an AuthorizeErrorCode.",N/A,N/A,N/A
com.squareup.sdk.reader.authorization.AuthorizeErrorCode,Possible error codes that can be returned as a result of a call to AuthorizationManager.authorize(String).,isUsageError(),"Returns true if the error is a usage error, false otherwise.",boolean
com.squareup.sdk.reader.authorization.AuthorizeErrorCode,Possible error codes that can be returned as a result of a call to AuthorizationManager.authorize(String).,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static AuthorizeErrorCode
com.squareup.sdk.reader.authorization.AuthorizeErrorCode,Possible error codes that can be returned as a result of a call to AuthorizationManager.authorize(String).,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static AuthorizeErrorCode[]
com.squareup.sdk.reader.core.Callback,Communicates the result of an asynchronous operation. onResult(Object) will be invoked exactly once per operation on the application's main (UI) thread.,onResult(R result),N/A,void
com.squareup.sdk.reader.core.CallbackReference,A reference to a Reader SDK Callback that can be cleared to prevent memory leaks.,clear(),Clears the reference to a Reader SDK Callback.,void
com.squareup.sdk.reader.checkout.Card,Represents the non-confidential details of a card.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.checkout.Card,Represents the non-confidential details of a card.,getBrand(),"The brand (for example, VISA) of this card.",Card.Brand
com.squareup.sdk.reader.checkout.Card,Represents the non-confidential details of a card.,getCardholderName(),The cardholder's full name.,java.lang.String
com.squareup.sdk.reader.checkout.Card,Represents the non-confidential details of a card.,getExpirationMonth(),The year of the expiration month.,java.lang.Integer
com.squareup.sdk.reader.checkout.Card,Represents the non-confidential details of a card.,getExpirationYear(),The year of the expiration date.,java.lang.Integer
com.squareup.sdk.reader.checkout.Card,Represents the non-confidential details of a card.,getId(),"The card identifier, if this card instance came from storing a card on file.",java.lang.String
com.squareup.sdk.reader.checkout.Card,Represents the non-confidential details of a card.,getLastFourDigits(),The last 4 digits of this card's number.,java.lang.String
com.squareup.sdk.reader.checkout.Card,Represents the non-confidential details of a card.,hashCode(),N/A,int
com.squareup.sdk.reader.checkout.Card,Represents the non-confidential details of a card.,"newCardBuilder(Card.Brand brand,              java.lang.String lastFourDigits)",N/A,static Card.Builder
com.squareup.sdk.reader.checkout.Card,Represents the non-confidential details of a card.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.Card.Brand,"The brand (for example, VISA) of a Card.",valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static Card.Brand
com.squareup.sdk.reader.checkout.Card.Brand,"The brand (for example, VISA) of a Card.",values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static Card.Brand[]
com.squareup.sdk.reader.checkout.Card.Builder,Lets developers create and configure card data for automated testing. There is no need to reference this builder class outside of tests.,build(),N/A,Card
com.squareup.sdk.reader.checkout.Card.Builder,Lets developers create and configure card data for automated testing. There is no need to reference this builder class outside of tests.,cardholderName(java.lang.String name),N/A,Card.Builder
com.squareup.sdk.reader.checkout.Card.Builder,Lets developers create and configure card data for automated testing. There is no need to reference this builder class outside of tests.,expirationMonth(int month),N/A,Card.Builder
com.squareup.sdk.reader.checkout.Card.Builder,Lets developers create and configure card data for automated testing. There is no need to reference this builder class outside of tests.,expirationYear(int year),N/A,Card.Builder
com.squareup.sdk.reader.checkout.Card.Builder,Lets developers create and configure card data for automated testing. There is no need to reference this builder class outside of tests.,id(java.lang.String id),N/A,Card.Builder
com.squareup.sdk.reader.checkout.CardReceiptDetails,N/A,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.checkout.CardReceiptDetails,N/A,getApplicationIdentifier(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.CardReceiptDetails,N/A,getApplicationPreferredName(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.CardReceiptDetails,N/A,getAuthorizationCode(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.CardReceiptDetails,N/A,hashCode(),N/A,int
com.squareup.sdk.reader.checkout.CardReceiptDetails,N/A,toString(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.CheckoutActivityCallback,"A callback that handles the result of a checkout activity. A successful result contains a CheckoutResult. In case of error, ResultError.getCode() returns a CheckoutErrorCode.",N/A,N/A,N/A
com.squareup.sdk.reader.checkout.CheckoutErrorCode,"Possible error codes that can be returned as a result of a call to CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",isUsageError(),"Returns true if the error is a usage error, false otherwise.",boolean
com.squareup.sdk.reader.checkout.CheckoutErrorCode,"Possible error codes that can be returned as a result of a call to CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static CheckoutErrorCode
com.squareup.sdk.reader.checkout.CheckoutErrorCode,"Possible error codes that can be returned as a result of a call to CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static CheckoutErrorCode[]
com.squareup.sdk.reader.checkout.CheckoutManager,Lets the application collect payment using Square's checkout flow.,addCheckoutActivityCallback(CheckoutActivityCallback callback),Adds a callback to handle the result of the checkout flow.,CallbackReference
com.squareup.sdk.reader.checkout.CheckoutManager,Lets the application collect payment using Square's checkout flow.,"startCheckoutActivity(android.content.Context context,                     CheckoutParameters checkoutParameters)",Starts an activity that lets the application collect payment using Square's checkout flow.,void
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",buildUpon(),"Creates a new CheckoutParameters CheckoutParameters.Builder, with attributes copied from this instance.",CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",equals(java.lang.Object object),N/A,boolean
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",getAdditionalPaymentTypes(),N/A,java.util.Set<AdditionalPaymentType>
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",getAllowSplitTender(),N/A,boolean
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",getAlwaysRequireSignature(),Deprecated. Use CheckoutParameters.Builder.collectSignature(boolean) and getCollectSignature() instead,boolean
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",getAmountMoney(),N/A,Money
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",getCollectSignature(),Whether a signature should be collected as part of this transaction.,boolean
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",getDelayCapture(),N/A,boolean
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",getNote(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",getSkipReceipt(),N/A,boolean
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",getTipSettings(),N/A,TipSettings
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",getUsedDeprecatedAlwaysRequireSignature(),N/A,boolean
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",hashCode(),N/A,int
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",newBuilder(Money amountMoney),Creates a new CheckoutParameters builder with default values.,static CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters,"Parameters for CheckoutManager.startCheckoutActivity(Context, CheckoutParameters).",toString(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,additionalPaymentTypes(AdditionalPaymentType... paymentTypes),N/A,CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,additionalPaymentTypes(java.util.Set<AdditionalPaymentType> paymentTypes),"A set of payment types the application may accept during checkout in addition to payments via Square Readers, e.g.",CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,allowSplitTender(boolean allowSplitTender),Indicates that the transaction may be split into multiple tenders during checkout.,CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,alwaysRequireSignature(boolean ignored),"Deprecated. This is deprecated, and has no effect. See collectSignature(boolean) instead.",CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,amountMoney(Money amountMoney),N/A,CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,build(),Constructs a CheckoutParameters from the current state of this builder.,CheckoutParameters
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,collectSignature(boolean collectSignature),Indicates that signature collection is required during checkout.,CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,delayCapture(boolean delayCapture),"When true, if checkout completes successfully, the SDK will only authorize, but not capture any card payments.",CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,noAdditionalPaymentTypes(),Clears the additionalPaymentTypes parameter.,CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,noNote(),Clears the note parameter.,CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,note(java.lang.String note),An optional note to associate with the transaction.,CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,noTip(),Disables tipping.,CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,skipReceipt(boolean enabled),Indicates that the digital receipt options screen should not be displayed during checkout.,CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutParameters.Builder,Builder class for constructing CheckoutParameters objects.,tipSettings(TipSettings tipSettings),Configures tipping behavior for the checkout flow.,CheckoutParameters.Builder
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,getCreatedAt(),"The date and time when the transaction was completed, as determined by the client device.",java.util.Date
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,getLocationId(),The unique ID of the location to which the transaction was credited.,java.lang.String
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,getTenders(),The set of tenders associated with a successful transaction.,java.util.Set<Tender>
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,getTotalMoney(),The total amount collected during checkout.,Money
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,getTotalTipMoney(),The total tip amount applied to the transaction across all tenders and included as part of totalMoney.,Money
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,getTransactionClientId(),A unique client-generated ID for successful transactions.,java.lang.String
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,getTransactionId(),A unique ID issued by Square's servers for successful transactions that include one or more card tenders.,java.lang.String
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,hashCode(),N/A,int
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,"newBuilder(java.lang.String locationId,          Money totalMoney,          java.lang.String transactionClientId)",Creates a new CheckoutResult builder with default values.,static CheckoutResult.Builder
com.squareup.sdk.reader.checkout.CheckoutResult,Represents the result of a transaction processed using the Reader SDK checkout flow.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.CheckoutResult.Builder,Builder class for constructing CheckoutResult objects. This class is provided for testing purposes.,addTender(Tender tender),N/A,CheckoutResult.Builder
com.squareup.sdk.reader.checkout.CheckoutResult.Builder,Builder class for constructing CheckoutResult objects. This class is provided for testing purposes.,build(),"Creates an immutable CheckoutResult object, copying the attributes from this builder.",CheckoutResult
com.squareup.sdk.reader.checkout.CheckoutResult.Builder,Builder class for constructing CheckoutResult objects. This class is provided for testing purposes.,createdAt(java.util.Date createdAt),N/A,CheckoutResult.Builder
com.squareup.sdk.reader.checkout.CheckoutResult.Builder,Builder class for constructing CheckoutResult objects. This class is provided for testing purposes.,locationId(java.lang.String locationId),N/A,CheckoutResult.Builder
com.squareup.sdk.reader.checkout.CheckoutResult.Builder,Builder class for constructing CheckoutResult objects. This class is provided for testing purposes.,noTenders(),N/A,CheckoutResult.Builder
com.squareup.sdk.reader.checkout.CheckoutResult.Builder,Builder class for constructing CheckoutResult objects. This class is provided for testing purposes.,noTransactionId(),N/A,CheckoutResult.Builder
com.squareup.sdk.reader.checkout.CheckoutResult.Builder,Builder class for constructing CheckoutResult objects. This class is provided for testing purposes.,totalMoney(Money totalMoney),N/A,CheckoutResult.Builder
com.squareup.sdk.reader.checkout.CheckoutResult.Builder,Builder class for constructing CheckoutResult objects. This class is provided for testing purposes.,totalTipMoney(Money totalTipMoney),N/A,CheckoutResult.Builder
com.squareup.sdk.reader.checkout.CheckoutResult.Builder,Builder class for constructing CheckoutResult objects. This class is provided for testing purposes.,transactionClientId(java.lang.String transactionClientId),N/A,CheckoutResult.Builder
com.squareup.sdk.reader.checkout.CheckoutResult.Builder,Builder class for constructing CheckoutResult objects. This class is provided for testing purposes.,transactionId(java.lang.String transactionId),N/A,CheckoutResult.Builder
com.squareup.sdk.reader.checkout.CurrencyCode,Represents a currency. Currencies are identified by their ISO 4217 currency codes.,current(),The currency code of the most recently authorized location.,static CurrencyCode
com.squareup.sdk.reader.checkout.CurrencyCode,Represents a currency. Currencies are identified by their ISO 4217 currency codes.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static CurrencyCode
com.squareup.sdk.reader.checkout.CurrencyCode,Represents a currency. Currencies are identified by their ISO 4217 currency codes.,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static CurrencyCode[]
com.squareup.sdk.reader.crm.CustomerCardManager,"Lets the application use a Square Reader to store card information for use in later transactions when the card may not be present (also known as storing a card ""on file"" for a customer to use).  The card information is stored on Square servers, not on the specific device running Reader SDK. This means cards cannot be saved on file when offline, and that saved cards for a customer are available from any device, keyed by customer ID.",addStoreCardActivityCallback(StoreCardActivityCallback callback),"Adds a callback to handle results from calls to startStoreCardActivity(Context, String).",CallbackReference
com.squareup.sdk.reader.crm.CustomerCardManager,"Lets the application use a Square Reader to store card information for use in later transactions when the card may not be present (also known as storing a card ""on file"" for a customer to use).  The card information is stored on Square servers, not on the specific device running Reader SDK. This means cards cannot be saved on file when offline, and that saved cards for a customer are available from any device, keyed by customer ID.","startStoreCardActivity(android.content.Context context,                      java.lang.String customerId)",Starts an activity to store a card for a customer.,void
com.squareup.sdk.reader.authorization.DeauthorizeCallback,"A callback that handles the result of a deauthorization attempt. A successful result does not contain a success value. In case of error, ResultError.getCode() returns a DeauthorizeErrorCode.",N/A,N/A,N/A
com.squareup.sdk.reader.authorization.DeauthorizeErrorCode,Possible error codes that can be returned as a result of a call to AuthorizationManager.deauthorize().,isUsageError(),"Returns true if the error is a usage error, false otherwise.",boolean
com.squareup.sdk.reader.authorization.DeauthorizeErrorCode,Possible error codes that can be returned as a result of a call to AuthorizationManager.deauthorize().,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static DeauthorizeErrorCode
com.squareup.sdk.reader.authorization.DeauthorizeErrorCode,Possible error codes that can be returned as a result of a call to AuthorizationManager.deauthorize().,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static DeauthorizeErrorCode[]
com.squareup.sdk.reader.core.ErrorCode,Implemented by error code enums that are returned as a result of Reader SDK operations.,isUsageError(),"Returns true if the error is a usage error, false otherwise.",boolean
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,buildUpon(),"Creates a new Location Location.Builder, with attributes copied from this instance.",Location.Builder
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,getBusinessName(),The business name associated with the location.,java.lang.String
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,getCurrencyCode(),The currency used for all transactions at this location.,CurrencyCode
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,getLocationId(),The unique identifier for the location.,java.lang.String
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,getMaximumCardPaymentAmountMoney(),The maximum credit card payment amount for this location.,Money
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,getMinimumCardPaymentAmountMoney(),The minimum credit card payment amount for this location.,Money
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,getName(),The name of the location (displayed as the location's nickname in Square Dashboard).,java.lang.String
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,hashCode(),N/A,int
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,isCardProcessingActivated(),Indicates whether or not this location is activated for credit card processing.,boolean
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,"newBuilder(java.lang.String locationId,          CurrencyCode currencyCode)",Creates a new Location builder with default values.,static Location.Builder
com.squareup.sdk.reader.authorization.Location,Represents a currently authorized Square location. Successful payments will be credited to this location.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.authorization.Location.Builder,Builder class for constructing Location objects. This class is provided for testing purposes.,build(),Creates a Location from the current state of this builder.,Location
com.squareup.sdk.reader.authorization.Location.Builder,Builder class for constructing Location objects. This class is provided for testing purposes.,businessName(java.lang.String businessName),N/A,Location.Builder
com.squareup.sdk.reader.authorization.Location.Builder,Builder class for constructing Location objects. This class is provided for testing purposes.,cardProcessingActivated(boolean cardProcessingActivated),N/A,Location.Builder
com.squareup.sdk.reader.authorization.Location.Builder,Builder class for constructing Location objects. This class is provided for testing purposes.,currencyCode(CurrencyCode currencyCode),N/A,Location.Builder
com.squareup.sdk.reader.authorization.Location.Builder,Builder class for constructing Location objects. This class is provided for testing purposes.,locationId(java.lang.String locationId),N/A,Location.Builder
com.squareup.sdk.reader.authorization.Location.Builder,Builder class for constructing Location objects. This class is provided for testing purposes.,maximumCardPaymentAmountMoney(Money maximumCardPaymentAmountMoney),N/A,Location.Builder
com.squareup.sdk.reader.authorization.Location.Builder,Builder class for constructing Location objects. This class is provided for testing purposes.,minimumCardPaymentAmountMoney(Money minimumCardPaymentAmountMoney),N/A,Location.Builder
com.squareup.sdk.reader.authorization.Location.Builder,Builder class for constructing Location objects. This class is provided for testing purposes.,name(java.lang.String name),N/A,Location.Builder
com.squareup.sdk.reader.checkout.Money,Represents an amount of money.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.checkout.Money,Represents an amount of money.,format(),Calls format(Locale) with the default locale.,java.lang.String
com.squareup.sdk.reader.checkout.Money,Represents an amount of money.,format(java.util.Locale locale),"Formats this Money into a human-readable string, taking into account the associated currency and the provided Locale.",java.lang.String
com.squareup.sdk.reader.checkout.Money,Represents an amount of money.,getAmount(),"The amount of money, in the smallest denomination of the specified currency.",long
com.squareup.sdk.reader.checkout.Money,Represents an amount of money.,getCurrencyCode(),The currency code.,CurrencyCode
com.squareup.sdk.reader.checkout.Money,Represents an amount of money.,hashCode(),N/A,int
com.squareup.sdk.reader.checkout.Money,Represents an amount of money.,minus(Money amountMoneyToSubtract),Returns a new Money instance with the specified money amount subtracted from this money amount.,Money
com.squareup.sdk.reader.checkout.Money,Represents an amount of money.,plus(Money amountMoneyToAdd),Returns a new money instance with the specified money amount added to this money amount.,Money
com.squareup.sdk.reader.checkout.Money,Represents an amount of money.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.hardware.ReaderManager,Lets the application present screens for connecting and managing a set of Square Readers.,addReaderSettingsActivityCallback(ReaderSettingsActivityCallback callback),Adds a callback to handle the result of the reader settings flow.,CallbackReference
com.squareup.sdk.reader.hardware.ReaderManager,Lets the application present screens for connecting and managing a set of Square Readers.,startReaderSettingsActivity(android.content.Context context),Starts an activity for connecting and managing Square Readers.,void
com.squareup.sdk.reader.ReaderSdk,The entry point for Reader SDK. Manages initialization and provides access to managers for all SDK operations. You must initialize the SDK before attempting any other operation. Initialize the SDK:  public class MyApplication extends Application {   @Override public void onCreate() {     super.onCreate();     ReaderSdk.initialize(this);   } },authorizationManager(),Returns the AuthorizationManager singleton for authorizing Reader SDK to collect payments.,static AuthorizationManager
com.squareup.sdk.reader.ReaderSdk,The entry point for Reader SDK. Manages initialization and provides access to managers for all SDK operations. You must initialize the SDK before attempting any other operation. Initialize the SDK:  public class MyApplication extends Application {   @Override public void onCreate() {     super.onCreate();     ReaderSdk.initialize(this);   } },checkoutManager(),Returns the CheckoutManager singleton for collecting payments using Square's checkout flow.,static CheckoutManager
com.squareup.sdk.reader.ReaderSdk,The entry point for Reader SDK. Manages initialization and provides access to managers for all SDK operations. You must initialize the SDK before attempting any other operation. Initialize the SDK:  public class MyApplication extends Application {   @Override public void onCreate() {     super.onCreate();     ReaderSdk.initialize(this);   } },customerCardManager(),Returns the CustomerCardManager singleton for tracking card-on-file information about customers.,static CustomerCardManager
com.squareup.sdk.reader.ReaderSdk,The entry point for Reader SDK. Manages initialization and provides access to managers for all SDK operations. You must initialize the SDK before attempting any other operation. Initialize the SDK:  public class MyApplication extends Application {   @Override public void onCreate() {     super.onCreate();     ReaderSdk.initialize(this);   } },initialize(android.app.Application application),Initializes the Square Reader SDK.,static void
com.squareup.sdk.reader.ReaderSdk,The entry point for Reader SDK. Manages initialization and provides access to managers for all SDK operations. You must initialize the SDK before attempting any other operation. Initialize the SDK:  public class MyApplication extends Application {   @Override public void onCreate() {     super.onCreate();     ReaderSdk.initialize(this);   } },readerManager(),Returns the ReaderManager singleton for connecting and managing Square Card Readers.,static ReaderManager
com.squareup.sdk.reader.hardware.ReaderSettingsActivityCallback,"A callback that handles the result of a Square Reader settings activity. A successful result does not contain a success value. In case of error, ResultError.getCode() returns a ReaderSettingsErrorCode.",N/A,N/A,N/A
com.squareup.sdk.reader.hardware.ReaderSettingsErrorCode,Possible error codes that can be returned as a result of a call to ReaderManager.startReaderSettingsActivity(Context).,isUsageError(),"Returns true if the error is a usage error, false otherwise.",boolean
com.squareup.sdk.reader.hardware.ReaderSettingsErrorCode,Possible error codes that can be returned as a result of a call to ReaderManager.startReaderSettingsActivity(Context).,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static ReaderSettingsErrorCode
com.squareup.sdk.reader.hardware.ReaderSettingsErrorCode,Possible error codes that can be returned as a result of a call to ReaderManager.startReaderSettingsActivity(Context).,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static ReaderSettingsErrorCode[]
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,getError(),"The error, if the operation resulted in an error.",E
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,getSuccessValue(),The result of a successful operation.,S
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,hashCode(),N/A,int
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,hasSuccessValue(),"Returns true if the operation was successful and the generic parameter S is not of type Void, false otherwise.",boolean
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,isError(),true if the operation resulted in an error.,boolean
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,isSuccess(),true if the operation was successful.,boolean
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,newError(E error),Creates a new Result object representing an error.,"static <S,E> Result<S,E>"
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,newSuccess(),Creates a new Result object representing a success without a success value.,"static <E> Result<java.lang.Void,E>"
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,newSuccess(S successValue),Creates a new Result object representing a success with a success value.,"static <S,E> Result<S,E>"
com.squareup.sdk.reader.core.Result,The result of an asynchronous operation.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.core.ResultError,Represents an error when an operation was not successful.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.core.ResultError,Represents an error when an operation was not successful.,getCode(),Provides the error code.,C
com.squareup.sdk.reader.core.ResultError,Represents an error when an operation was not successful.,getDebugCode(),Provides a more detailed error code for troubleshooting.,java.lang.String
com.squareup.sdk.reader.core.ResultError,Represents an error when an operation was not successful.,getDebugMessage(),Provides a human-readable message containing additional debug information related to the possible cause of the error.,java.lang.String
com.squareup.sdk.reader.core.ResultError,Represents an error when an operation was not successful.,getMessage(),Provides a displayable message that summarizes the possible cause of the error.,java.lang.String
com.squareup.sdk.reader.core.ResultError,Represents an error when an operation was not successful.,hashCode(),N/A,int
com.squareup.sdk.reader.core.ResultError,Represents an error when an operation was not successful.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.crm.StoreCardActivityCallback,"Callback type to receive notification on completion, successful or otherwise, of an attempt to save a card to a customer profile.",N/A,N/A,N/A
com.squareup.sdk.reader.crm.StoreCustomerCardErrorCode,Enumeration of the run-time errors that might occur when storing a card on file.,isUsageError(),Tests whether the error code indicates an error in usage of Reader SDK.,boolean
com.squareup.sdk.reader.crm.StoreCustomerCardErrorCode,Enumeration of the run-time errors that might occur when storing a card on file.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static StoreCustomerCardErrorCode
com.squareup.sdk.reader.crm.StoreCustomerCardErrorCode,Enumeration of the run-time errors that might occur when storing a card on file.,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static StoreCustomerCardErrorCode[]
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,buildUpon(),"Creates a new Tender Tender.Builder, with attributes copied from this instance.",Tender.Builder
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,getCardDetails(),Details related to the card payment represented by this tender.,TenderCardDetails
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,getCashDetails(),Details related to the cash payment represented by this tender.,TenderCashDetails
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,getCreatedAt(),"The date and time when the tender was created, as determined by the client device.",java.util.Date
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,getTenderId(),A unique ID for this tender issued by Square's servers.,java.lang.String
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,getTipMoney(),The amount added to this tender as tip.,Money
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,getTotalMoney(),"The total amount of this tender, including tips.",Money
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,getType(),The type of this tender.,Tender.Type
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,hashCode(),N/A,int
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,"newCardTenderBuilder(java.lang.String tenderId,                    Money totalMoney,                    TenderCardDetails cardDetails)",Creates a new tender builder of type Tender.Type.CARD with default values.,static Tender.Builder
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,"newCashTenderBuilder(Money totalMoney,                    TenderCashDetails cashDetails)",Creates a new tender builder of type Tender.Type.CASH with default values.,static Tender.Builder
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,newOtherTenderBuilder(Money totalMoney),Creates a new tender builder of type Tender.Type.OTHER with default values.,static Tender.Builder
com.squareup.sdk.reader.checkout.Tender,Represents a payment method used in a transaction.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.Tender.Builder,Builder class for constructing Tender objects. This class is provided for testing purposes.,build(),"Creates an immutable Tender object, copying the attributes from this builder.",Tender
com.squareup.sdk.reader.checkout.Tender.Builder,Builder class for constructing Tender objects. This class is provided for testing purposes.,"cardTender(java.lang.String tenderId,          TenderCardDetails cardDetails)",N/A,Tender.Builder
com.squareup.sdk.reader.checkout.Tender.Builder,Builder class for constructing Tender objects. This class is provided for testing purposes.,cashTender(TenderCashDetails cashDetails),N/A,Tender.Builder
com.squareup.sdk.reader.checkout.Tender.Builder,Builder class for constructing Tender objects. This class is provided for testing purposes.,createdAt(java.util.Date createdAt),N/A,Tender.Builder
com.squareup.sdk.reader.checkout.Tender.Builder,Builder class for constructing Tender objects. This class is provided for testing purposes.,otherTender(),N/A,Tender.Builder
com.squareup.sdk.reader.checkout.Tender.Builder,Builder class for constructing Tender objects. This class is provided for testing purposes.,tipMoney(Money tipMoney),N/A,Tender.Builder
com.squareup.sdk.reader.checkout.Tender.Builder,Builder class for constructing Tender objects. This class is provided for testing purposes.,totalMoney(Money totalMoney),N/A,Tender.Builder
com.squareup.sdk.reader.checkout.Tender.Type,The payment method type.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static Tender.Type
com.squareup.sdk.reader.checkout.Tender.Type,The payment method type.,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static Tender.Type[]
com.squareup.sdk.reader.checkout.TenderCardDetails,Represents additional details of a card payment.,buildUpon(),"Creates a new TenderCardDetails TenderCardDetails.Builder, with attributes copied from this instance.",TenderCardDetails.Builder
com.squareup.sdk.reader.checkout.TenderCardDetails,Represents additional details of a card payment.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.checkout.TenderCardDetails,Represents additional details of a card payment.,getCard(),"Details about the card used in this tender, including the brand and last four digits of the card number.",Card
com.squareup.sdk.reader.checkout.TenderCardDetails,Represents additional details of a card payment.,getCardReceiptDetails(),Details related to the card payment that can be used to produce EMV-compliant receipts.,CardReceiptDetails
com.squareup.sdk.reader.checkout.TenderCardDetails,Represents additional details of a card payment.,getEntryMethod(),The method used to capture the card information at checkout.,TenderCardDetails.EntryMethod
com.squareup.sdk.reader.checkout.TenderCardDetails,Represents additional details of a card payment.,hashCode(),N/A,int
com.squareup.sdk.reader.checkout.TenderCardDetails,Represents additional details of a card payment.,"newBuilder(Card card,          TenderCardDetails.EntryMethod entryMethod,          CardReceiptDetails cardReceiptDetails)",Creates a new TenderCardDetails builder with default values.,static TenderCardDetails.Builder
com.squareup.sdk.reader.checkout.TenderCardDetails,Represents additional details of a card payment.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.TenderCardDetails.Builder,Builder class for constructing TenderCardDetails objects. This class is provided for testing purposes.,build(),"Creates an immutable TenderCardDetails object, copying the attributes from this builder.",TenderCardDetails
com.squareup.sdk.reader.checkout.TenderCardDetails.Builder,Builder class for constructing TenderCardDetails objects. This class is provided for testing purposes.,card(Card card),N/A,TenderCardDetails.Builder
com.squareup.sdk.reader.checkout.TenderCardDetails.Builder,Builder class for constructing TenderCardDetails objects. This class is provided for testing purposes.,entryMethod(CardReceiptDetails cardReceiptDetails),N/A,TenderCardDetails.Builder
com.squareup.sdk.reader.checkout.TenderCardDetails.Builder,Builder class for constructing TenderCardDetails objects. This class is provided for testing purposes.,entryMethod(TenderCardDetails.EntryMethod entryMethod),N/A,TenderCardDetails.Builder
com.squareup.sdk.reader.checkout.TenderCardDetails.EntryMethod,The entry method used to provide a card's details.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static TenderCardDetails.EntryMethod
com.squareup.sdk.reader.checkout.TenderCardDetails.EntryMethod,The entry method used to provide a card's details.,values(),"Returns an array containing the constants of this enum type, inthe order they are declared.",static TenderCardDetails.EntryMethod[]
com.squareup.sdk.reader.checkout.TenderCashDetails,Represents additional details of a cash payment.,buildUpon(),"Creates a new TenderCashDetails TenderCashDetails.Builder, with attributes copied from this instance.",TenderCashDetails.Builder
com.squareup.sdk.reader.checkout.TenderCashDetails,Represents additional details of a cash payment.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.checkout.TenderCashDetails,Represents additional details of a cash payment.,getBuyerTenderedMoney(),"The total amount of cash provided to pay for the transaction, before change is given.",Money
com.squareup.sdk.reader.checkout.TenderCashDetails,Represents additional details of a cash payment.,getChangeBackMoney(),The amount of cash returned during the transaction as change.,Money
com.squareup.sdk.reader.checkout.TenderCashDetails,Represents additional details of a cash payment.,hashCode(),N/A,int
com.squareup.sdk.reader.checkout.TenderCashDetails,Represents additional details of a cash payment.,newBuilder(Money buyerTenderedMoney),Creates a new TenderCashDetails builder with default values.,static TenderCashDetails.Builder
com.squareup.sdk.reader.checkout.TenderCashDetails,Represents additional details of a cash payment.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.TenderCashDetails.Builder,Builder class for constructing TenderCashDetails objects. This class is provided for testing purposes.,build(),"Creates a new immutable TenderCashDetails object, copying the attributes from this builder.",TenderCashDetails
com.squareup.sdk.reader.checkout.TenderCashDetails.Builder,Builder class for constructing TenderCashDetails objects. This class is provided for testing purposes.,buyerTenderedMoney(Money buyerTenderedMoney),N/A,TenderCashDetails.Builder
com.squareup.sdk.reader.checkout.TenderCashDetails.Builder,Builder class for constructing TenderCashDetails objects. This class is provided for testing purposes.,changeBackMoney(Money changeBackMoney),N/A,TenderCashDetails.Builder
com.squareup.sdk.reader.checkout.TipSettings,Settings that configure the tipping behavior of the checkout flow.,buildUpon(),"Creates a new TipSettings TipSettings.Builder, with attributes copied from this instance.",TipSettings.Builder
com.squareup.sdk.reader.checkout.TipSettings,Settings that configure the tipping behavior of the checkout flow.,equals(java.lang.Object o),N/A,boolean
com.squareup.sdk.reader.checkout.TipSettings,Settings that configure the tipping behavior of the checkout flow.,getShowCustomTipField(),N/A,boolean
com.squareup.sdk.reader.checkout.TipSettings,Settings that configure the tipping behavior of the checkout flow.,getShowSeparateTipScreen(),N/A,boolean
com.squareup.sdk.reader.checkout.TipSettings,Settings that configure the tipping behavior of the checkout flow.,getTipPercentages(),N/A,java.util.List<java.lang.Integer>
com.squareup.sdk.reader.checkout.TipSettings,Settings that configure the tipping behavior of the checkout flow.,hashCode(),N/A,int
com.squareup.sdk.reader.checkout.TipSettings,Settings that configure the tipping behavior of the checkout flow.,newBuilder(),Creates a new TipSettings builder with default values.,static TipSettings.Builder
com.squareup.sdk.reader.checkout.TipSettings,Settings that configure the tipping behavior of the checkout flow.,toString(),N/A,java.lang.String
com.squareup.sdk.reader.checkout.TipSettings.Builder,Builder class for constructing TipSettings objects.,build(),"Creates a new immutable TipSettings object, copying the attributes from this builder.",TipSettings
com.squareup.sdk.reader.checkout.TipSettings.Builder,Builder class for constructing TipSettings objects.,showCustomTipField(boolean showCustomTipField),Indicates whether custom tip amounts are allowed during the checkout flow.,TipSettings.Builder
com.squareup.sdk.reader.checkout.TipSettings.Builder,Builder class for constructing TipSettings objects.,showSeparateTipScreen(boolean showSeparateTipScreen),Indicates whether tip options should be presented on their own screen before presenting the signature screen during credit card transactions.,TipSettings.Builder
com.squareup.sdk.reader.checkout.TipSettings.Builder,Builder class for constructing TipSettings objects.,tipPercentages(int... tipPercentages),A list of tip percentages that should be presented during the checkout flow.,TipSettings.Builder
com.squareup.sdk.reader.checkout.TipSettings.Builder,Builder class for constructing TipSettings objects.,tipPercentages(java.util.List<java.lang.Integer> tipPercentages),N/A,TipSettings.Builder
