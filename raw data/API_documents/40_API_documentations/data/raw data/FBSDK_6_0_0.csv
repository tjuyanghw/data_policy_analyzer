class_name,class_description,method,method_description,data_type
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.","createFromNativeLinkingIntent(Intent intent, java.lang.String applicationId, AccessToken.AccessTokenCreationCallback accessTokenCallback)",Creates a new AccessToken using the information contained in an Intent populated by the Facebook application in order to launch a native link.,static void
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",describeContents(),N/A,int
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",equals(java.lang.Object other),N/A,boolean
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getApplicationId(),Gets the ID of the Facebook Application associated with this access token.,java.lang.String
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getCurrentAccessToken(),Getter for the access token that is current for the application.,static AccessToken
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getDataAccessExpirationTime(),Gets the date at which user data access expires.,java.util.Date
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getDeclinedPermissions(),Gets the list of permissions declined by the user with this access token.,java.util.Set<java.lang.String>
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getExpiredPermissions(),Gets the list of permissions that were expired with this access token.,java.util.Set<java.lang.String>
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getExpires(),Gets the date at which the access token expires.,java.util.Date
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getGraphDomain(),Returns the graph domain for this access token.,java.lang.String
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getLastRefresh(),Gets the date at which the token was last refreshed.,java.util.Date
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getPermissions(),Gets the list of permissions associated with this access token.,java.util.Set<java.lang.String>
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getSource(),Gets the AccessTokenSource indicating how this access token was obtained.,AccessTokenSource
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getToken(),Gets the string representing the access token.,java.lang.String
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",getUserId(),Returns the user id for this access token.,java.lang.String
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",hashCode(),N/A,int
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",isCurrentAccessTokenActive(),Returns whether the current AccessToken is active or not.,static boolean
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",isDataAccessActive(),N/A,static boolean
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",isDataAccessExpired(),Shows if the user data access is expired.,boolean
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",isExpired(),Shows if the token is expired.,boolean
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",refreshCurrentAccessTokenAsync(),"Updates the current access token with up to date permissions, and extends the expiration date, if extension is possible.",static void
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",refreshCurrentAccessTokenAsync(AccessToken.AccessTokenRefreshCallback callback),"Updates the current access token with up to date permissions, and extends the expiration date, if extension is possible.",static void
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",setCurrentAccessToken(AccessToken accessToken),Setter for the access token that is current for the application.,static void
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.",toString(),N/A,java.lang.String
com.facebook.AccessToken,"This class represents an immutable access token for using Facebook APIs. It also includes associated metadata such as expiration date and permissions.  For more information on access tokens, see Access Tokens.","writeToParcel(Parcel dest, int flags)",N/A,void
AccessToken.AccessTokenCreationCallback,A callback for creating an access token from a NativeLinkingIntent,onError(FacebookException error),N/A,void
AccessToken.AccessTokenCreationCallback,A callback for creating an access token from a NativeLinkingIntent,onSuccess(AccessToken token),The method called on a successful creation of an AccessToken.,void
AccessToken.AccessTokenRefreshCallback,N/A,OnTokenRefreshed(AccessToken accessToken),N/A,void
AccessToken.AccessTokenRefreshCallback,N/A,OnTokenRefreshFailed(FacebookException exception),N/A,void
com.facebook.AccessTokenManager,N/A,ACTION_CURRENT_ACCESS_TOKEN_CHANGED,N/A,static java.lang.String
com.facebook.AccessTokenManager,N/A,EXTRA_NEW_ACCESS_TOKEN,N/A,static java.lang.String
com.facebook.AccessTokenManager,N/A,EXTRA_OLD_ACCESS_TOKEN,N/A,static java.lang.String
com.facebook.AccessTokenManager,N/A,SHARED_PREFERENCES_NAME,N/A,static java.lang.String
com.facebook.AccessTokenManager,N/A,TAG,N/A,static java.lang.String
com.facebook.AccessTokenSource,Indicates where a Facebook access token was obtained from.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static AccessTokenSource
com.facebook.AccessTokenSource,Indicates where a Facebook access token was obtained from.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static AccessTokenSource[]
com.facebook.AccessTokenTracker,This class can be extended to receive notifications of access token changes. The stopTracking() method should be called in the onDestroy() method of the receiving Activity or Fragment.,isTracking(),Gets whether the tracker is tracking the current access token.,boolean
com.facebook.AccessTokenTracker,This class can be extended to receive notifications of access token changes. The stopTracking() method should be called in the onDestroy() method of the receiving Activity or Fragment.,"onCurrentAccessTokenChanged(AccessToken oldAccessToken, AccessToken currentAccessToken)",The method that will be called with the access token changes.,protected abstract void
com.facebook.AccessTokenTracker,This class can be extended to receive notifications of access token changes. The stopTracking() method should be called in the onDestroy() method of the receiving Activity or Fragment.,startTracking(),Starts tracking the current access token,void
com.facebook.AccessTokenTracker,This class can be extended to receive notifications of access token changes. The stopTracking() method should be called in the onDestroy() method of the receiving Activity or Fragment.,stopTracking(),Stops tracking the current access token.,void
com.facebook.appevents.restrictivedatafilter.AddressFilterManager,N/A,enable(),N/A,static void
com.facebook.appevents.restrictivedatafilter.AddressFilterManager,N/A,"processParameters(java.util.Map<java.lang.String,java.lang.String> parameters)",N/A,static void
com.facebook.appevents.AppEvent,N/A,getIsImplicit(),N/A,boolean
com.facebook.appevents.AppEvent,N/A,getJSONObject(),N/A,JSONObject
com.facebook.appevents.AppEvent,N/A,getName(),N/A,java.lang.String
com.facebook.appevents.AppEvent,N/A,isChecksumValid(),N/A,boolean
com.facebook.appevents.AppEvent,N/A,toString(),N/A,java.lang.String
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",activateApp(Application application),Notifies the events system that the app has launched and activate and deactivate events should start being logged automatically.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","activateApp(Application application, java.lang.String applicationId)",Notifies the events system that the app has launched and activate and deactivate events should start being logged automatically.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",activateApp(Context _context),Deprecated.  Use activateApp(Application),static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","activateApp(Context context, java.lang.String _str)",Deprecated.  Use activateApp(Application),static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","augmentWebView(WebView webView, Context context)",Intended to be used as part of a hybrid webapp.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",clearUserData(),Clears the current user data,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",clearUserID(),Clears the currently set user id.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",deactivateApp(Context _context),Deprecated.  When using activateApp(Application) deactivate app will be logged automatically.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","deactivateApp(Context _context, java.lang.String _str)",Deprecated.  When using activateApp(Application) deactivate app will be logged automatically.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",flush(),Explicitly flush any stored events to the server.,void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",getAnonymousAppDeviceGUID(Context context),Each app/device pair gets an GUID that is sent back with App Events and persisted with this app/device pair.,static java.lang.String
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",getApplicationId(),Returns the app ID this logger was configured to log to.,java.lang.String
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",getFlushBehavior(),Access the behavior that AppEventsLogger uses to determine when to flush logged events to the server.,static AppEventsLogger.FlushBehavior
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",getUserData(),Returns the set user data else null.,static java.lang.String
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",getUserID(),Returns the set user id else null.,static java.lang.String
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","initializeLib(Context context, java.lang.String applicationId)","Notifies the events system which internal SDK Libraries, and some specific external Libraries that the app is utilizing.",static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",isValidForAccessToken(AccessToken accessToken),Determines if the logger is valid for the given access token.,boolean
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",logEvent(java.lang.String eventName),Log an app event with the specified name.,void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","logEvent(java.lang.String eventName, Bundle parameters)",Log an app event with the specified name and set of parameters.,void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","logEvent(java.lang.String eventName, double valueToSum)",Log an app event with the specified name and the supplied value.,void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","logEvent(java.lang.String eventName, double valueToSum, Bundle parameters)","Log an app event with the specified name, supplied value, and set of parameters.",void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","logProductItem(java.lang.String itemID, AppEventsLogger.ProductAvailability availability, AppEventsLogger.ProductCondition condition, java.lang.String description, java.lang.String imageLink, java.lang.String link, java.lang.String title, java.math.BigDecimal priceAmount, java.util.Currency currency, java.lang.String gtin, java.lang.String mpn, java.lang.String brand, Bundle parameters)",Uploads product catalog product item as an app event.,void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","logPurchase(java.math.BigDecimal purchaseAmount, java.util.Currency currency)","Logs a purchase event with Facebook, in the specified amount and with the specified currency.",void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","logPurchase(java.math.BigDecimal purchaseAmount, java.util.Currency currency, Bundle parameters)","Logs a purchase event with Facebook explicitly, in the specified amount and with the specified currency.",void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","logPurchaseImplicitly(java.math.BigDecimal purchaseAmount, java.util.Currency currency, Bundle parameters)","Deprecated.  Use AppEventsLogger#logPurchase( java.math.BigDecimal, java.util.Currency, android.os.Bundle) instead.",void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",logPushNotificationOpen(Bundle payload),Logs an app event that tracks that the application was open via Push Notification.,void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","logPushNotificationOpen(Bundle payload, java.lang.String action)",Logs an app event that tracks that the application was open via Push Notification.,void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","logSdkEvent(java.lang.String eventName, java.lang.Double valueToSum, Bundle parameters)",Deprecated. ,void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",newLogger(Context context),Build an AppEventsLogger instance to log events through.,static AppEventsLogger
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","newLogger(Context context, AccessToken accessToken)",Build an AppEventsLogger instance to log events through.,static AppEventsLogger
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","newLogger(Context context, java.lang.String applicationId)",Build an AppEventsLogger instance to log events that are attributed to the application but not to any particular Session.,static AppEventsLogger
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","newLogger(Context context, java.lang.String applicationId, AccessToken accessToken)",Build an AppEventsLogger instance to log events through.,static AppEventsLogger
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",onContextStop(),Call this when the consuming Activity/Fragment receives an onStop() callback in order to persist any outstanding events to disk so they may be flushed at a later time.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",setFlushBehavior(AppEventsLogger.FlushBehavior flushBehavior),Set the behavior that this AppEventsLogger uses to determine when to flush logged events to the server.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",setInstallReferrer(java.lang.String referrer),N/A,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",setPushNotificationsRegistrationId(java.lang.String registrationId),Sets and sends registration id to register the current app for push notifications.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",setUserData(Bundle userData),Deprecated. ,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","setUserData(java.lang.String email, java.lang.String firstName, java.lang.String lastName, java.lang.String phone, java.lang.String dateOfBirth, java.lang.String gender, java.lang.String city, java.lang.String state, java.lang.String zip, java.lang.String country)",Sets user data to associate with all app events.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ",setUserID(java.lang.String userID),Sets a user id to associate with all app events.,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","updateUserProperties(Bundle parameters, GraphRequest.Callback callback)",N/A,static void
com.facebook.appevents.AppEventsLogger," The AppEventsLogger class allows the developer to log various types of events back to Facebook. In order to log events, the app must create an instance of this class via a newLogger method, and then call the various ""log"" methods off of that.  This client-side event logging is then available through Facebook App Insights and for use with Facebook Ads conversion tracking and optimization.  The AppEventsLogger class has a few related roles:  Logging predefined and application-defined events to Facebook App Insights with a numeric value to sum across a large number of events, and an optional set of key/value parameters that define ""segments"" for this event (e.g., 'purchaserStatus' : 'frequent', or 'gamerLevel' : 'intermediate'). These events may also be used for ads conversion tracking, optimization, and other ads related targeting in the future.  Methods that control the way in which events are flushed out to the Facebook servers.  Here are some important characteristics of the logging mechanism provided by AppEventsLogger:  Events are not sent immediately when logged. They're cached and flushed out to the Facebook servers in a number of situations: when an event count threshold is passed (currently 100 logged events).when a time threshold is passed (currently 15 seconds).when an app has gone to background and is then brought back to the foreground. Events will be accumulated when the app is in a disconnected state, and sent when the connection is restored and one of the above 'flush' conditions are met.  The AppEventsLogger class is intended to be used from the thread it was created on. Multiple AppEventsLoggers may be created on other threads if desired.  The developer can call the setFlushBehavior method to force the flushing of events to only occur on an explicit call to the `flush` method.  The developer can turn on console debug output for event logging and flushing to the server by calling FacebookSdk.addLoggingBehavior(LoggingBehavior.APP_EVENTS);  Some things to note when logging events:  There is a limit on the number of unique event names an app can use, on the order of 1000.  There is a limit to the number of unique parameter names in the provided parameters that can be used per event, on the order of 25. This is not just for an individual call, but for all invocations for that eventName.  Event names and parameter names must be between 2 and 40 characters, and must consist of alphanumeric characters, _, -, or spaces.  The length of each parameter value can be no more than on the order of 100 characters. ","updateUserProperties(Bundle parameters, java.lang.String applicationID, GraphRequest.Callback callback)",N/A,static void
com.facebook.appevents.AppEventsLogger.FlushBehavior,Controls when an AppEventsLogger sends log events to the server,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static AppEventsLogger.FlushBehavior
com.facebook.appevents.AppEventsLogger.FlushBehavior,Controls when an AppEventsLogger sends log events to the server,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static AppEventsLogger.FlushBehavior[]
com.facebook.appevents.AppEventsLogger.ProductAvailability,Product availability for Product Catalog product item update,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static AppEventsLogger.ProductAvailability
com.facebook.appevents.AppEventsLogger.ProductAvailability,Product availability for Product Catalog product item update,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static AppEventsLogger.ProductAvailability[]
com.facebook.appevents.AppEventsLogger.ProductCondition,Product condition for Product Catalog product item update,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static AppEventsLogger.ProductCondition
com.facebook.appevents.AppEventsLogger.ProductCondition,Product condition for Product Catalog product item update,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static AppEventsLogger.ProductCondition[]
com.facebook.appevents.AppEventsManager,Start AppEvents functionality.,start(),Start AppEvents functionality.,static void
com.facebook.share.model.AppGroupCreationContent,Describes the content that will be displayed by the AppGroupCreationDialog,describeContents(),N/A,int
com.facebook.share.model.AppGroupCreationContent,Describes the content that will be displayed by the AppGroupCreationDialog,getAppGroupPrivacy(),Gets the privacy for the group that will be created,AppGroupCreationContent.AppGroupPrivacy
com.facebook.share.model.AppGroupCreationContent,Describes the content that will be displayed by the AppGroupCreationDialog,getDescription(),Gets the description of the group that will be created.,java.lang.String
com.facebook.share.model.AppGroupCreationContent,Describes the content that will be displayed by the AppGroupCreationDialog,getName(),Gets the name of the group that will be created.,java.lang.String
com.facebook.share.model.AppGroupCreationContent,Describes the content that will be displayed by the AppGroupCreationDialog,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.AppGroupCreationContent.AppGroupPrivacy,Specifies the privacy of a group.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static AppGroupCreationContent.AppGroupPrivacy
com.facebook.share.model.AppGroupCreationContent.AppGroupPrivacy,Specifies the privacy of a group.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static AppGroupCreationContent.AppGroupPrivacy[]
com.facebook.share.model.AppGroupCreationContent.Builder,Builder class for a concrete instance of AppGroupCreationContent,build(),Builds the object.,AppGroupCreationContent
com.facebook.share.model.AppGroupCreationContent.Builder,Builder class for a concrete instance of AppGroupCreationContent,readFrom(AppGroupCreationContent content),Reads the values from a ShareModel into the builder.,AppGroupCreationContent.Builder
com.facebook.share.model.AppGroupCreationContent.Builder,Builder class for a concrete instance of AppGroupCreationContent,setAppGroupPrivacy(AppGroupCreationContent.AppGroupPrivacy privacy),Sets the privacy for the group that will be created,AppGroupCreationContent.Builder
com.facebook.share.model.AppGroupCreationContent.Builder,Builder class for a concrete instance of AppGroupCreationContent,setDescription(java.lang.String description),Sets the description of the group that will be created.,AppGroupCreationContent.Builder
com.facebook.share.model.AppGroupCreationContent.Builder,Builder class for a concrete instance of AppGroupCreationContent,setName(java.lang.String name),Sets the name of the group that will be created.,AppGroupCreationContent.Builder
com.facebook.share.model.AppInviteContent,Deprecated.  AppInvites is deprecated,describeContents(),Deprecated.  AppInvites is deprecated,int
com.facebook.share.model.AppInviteContent,Deprecated.  AppInvites is deprecated,getApplinkUrl(),Deprecated.  AppInvites is deprecated,java.lang.String
com.facebook.share.model.AppInviteContent,Deprecated.  AppInvites is deprecated,getDestination(),Deprecated.  AppInvites is deprecated,AppInviteContent.Builder.Destination
com.facebook.share.model.AppInviteContent,Deprecated.  AppInvites is deprecated,getPreviewImageUrl(),Deprecated.  AppInvites is deprecated,java.lang.String
com.facebook.share.model.AppInviteContent,Deprecated.  AppInvites is deprecated,getPromotionCode(),Deprecated.  AppInvites is deprecated,java.lang.String
com.facebook.share.model.AppInviteContent,Deprecated.  AppInvites is deprecated,getPromotionText(),Deprecated.  AppInvites is deprecated,java.lang.String
com.facebook.share.model.AppInviteContent,Deprecated.  AppInvites is deprecated,"writeToParcel(Parcel out, int flags)",Deprecated.  AppInvites is deprecated,void
com.facebook.share.model.AppInviteContent.Builder,Deprecated.  AppInvites is deprecated,build(),Deprecated.  AppInvites is deprecated,AppInviteContent
com.facebook.share.model.AppInviteContent.Builder,Deprecated.  AppInvites is deprecated,readFrom(AppInviteContent content),Deprecated.  AppInvites is deprecated,AppInviteContent.Builder
com.facebook.share.model.AppInviteContent.Builder,Deprecated.  AppInvites is deprecated,setApplinkUrl(java.lang.String applinkUrl),Deprecated.  AppInvites is deprecated,AppInviteContent.Builder
com.facebook.share.model.AppInviteContent.Builder,Deprecated.  AppInvites is deprecated,setDestination(AppInviteContent.Builder.Destination destination),Deprecated.  AppInvites is deprecated,AppInviteContent.Builder
com.facebook.share.model.AppInviteContent.Builder,Deprecated.  AppInvites is deprecated,setPreviewImageUrl(java.lang.String previewImageUrl),Deprecated.  AppInvites is deprecated,AppInviteContent.Builder
com.facebook.share.model.AppInviteContent.Builder,Deprecated.  AppInvites is deprecated,"setPromotionDetails(java.lang.String promotionText, java.lang.String promotionCode)",Deprecated.  AppInvites is deprecated,AppInviteContent.Builder
com.facebook.share.model.AppInviteContent.Builder.Destination,Deprecated.  AppInvites is deprecated,equalsName(java.lang.String otherName),Deprecated. ,boolean
com.facebook.share.model.AppInviteContent.Builder.Destination,Deprecated.  AppInvites is deprecated,toString(),Deprecated. ,java.lang.String
com.facebook.share.model.AppInviteContent.Builder.Destination,Deprecated.  AppInvites is deprecated,valueOf(java.lang.String name),Deprecated. ,static AppInviteContent.Builder.Destination
com.facebook.share.model.AppInviteContent.Builder.Destination,Deprecated.  AppInvites is deprecated,values(),Deprecated. ,static AppInviteContent.Builder.Destination[]
com.facebook.share.widget.AppInviteDialog,Deprecated.  AppInvites is deprecated,canShow(),Deprecated.  AppInvites is deprecated,static boolean
com.facebook.share.widget.AppInviteDialog,Deprecated.  AppInvites is deprecated,createBaseAppCall(),Deprecated. ,protected com.facebook.internal.AppCall
com.facebook.share.widget.AppInviteDialog,Deprecated.  AppInvites is deprecated,getOrderedModeHandlers(),Deprecated. ,protected java.util.List<com.facebook.internal.FacebookDialogBase.ModeHandler>
com.facebook.share.widget.AppInviteDialog,Deprecated.  AppInvites is deprecated,"registerCallbackImpl(com.facebook.internal.CallbackManagerImpl callbackManager, FacebookCallback<AppInviteDialog.Result> callback)",Deprecated. ,protected void
com.facebook.share.widget.AppInviteDialog,Deprecated.  AppInvites is deprecated,"show(Activity activity, AppInviteContent appInviteContent)",Deprecated.  AppInvites is deprecated,static void
com.facebook.share.widget.AppInviteDialog,Deprecated.  AppInvites is deprecated,"show(android.app.Fragment fragment, AppInviteContent appInviteContent)",Deprecated.  AppInvites is deprecated,static void
com.facebook.share.widget.AppInviteDialog,Deprecated.  AppInvites is deprecated,show(AppInviteContent content),Deprecated.  AppInvites is deprecated,void
com.facebook.share.widget.AppInviteDialog,Deprecated.  AppInvites is deprecated,"show(Fragment fragment, AppInviteContent appInviteContent)",Deprecated.  AppInvites is deprecated,static void
com.facebook.share.widget.AppInviteDialog.Result,Deprecated.  AppInvites is deprecated,getData(),Deprecated. ,Bundle
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources",createFromActivity(Activity activity),Parses out any app link data from the Intent of the Activity passed in.,static AppLinkData
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources",createFromAlApplinkData(Intent intent),Parses out any app link data from the Intent passed in.,static AppLinkData
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources","fetchDeferredAppLinkData(Context context, AppLinkData.CompletionHandler completionHandler)",Asynchronously fetches app link information that might have been stored for use after installation of the app,static void
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources","fetchDeferredAppLinkData(Context context, java.lang.String applicationId, AppLinkData.CompletionHandler completionHandler)",Asynchronously fetches app link information that might have been stored for use after installation of the app,static void
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources",getAppLinkData(),Returns the data of al_applink_data which is defined in https://developers.facebook.com/docs/applinks/navigation-protocol,JSONObject
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources",getArgumentBundle(),The full set of arguments for this app link.,Bundle
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources",getPromotionCode(),Returns the promotion code for this App Link.,java.lang.String
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources",getRef(),Returns the ref for this App Link.,java.lang.String
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources",getRefererData(),The referer data associated with the app link.,Bundle
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources",getTargetUri(),Returns the target uri for this App Link.,Uri
com.facebook.applinks.AppLinkData,"Class to encapsulate an app link, and provide methods for constructing the data from various sources",isAutoAppLink(),N/A,boolean
AppLinkData.CompletionHandler,Interface to asynchronously receive AppLinkData after it has been fetched.,onDeferredAppLinkDataFetched(AppLinkData appLinkData),This method is called when deferred app link data has been fetched.,void
com.facebook.applinks.AppLinks,N/A,N/A,N/A,N/A
CallbackManager,The CallbackManager manages the callbacks into the FacebookSdk from an Activity's or Fragment's onActivityResult() method.,"onActivityResult(int requestCode, int resultCode, Intent data)",The method that should be called from the Activity's or Fragment's onActivityResult method.,boolean
com.facebook.CallbackManager.Factory,The factory class for the CallbackManager.,create(),Creates an instance of CallbackManager.,static CallbackManager
com.facebook.share.model.CameraEffectArguments,This class represents a set of Arguments that are used to configure an Effect in the Camera.,describeContents(),N/A,int
com.facebook.share.model.CameraEffectArguments,This class represents a set of Arguments that are used to configure an Effect in the Camera.,get(java.lang.String key),N/A,java.lang.Object
com.facebook.share.model.CameraEffectArguments,This class represents a set of Arguments that are used to configure an Effect in the Camera.,getString(java.lang.String key),Returns the value of a String argument associated with the passed in key.,java.lang.String
com.facebook.share.model.CameraEffectArguments,This class represents a set of Arguments that are used to configure an Effect in the Camera.,getStringArray(java.lang.String key),N/A,java.lang.String[]
com.facebook.share.model.CameraEffectArguments,This class represents a set of Arguments that are used to configure an Effect in the Camera.,keySet(),The set of keys that have been set in this instance of CameraEffectArguments,java.util.Set<java.lang.String>
com.facebook.share.model.CameraEffectArguments,This class represents a set of Arguments that are used to configure an Effect in the Camera.,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.CameraEffectArguments.Builder,Builder for the CameraEffectArguments class.,build(),Creates a new instance of CameraEffectArguments with the arguments that have been set in this Builder instance.,CameraEffectArguments
com.facebook.share.model.CameraEffectArguments.Builder,Builder for the CameraEffectArguments class.,"putArgument(java.lang.String key, java.lang.String value)",Sets the passed in value for the passed in key.,CameraEffectArguments.Builder
com.facebook.share.model.CameraEffectArguments.Builder,Builder for the CameraEffectArguments class.,"putArgument(java.lang.String key, java.lang.String[] arrayValue)",Sets the passed in value for the passed in key.,CameraEffectArguments.Builder
com.facebook.share.model.CameraEffectArguments.Builder,Builder for the CameraEffectArguments class.,readFrom(CameraEffectArguments model),Reads the values from a ShareModel into the builder.,CameraEffectArguments.Builder
com.facebook.share.model.CameraEffectArguments.Builder,Builder for the CameraEffectArguments class.,readFrom(Parcel parcel),Reads the values from a ShareModel into the builder.,CameraEffectArguments.Builder
com.facebook.share.model.CameraEffectTextures,This class represents the textures that are used by an Effect in the Camera.,describeContents(),N/A,int
com.facebook.share.model.CameraEffectTextures,This class represents the textures that are used by an Effect in the Camera.,get(java.lang.String key),N/A,java.lang.Object
com.facebook.share.model.CameraEffectTextures,This class represents the textures that are used by an Effect in the Camera.,getTextureBitmap(java.lang.String key),N/A,Bitmap
com.facebook.share.model.CameraEffectTextures,This class represents the textures that are used by an Effect in the Camera.,getTextureUri(java.lang.String key),N/A,Uri
com.facebook.share.model.CameraEffectTextures,This class represents the textures that are used by an Effect in the Camera.,keySet(),N/A,java.util.Set<java.lang.String>
com.facebook.share.model.CameraEffectTextures,This class represents the textures that are used by an Effect in the Camera.,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.CameraEffectTextures.Builder,Builder for the CameraEffectTextures class.,build(),Builds the object.,CameraEffectTextures
com.facebook.share.model.CameraEffectTextures.Builder,Builder for the CameraEffectTextures class.,"putTexture(java.lang.String key, Bitmap texture)",N/A,CameraEffectTextures.Builder
com.facebook.share.model.CameraEffectTextures.Builder,Builder for the CameraEffectTextures class.,"putTexture(java.lang.String key, Uri textureUrl)",N/A,CameraEffectTextures.Builder
com.facebook.share.model.CameraEffectTextures.Builder,Builder for the CameraEffectTextures class.,readFrom(CameraEffectTextures model),Reads the values from a ShareModel into the builder.,CameraEffectTextures.Builder
com.facebook.share.model.CameraEffectTextures.Builder,Builder for the CameraEffectTextures class.,readFrom(Parcel parcel),Reads the values from a ShareModel into the builder.,CameraEffectTextures.Builder
com.facebook.appevents.codeless.CodelessLoggingEventListener,N/A,"getOnClickListener(com.facebook.appevents.codeless.internal.EventBinding mapping, View rootView, View hostView)",N/A,static CodelessLoggingEventListener.AutoLoggingOnClickListener
com.facebook.appevents.codeless.CodelessLoggingEventListener,N/A,"getOnItemClickListener(com.facebook.appevents.codeless.internal.EventBinding mapping, View rootView, AdapterView hostView)",N/A,static CodelessLoggingEventListener.AutoLoggingOnItemClickListener
com.facebook.appevents.codeless.CodelessLoggingEventListener.AutoLoggingOnClickListener,N/A,getSupportCodelessLogging(),N/A,boolean
com.facebook.appevents.codeless.CodelessLoggingEventListener.AutoLoggingOnClickListener,N/A,onClick(View view),N/A,void
com.facebook.appevents.codeless.CodelessLoggingEventListener.AutoLoggingOnItemClickListener,N/A,getSupportCodelessLogging(),N/A,boolean
com.facebook.appevents.codeless.CodelessLoggingEventListener.AutoLoggingOnItemClickListener,N/A,"onItemClick(<any> parent, View view, int position, long id)",N/A,void
com.facebook.appevents.codeless.CodelessManager,N/A,disable(),N/A,static void
com.facebook.appevents.codeless.CodelessManager,N/A,enable(),N/A,static void
com.facebook.appevents.codeless.CodelessManager,N/A,onActivityDestroyed(Activity activity),N/A,static void
com.facebook.appevents.codeless.CodelessManager,N/A,onActivityPaused(Activity activity),N/A,static void
com.facebook.appevents.codeless.CodelessManager,N/A,onActivityResumed(Activity activity),N/A,static void
com.facebook.share.widget.CreateAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,canShow(),Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,static boolean
com.facebook.share.widget.CreateAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,createBaseAppCall(),Deprecated. ,protected com.facebook.internal.AppCall
com.facebook.share.widget.CreateAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,getOrderedModeHandlers(),Deprecated. ,protected java.util.List<com.facebook.internal.FacebookDialogBase.ModeHandler>
com.facebook.share.widget.CreateAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,"registerCallbackImpl(com.facebook.internal.CallbackManagerImpl callbackManager, FacebookCallback<CreateAppGroupDialog.Result> callback)",Deprecated. ,protected void
com.facebook.share.widget.CreateAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,"show(Activity activity, AppGroupCreationContent appGroupCreationContent)",Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,static void
com.facebook.share.widget.CreateAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,"show(android.app.Fragment fragment, AppGroupCreationContent appGroupCreationContent)",Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,static void
com.facebook.share.widget.CreateAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,"show(Fragment fragment, AppGroupCreationContent appGroupCreationContent)",Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,static void
com.facebook.share.widget.CreateAppGroupDialog.Result,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,getId(),Deprecated. ,java.lang.String
com.facebook.CurrentAccessTokenExpirationBroadcastReceiver,This class is notified when the current AccessToken has expired.,"onReceive(Context context, Intent intent)",N/A,void
com.facebook.places.model.CurrentPlaceFeedbackRequestParams,Describes the parameters used to create a current place feedback request with PlaceManager,getPlaceId(),Gets the place ID associated with the feedback request.,java.lang.String
com.facebook.places.model.CurrentPlaceFeedbackRequestParams,Describes the parameters used to create a current place feedback request with PlaceManager,getTracking(),Gets the tracking ID.,java.lang.String
com.facebook.places.model.CurrentPlaceFeedbackRequestParams,Describes the parameters used to create a current place feedback request with PlaceManager,wasHere(),Indicates whether the user was actually located at the place specified by getPlaceId().,java.lang.Boolean
com.facebook.places.model.CurrentPlaceFeedbackRequestParams.Builder,Describes the builder to create a CurrentPlaceFeedbackRequestParams,build(),Returns the CurrentPlaceFeedbackRequestParams,CurrentPlaceFeedbackRequestParams
com.facebook.places.model.CurrentPlaceFeedbackRequestParams.Builder,Describes the builder to create a CurrentPlaceFeedbackRequestParams,setPlaceId(java.lang.String placeId),Sets the place ID for the feedback request.,CurrentPlaceFeedbackRequestParams.Builder
com.facebook.places.model.CurrentPlaceFeedbackRequestParams.Builder,Describes the builder to create a CurrentPlaceFeedbackRequestParams,setTracking(java.lang.String tracking),Sets the tracking ID.,CurrentPlaceFeedbackRequestParams.Builder
com.facebook.places.model.CurrentPlaceFeedbackRequestParams.Builder,Describes the builder to create a CurrentPlaceFeedbackRequestParams,setWasHere(boolean wasHere),Indicates whether the user was actually located at the place specified by setPlaceId().,CurrentPlaceFeedbackRequestParams.Builder
com.facebook.places.model.CurrentPlaceRequestParams,Describes the parameters of the current place request. Use PlaceManager to create a new current place request.,getFields(),The fields to be returned in the response.,java.util.Set<java.lang.String>
com.facebook.places.model.CurrentPlaceRequestParams,Describes the parameters of the current place request. Use PlaceManager to create a new current place request.,getLimit(),The maximum number of places to be returned.,int
com.facebook.places.model.CurrentPlaceRequestParams,Describes the parameters of the current place request. Use PlaceManager to create a new current place request.,getLocation(),The current location of the user.,Location
com.facebook.places.model.CurrentPlaceRequestParams,Describes the parameters of the current place request. Use PlaceManager to create a new current place request.,getMinConfidenceLevel(),Get the minimum confidence level of places to return.,CurrentPlaceRequestParams.ConfidenceLevel
com.facebook.places.model.CurrentPlaceRequestParams,Describes the parameters of the current place request. Use PlaceManager to create a new current place request.,getScanMode(),The scan mode used when generating the current place request.,CurrentPlaceRequestParams.ScanMode
com.facebook.places.model.CurrentPlaceRequestParams.Builder,Describes the builder to create a CurrentPlaceRequestParams,addField(java.lang.String field),Specifies a field to be added to the response.,CurrentPlaceRequestParams.Builder
com.facebook.places.model.CurrentPlaceRequestParams.Builder,Describes the builder to create a CurrentPlaceRequestParams,build(),Returns the CurrentPlaceRequestParams,CurrentPlaceRequestParams
com.facebook.places.model.CurrentPlaceRequestParams.Builder,Describes the builder to create a CurrentPlaceRequestParams,setLimit(int limit),Sets the maximum number of results to be returned.,CurrentPlaceRequestParams.Builder
com.facebook.places.model.CurrentPlaceRequestParams.Builder,Describes the builder to create a CurrentPlaceRequestParams,setLocation(Location location),Sets the current user location.,CurrentPlaceRequestParams.Builder
com.facebook.places.model.CurrentPlaceRequestParams.Builder,Describes the builder to create a CurrentPlaceRequestParams,setMinConfidenceLevel(CurrentPlaceRequestParams.ConfidenceLevel minConfidenceLevel),The minimum confidence level of suggestions to return.,CurrentPlaceRequestParams.Builder
com.facebook.places.model.CurrentPlaceRequestParams.Builder,Describes the builder to create a CurrentPlaceRequestParams,setScanMode(CurrentPlaceRequestParams.ScanMode scanMode),Sets the scan mode to be used.,CurrentPlaceRequestParams.Builder
com.facebook.places.model.CurrentPlaceRequestParams.ConfidenceLevel,Describes the confidence level of the current place response. A place with field CONFIDENCE_LEVEL set to HIGH indicates that there is a high likelihood that the user is currently located at that place.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static CurrentPlaceRequestParams.ConfidenceLevel
com.facebook.places.model.CurrentPlaceRequestParams.ConfidenceLevel,Describes the confidence level of the current place response. A place with field CONFIDENCE_LEVEL set to HIGH indicates that there is a high likelihood that the user is currently located at that place.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static CurrentPlaceRequestParams.ConfidenceLevel[]
com.facebook.places.model.CurrentPlaceRequestParams.ScanMode,Describes the location scanning behavior when creating a new current place request.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static CurrentPlaceRequestParams.ScanMode
com.facebook.places.model.CurrentPlaceRequestParams.ScanMode,Describes the location scanning behavior when creating a new current place request.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static CurrentPlaceRequestParams.ScanMode[]
com.facebook.CustomTabActivity,N/A,"onActivityResult(int requestCode, int resultCode, Intent data)",N/A,protected void
com.facebook.CustomTabActivity,N/A,onCreate(Bundle savedInstanceState),N/A,protected void
com.facebook.CustomTabActivity,N/A,onDestroy(),N/A,protected void
com.facebook.login.CustomTabLoginMethodHandler,N/A,"addExtraParameters(Bundle parameters, LoginClient.Request request)",N/A,protected Bundle
com.facebook.login.CustomTabLoginMethodHandler,N/A,"addLoggingExtra(java.lang.String key, java.lang.Object value)",N/A,protected void
com.facebook.login.CustomTabLoginMethodHandler,N/A,"createAccessTokenFromWebBundle(java.util.Collection<java.lang.String> requestedPermissions, Bundle bundle, AccessTokenSource source, java.lang.String applicationId)",N/A,static AccessToken
com.facebook.login.CustomTabLoginMethodHandler,N/A,describeContents(),N/A,int
com.facebook.login.CustomTabLoginMethodHandler,N/A,getClientState(java.lang.String authId),N/A,protected java.lang.String
com.facebook.login.CustomTabLoginMethodHandler,N/A,getParameters(LoginClient.Request request),N/A,protected Bundle
com.facebook.login.CustomTabLoginMethodHandler,N/A,getRedirectUrl(),N/A,protected java.lang.String
com.facebook.login.CustomTabLoginMethodHandler,N/A,getSSODevice(),N/A,protected java.lang.String
com.facebook.login.CustomTabLoginMethodHandler,N/A,logWebLoginCompleted(java.lang.String e2e),N/A,protected void
com.facebook.login.CustomTabLoginMethodHandler,N/A,"onComplete(LoginClient.Request request, Bundle values, FacebookException error)",N/A,protected void
com.facebook.login.CustomTabLoginMethodHandler,N/A,putChallengeParam(JSONObject param),N/A,protected void
com.facebook.login.CustomTabLoginMethodHandler,N/A,"writeToParcel(Parcel dest, int flags)",N/A,void
com.facebook.CustomTabMainActivity,N/A,onCreate(Bundle savedInstanceState),N/A,protected void
com.facebook.CustomTabMainActivity,N/A,onNewIntent(Intent intent),N/A,protected void
com.facebook.CustomTabMainActivity,N/A,onResume(),N/A,protected void
com.facebook.login.DefaultAudience,"Certain operations such as publishing a status or publishing a photo require an audience. When the user grants an application permission to perform a publish operation, a default audience is selected as the publication ceiling for the application. This enumerated value allows the application to select which audience to ask the user to grant publish permission for.",getNativeProtocolAudience(),N/A,java.lang.String
com.facebook.login.DefaultAudience,"Certain operations such as publishing a status or publishing a photo require an audience. When the user grants an application permission to perform a publish operation, a default audience is selected as the publication ceiling for the application. This enumerated value allows the application to select which audience to ask the user to grant publish permission for.",valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static DefaultAudience
com.facebook.login.DefaultAudience,"Certain operations such as publishing a status or publishing a photo require an audience. When the user grants an application permission to perform a publish operation, a default audience is selected as the publication ceiling for the application. This enumerated value allows the application to select which audience to ask the user to grant publish permission for.",values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static DefaultAudience[]
com.facebook.login.DeviceAuthDialog,N/A,getLayoutResId(boolean isSmartLogin),N/A,protected int
com.facebook.login.DeviceAuthDialog,N/A,initializeContentView(boolean isSmartLogin),N/A,protected View
com.facebook.login.DeviceAuthDialog,N/A,onCancel(),N/A,protected void
com.facebook.login.DeviceAuthDialog,N/A,onCreateDialog(Bundle savedInstanceState),N/A,Dialog
com.facebook.login.DeviceAuthDialog,N/A,"onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)",N/A,View
com.facebook.login.DeviceAuthDialog,N/A,onDestroy(),N/A,void
com.facebook.login.DeviceAuthDialog,N/A,onDismiss(DialogInterface dialog),N/A,void
com.facebook.login.DeviceAuthDialog,N/A,onError(FacebookException ex),N/A,protected void
com.facebook.login.DeviceAuthDialog,N/A,onSaveInstanceState(Bundle outState),N/A,void
com.facebook.login.DeviceAuthDialog,N/A,startLogin(LoginClient.Request request),N/A,void
com.facebook.login.widget.DeviceLoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID and client token to be specified in the AndroidManifest.xml.,getDeviceRedirectUri(),Get the previously set uri that will be used to redirect the user to after they complete the device login flow on the external device.,Uri
com.facebook.login.widget.DeviceLoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID and client token to be specified in the AndroidManifest.xml.,getNewLoginClickListener(),N/A,protected LoginButton.LoginClickListener
com.facebook.login.widget.DeviceLoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID and client token to be specified in the AndroidManifest.xml.,setDeviceRedirectUri(Uri uri),Set uri to redirect the user to after they complete the device login flow on the external device.,void
com.facebook.login.DeviceLoginManager,This class manages device login and permissions for Facebook.,createLoginRequest(java.util.Collection<java.lang.String> permissions),N/A,protected LoginClient.Request
com.facebook.login.DeviceLoginManager,This class manages device login and permissions for Facebook.,getDeviceAuthTargetUserId(),"Get the target user id for the device request, if any.",java.lang.String
com.facebook.login.DeviceLoginManager,This class manages device login and permissions for Facebook.,getDeviceRedirectUri(),Get the previously set uri that will be used to redirect the user to after they complete the device login flow on the external device.,Uri
com.facebook.login.DeviceLoginManager,This class manages device login and permissions for Facebook.,getInstance(),Getter for the login manager.,static DeviceLoginManager
com.facebook.login.DeviceLoginManager,This class manages device login and permissions for Facebook.,setDeviceAuthTargetUserId(java.lang.String targetUserId),Optional.,void
com.facebook.login.DeviceLoginManager,This class manages device login and permissions for Facebook.,setDeviceRedirectUri(Uri uri),Set uri to redirect the user to after they complete the device login flow on the external device.,void
com.facebook.share.widget.DeviceShareButton,A button to share content on Facebook from a device. Tapping the receiver will invoke the DeviceShareDialog with the attached shareContent.,"configureButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)",N/A,protected void
com.facebook.share.widget.DeviceShareButton,A button to share content on Facebook from a device. Tapping the receiver will invoke the DeviceShareDialog with the attached shareContent.,getDefaultRequestCode(),N/A,protected int
com.facebook.share.widget.DeviceShareButton,A button to share content on Facebook from a device. Tapping the receiver will invoke the DeviceShareDialog with the attached shareContent.,getDefaultStyleResource(),N/A,protected int
com.facebook.share.widget.DeviceShareButton,A button to share content on Facebook from a device. Tapping the receiver will invoke the DeviceShareDialog with the attached shareContent.,getRequestCode(),Returns the request code used for this Button.,int
com.facebook.share.widget.DeviceShareButton,A button to share content on Facebook from a device. Tapping the receiver will invoke the DeviceShareDialog with the attached shareContent.,getShareContent(),Returns the share content from the button.,ShareContent
com.facebook.share.widget.DeviceShareButton,A button to share content on Facebook from a device. Tapping the receiver will invoke the DeviceShareDialog with the attached shareContent.,getShareOnClickListener(),N/A,protected OnClickListener
com.facebook.share.widget.DeviceShareButton,A button to share content on Facebook from a device. Tapping the receiver will invoke the DeviceShareDialog with the attached shareContent.,"registerCallback(CallbackManager callbackManager, FacebookCallback<DeviceShareDialog.Result> callback)",Allows registration of a callback for when the share completes.,void
com.facebook.share.widget.DeviceShareButton,A button to share content on Facebook from a device. Tapping the receiver will invoke the DeviceShareDialog with the attached shareContent.,"registerCallback(CallbackManager callbackManager, FacebookCallback<DeviceShareDialog.Result> callback, int requestCode)",Allows registration of a callback for when the share completes.,void
com.facebook.share.widget.DeviceShareButton,A button to share content on Facebook from a device. Tapping the receiver will invoke the DeviceShareDialog with the attached shareContent.,setEnabled(boolean enabled),N/A,void
com.facebook.share.widget.DeviceShareButton,A button to share content on Facebook from a device. Tapping the receiver will invoke the DeviceShareDialog with the attached shareContent.,setShareContent(ShareContent shareContent),Sets the share content on the button.,void
com.facebook.share.DeviceShareDialog,Constructs a new DeviceShareDialog.,"canShowImpl(ShareContent content, java.lang.Object mode)",N/A,protected boolean
com.facebook.share.DeviceShareDialog,Constructs a new DeviceShareDialog.,createBaseAppCall(),N/A,protected com.facebook.internal.AppCall
com.facebook.share.DeviceShareDialog,Constructs a new DeviceShareDialog.,getOrderedModeHandlers(),N/A,protected java.util.List<com.facebook.internal.FacebookDialogBase.ModeHandler>
com.facebook.share.DeviceShareDialog,Constructs a new DeviceShareDialog.,"registerCallbackImpl(com.facebook.internal.CallbackManagerImpl callbackManager, FacebookCallback<DeviceShareDialog.Result> callback)",N/A,protected void
com.facebook.share.DeviceShareDialog,Constructs a new DeviceShareDialog.,"showImpl(ShareContent content, java.lang.Object mode)",N/A,protected void
com.facebook.appevents.eventdeactivation.EventDeactivationManager,N/A,enable(),N/A,static void
com.facebook.appevents.eventdeactivation.EventDeactivationManager,N/A,"processDeprecatedParameters(java.util.Map<java.lang.String,java.lang.String> parameters, java.lang.String eventName)",N/A,static void
com.facebook.appevents.eventdeactivation.EventDeactivationManager,N/A,processEvents(java.util.List<AppEvent> events),N/A,static void
com.facebook.FacebookActivity,"This Activity is a necessary part of the overall Facebook SDK, but is not meant to be used directly. Add this Activity to your AndroidManifest.xml to ensure proper handling of Facebook SDK features.  <activity android:name=""com.facebook.FacebookActivity"" android:theme=""@android:style/Theme.Translucent.NoTitleBar"" android:configChanges=""keyboard|keyboardHidden|screenLayout|screenSize|orientation"" android:label=""@string/app_name"" />  Do not start this activity directly.",getCurrentFragment(),N/A,Fragment
com.facebook.FacebookActivity,"This Activity is a necessary part of the overall Facebook SDK, but is not meant to be used directly. Add this Activity to your AndroidManifest.xml to ensure proper handling of Facebook SDK features.  <activity android:name=""com.facebook.FacebookActivity"" android:theme=""@android:style/Theme.Translucent.NoTitleBar"" android:configChanges=""keyboard|keyboardHidden|screenLayout|screenSize|orientation"" android:label=""@string/app_name"" />  Do not start this activity directly.",getFragment(),N/A,protected Fragment
com.facebook.FacebookActivity,"This Activity is a necessary part of the overall Facebook SDK, but is not meant to be used directly. Add this Activity to your AndroidManifest.xml to ensure proper handling of Facebook SDK features.  <activity android:name=""com.facebook.FacebookActivity"" android:theme=""@android:style/Theme.Translucent.NoTitleBar"" android:configChanges=""keyboard|keyboardHidden|screenLayout|screenSize|orientation"" android:label=""@string/app_name"" />  Do not start this activity directly.",onConfigurationChanged(Configuration newConfig),N/A,void
com.facebook.FacebookActivity,"This Activity is a necessary part of the overall Facebook SDK, but is not meant to be used directly. Add this Activity to your AndroidManifest.xml to ensure proper handling of Facebook SDK features.  <activity android:name=""com.facebook.FacebookActivity"" android:theme=""@android:style/Theme.Translucent.NoTitleBar"" android:configChanges=""keyboard|keyboardHidden|screenLayout|screenSize|orientation"" android:label=""@string/app_name"" />  Do not start this activity directly.",onCreate(Bundle savedInstanceState),N/A,void
com.facebook.applinks.FacebookAppLinkResolver,Provides an implementation for the AppLinkResolver interface that uses the Facebook App Link index to resolve App Links given a URL. It also provides an additional helper method that can resolve multiple App Links in a single call.,getAppLinkFromUrlInBackground(Uri uri),Asynchronously resolves App Link data for the passed in Uri,<any>
com.facebook.applinks.FacebookAppLinkResolver,Provides an implementation for the AppLinkResolver interface that uses the Facebook App Link index to resolve App Links given a URL. It also provides an additional helper method that can resolve multiple App Links in a single call.,getAppLinkFromUrlsInBackground(java.util.List<Uri> uris),Asynchronously resolves App Link data for multiple URLs,<any>
com.facebook.FacebookBroadcastReceiver,"This class implements a simple BroadcastReceiver designed to listen for broadcast notifications from the Facebook app. At present, these notifications consistent of success/failure notifications for photo upload operations that happen in the background.  Applications may subclass this class and register it in their AndroidManifest.xml. The receiver is listening the com.facebook.platform.AppCallResultBroadcast action.","onFailedAppCall(java.lang.String appCallId, java.lang.String action, Bundle extras)",Invoked when the operation failed to complete.,protected void
com.facebook.FacebookBroadcastReceiver,"This class implements a simple BroadcastReceiver designed to listen for broadcast notifications from the Facebook app. At present, these notifications consistent of success/failure notifications for photo upload operations that happen in the background.  Applications may subclass this class and register it in their AndroidManifest.xml. The receiver is listening the com.facebook.platform.AppCallResultBroadcast action.","onReceive(Context context, Intent intent)",N/A,void
com.facebook.FacebookBroadcastReceiver,"This class implements a simple BroadcastReceiver designed to listen for broadcast notifications from the Facebook app. At present, these notifications consistent of success/failure notifications for photo upload operations that happen in the background.  Applications may subclass this class and register it in their AndroidManifest.xml. The receiver is listening the com.facebook.platform.AppCallResultBroadcast action.","onSuccessfulAppCall(java.lang.String appCallId, java.lang.String action, Bundle extras)",Invoked when the operation was completed successfully.,protected void
com.facebook.FacebookButtonBase,A base class for a facebook button.,callExternalOnClickListener(View v),N/A,protected void
com.facebook.FacebookButtonBase,A base class for a facebook button.,"configureButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)",N/A,protected void
com.facebook.FacebookButtonBase,A base class for a facebook button.,getActivity(),N/A,protected Activity
com.facebook.FacebookButtonBase,A base class for a facebook button.,getCompoundPaddingLeft(),N/A,int
com.facebook.FacebookButtonBase,A base class for a facebook button.,getCompoundPaddingRight(),N/A,int
com.facebook.FacebookButtonBase,A base class for a facebook button.,getDefaultRequestCode(),N/A,protected abstract int
com.facebook.FacebookButtonBase,A base class for a facebook button.,getDefaultStyleResource(),N/A,protected int
com.facebook.FacebookButtonBase,A base class for a facebook button.,getFragment(),Gets the fragment that contains this control.,Fragment
com.facebook.FacebookButtonBase,A base class for a facebook button.,getNativeFragment(),Gets the fragment that contains this control.,android.app.Fragment
com.facebook.FacebookButtonBase,A base class for a facebook button.,getRequestCode(),Returns the request code used for this Button.,int
com.facebook.FacebookButtonBase,A base class for a facebook button.,measureTextWidth(java.lang.String text),N/A,protected int
com.facebook.FacebookButtonBase,A base class for a facebook button.,onAttachedToWindow(),N/A,protected void
com.facebook.FacebookButtonBase,A base class for a facebook button.,onDraw(Canvas canvas),N/A,protected void
com.facebook.FacebookButtonBase,A base class for a facebook button.,setFragment(android.app.Fragment fragment),Sets the fragment that contains this control.,void
com.facebook.FacebookButtonBase,A base class for a facebook button.,setFragment(Fragment fragment),Sets the fragment that contains this control.,void
com.facebook.FacebookButtonBase,A base class for a facebook button.,setInternalOnClickListener(OnClickListener l),N/A,protected void
com.facebook.FacebookButtonBase,A base class for a facebook button.,setOnClickListener(OnClickListener l),N/A,void
FacebookCallback,A callback class for the Facebook SDK.,onCancel(),Called when the dialog is canceled.,void
FacebookCallback,A callback class for the Facebook SDK.,onError(FacebookException error),Called when the dialog finishes with an error.,void
FacebookCallback,A callback class for the Facebook SDK.,onSuccess(RESULT result),Called when the dialog completes without error.,void
com.facebook.FacebookContentProvider,"Implements a  ContentProvider that can be used to provide binary attachments (e.g., images) to calls made via FacebookDialog. Note that this ContentProvider is only necessary if an application wishes to attach images, etc., that are stored in memory and do not have another way to be referenced by a content URI. For images obtained from, e.g., the Camera or Gallery, that already have a content URI associated with them, use of this class is not necessary. If an application wishes to attach images that are stored in-memory within the application, this content provider must be listed in the application's AndroidManifest.xml, and it should be named according to the pattern ""com.facebook.app.FacebookContentProvider{FACEBOOK_APP_ID}"". See the getContentProviderName method. ","delete(Uri uri, java.lang.String s, java.lang.String[] strings)",N/A,int
com.facebook.FacebookContentProvider,"Implements a  ContentProvider that can be used to provide binary attachments (e.g., images) to calls made via FacebookDialog. Note that this ContentProvider is only necessary if an application wishes to attach images, etc., that are stored in memory and do not have another way to be referenced by a content URI. For images obtained from, e.g., the Camera or Gallery, that already have a content URI associated with them, use of this class is not necessary. If an application wishes to attach images that are stored in-memory within the application, this content provider must be listed in the application's AndroidManifest.xml, and it should be named according to the pattern ""com.facebook.app.FacebookContentProvider{FACEBOOK_APP_ID}"". See the getContentProviderName method. ","getAttachmentUrl(java.lang.String applicationId, java.util.UUID callId, java.lang.String attachmentName)",Returns the name of the content provider formatted correctly for constructing URLs.,static java.lang.String
com.facebook.FacebookContentProvider,"Implements a  ContentProvider that can be used to provide binary attachments (e.g., images) to calls made via FacebookDialog. Note that this ContentProvider is only necessary if an application wishes to attach images, etc., that are stored in memory and do not have another way to be referenced by a content URI. For images obtained from, e.g., the Camera or Gallery, that already have a content URI associated with them, use of this class is not necessary. If an application wishes to attach images that are stored in-memory within the application, this content provider must be listed in the application's AndroidManifest.xml, and it should be named according to the pattern ""com.facebook.app.FacebookContentProvider{FACEBOOK_APP_ID}"". See the getContentProviderName method. ",getType(Uri uri),N/A,java.lang.String
com.facebook.FacebookContentProvider,"Implements a  ContentProvider that can be used to provide binary attachments (e.g., images) to calls made via FacebookDialog. Note that this ContentProvider is only necessary if an application wishes to attach images, etc., that are stored in memory and do not have another way to be referenced by a content URI. For images obtained from, e.g., the Camera or Gallery, that already have a content URI associated with them, use of this class is not necessary. If an application wishes to attach images that are stored in-memory within the application, this content provider must be listed in the application's AndroidManifest.xml, and it should be named according to the pattern ""com.facebook.app.FacebookContentProvider{FACEBOOK_APP_ID}"". See the getContentProviderName method. ","insert(Uri uri, ContentValues contentValues)",N/A,Uri
com.facebook.FacebookContentProvider,"Implements a  ContentProvider that can be used to provide binary attachments (e.g., images) to calls made via FacebookDialog. Note that this ContentProvider is only necessary if an application wishes to attach images, etc., that are stored in memory and do not have another way to be referenced by a content URI. For images obtained from, e.g., the Camera or Gallery, that already have a content URI associated with them, use of this class is not necessary. If an application wishes to attach images that are stored in-memory within the application, this content provider must be listed in the application's AndroidManifest.xml, and it should be named according to the pattern ""com.facebook.app.FacebookContentProvider{FACEBOOK_APP_ID}"". See the getContentProviderName method. ",onCreate(),N/A,boolean
com.facebook.FacebookContentProvider,"Implements a  ContentProvider that can be used to provide binary attachments (e.g., images) to calls made via FacebookDialog. Note that this ContentProvider is only necessary if an application wishes to attach images, etc., that are stored in memory and do not have another way to be referenced by a content URI. For images obtained from, e.g., the Camera or Gallery, that already have a content URI associated with them, use of this class is not necessary. If an application wishes to attach images that are stored in-memory within the application, this content provider must be listed in the application's AndroidManifest.xml, and it should be named according to the pattern ""com.facebook.app.FacebookContentProvider{FACEBOOK_APP_ID}"". See the getContentProviderName method. ","openFile(android.net.Uri uri, java.lang.String mode)",N/A,android.os.ParcelFileDescriptor
com.facebook.FacebookContentProvider,"Implements a  ContentProvider that can be used to provide binary attachments (e.g., images) to calls made via FacebookDialog. Note that this ContentProvider is only necessary if an application wishes to attach images, etc., that are stored in memory and do not have another way to be referenced by a content URI. For images obtained from, e.g., the Camera or Gallery, that already have a content URI associated with them, use of this class is not necessary. If an application wishes to attach images that are stored in-memory within the application, this content provider must be listed in the application's AndroidManifest.xml, and it should be named according to the pattern ""com.facebook.app.FacebookContentProvider{FACEBOOK_APP_ID}"". See the getContentProviderName method. ","query(Uri uri, java.lang.String[] strings, java.lang.String s, java.lang.String[] strings2, java.lang.String s2)",N/A,Cursor
com.facebook.FacebookContentProvider,"Implements a  ContentProvider that can be used to provide binary attachments (e.g., images) to calls made via FacebookDialog. Note that this ContentProvider is only necessary if an application wishes to attach images, etc., that are stored in memory and do not have another way to be referenced by a content URI. For images obtained from, e.g., the Camera or Gallery, that already have a content URI associated with them, use of this class is not necessary. If an application wishes to attach images that are stored in-memory within the application, this content provider must be listed in the application's AndroidManifest.xml, and it should be named according to the pattern ""com.facebook.app.FacebookContentProvider{FACEBOOK_APP_ID}"". See the getContentProviderName method. ","update(Uri uri, ContentValues contentValues, java.lang.String s, java.lang.String[] strings)",N/A,int
FacebookDialog,Represents dialogs provided by Facebook,canShow(CONTENT content),Indicates whether the dialog can be shown for the content passed in.,boolean
FacebookDialog,Represents dialogs provided by Facebook,"registerCallback(CallbackManager callbackManager, FacebookCallback<RESULT> callback)","Allows the registration of a callback that will be executed once the dialog is closed, with success, cancel or error details.",void
FacebookDialog,Represents dialogs provided by Facebook,"registerCallback(CallbackManager callbackManager, FacebookCallback<RESULT> callback, int requestCode)","Allows the registration of a callback that will be executed once the dialog is closed, with success, cancel or error details.",void
FacebookDialog,Represents dialogs provided by Facebook,show(CONTENT content),Shows the dialog for the content passed in.,void
com.facebook.FacebookDialogException,Represents an error condition relating to displaying a Facebook Web dialog.,getErrorCode(),Gets the error code received by the WebView.,int
com.facebook.FacebookDialogException,Represents an error condition relating to displaying a Facebook Web dialog.,getFailingUrl(),Gets the URL that the dialog was trying to load.,java.lang.String
com.facebook.FacebookDialogException,Represents an error condition relating to displaying a Facebook Web dialog.,toString(),N/A,java.lang.String
com.facebook.FacebookException,Represents an error condition specific to the Facebook SDK for Android.,toString(),N/A,java.lang.String
com.facebook.FacebookGraphResponseException,Represents an issue that's returned by the Graph API.,getGraphResponse(),Getter for the graph response with the issue.,GraphResponse
com.facebook.FacebookGraphResponseException,Represents an issue that's returned by the Graph API.,toString(),N/A,java.lang.String
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",describeContents(),N/A,int
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getBatchRequestResult(),Returns the full JSON response for the batch request.,java.lang.Object
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getCategory(),Returns the category in which the error belongs.,FacebookRequestError.Category
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getConnection(),Returns the HTTP connection that was used to make the request.,java.net.HttpURLConnection
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getErrorCode(),Returns the error code returned from Facebook.,int
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getErrorMessage(),Returns the error message returned from Facebook.,java.lang.String
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getErrorRecoveryMessage(),Returns the message that can be displayed to the user before attempting error recovery.,java.lang.String
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getErrorType(),Returns the type of error as a raw string.,java.lang.String
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getErrorUserMessage(),"Returns a message suitable for display to the user, describing a user action necessary to enable Facebook functionality.",java.lang.String
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getErrorUserTitle(),Returns a short summary of the error suitable for display to the user.,java.lang.String
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getException(),"Returns the exception associated with this request, if any.",FacebookException
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getRequestResult(),Returns the full JSON response for the corresponding request.,JSONObject
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getRequestResultBody(),Returns the body portion of the response corresponding to the request from Facebook.,JSONObject
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getRequestStatusCode(),Returns the HTTP status code for this particular request.,int
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",getSubErrorCode(),Returns the sub-error code returned from Facebook.,int
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/",toString(),N/A,java.lang.String
com.facebook.FacebookRequestError,"This class represents an error that occurred during a Facebook request.  In general, one would call getCategory() to determine the type of error that occurred, and act accordingly. For more information on error handling, see  https://developers.facebook.com/docs/reference/api/errors/","writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.FacebookRequestError.Category,An enum that represents the Facebook SDK classification for the error that occurred.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static FacebookRequestError.Category
com.facebook.FacebookRequestError.Category,An enum that represents the Facebook SDK classification for the error that occurred.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static FacebookRequestError.Category[]
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,addLoggingBehavior(LoggingBehavior behavior),Certain logging behaviors are available for debugging beyond those that should be enabled in production.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,clearLoggingBehaviors(),Certain logging behaviors are available for debugging beyond those that should be enabled in production.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,fullyInitialize(),Mark Facebook SDK fully intialized to make it works as expected.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getAdvertiserIDCollectionEnabled(),N/A,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getApplicationContext(),The getter for the context of the current application.,static Context
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getApplicationId(),Gets the Facebook application ID for the current app.,static java.lang.String
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getApplicationName(),Gets the Facebook application name of the current app.,static java.lang.String
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getApplicationSignature(Context context),Internal call please don't use directly.,static java.lang.String
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getAutoInitEnabled(),N/A,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getAutoLogAppEventsEnabled(),Gets the flag used by AppEventsLogger,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getCacheDir(),"Gets the cache directory to use for caching responses, etc.",static java.io.File
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getCallbackRequestCodeOffset(),Getter for the callback request code offset.,static int
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getClientToken(),Gets the client token for the current app.,static java.lang.String
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getCodelessDebugLogEnabled(),N/A,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getCodelessSetupEnabled(),N/A,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getExecutor(),Returns the Executor used by the SDK for non-AsyncTask background work.,static java.util.concurrent.Executor
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getFacebookDomain(),"Gets the base Facebook domain to use when making Web requests; in production code this will normally be ""facebook.com"".",static java.lang.String
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getGraphApiVersion(),Returns the Graph API version to use when making Graph requests.,static java.lang.String
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getLimitEventAndDataUsage(Context context),"Returns whether data such as those generated through AppEventsLogger and sent to Facebook should be restricted from being used for purposes other than analytics and conversions, such as targeting ads to this user.",static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getLoggingBehaviors(),Certain logging behaviors are available for debugging beyond those that should be enabled in production.,static java.util.Set<LoggingBehavior>
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getOnProgressThreshold(),Gets the threshold used to report progress on requests.,static long
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,getSdkVersion(),Returns the current version of the Facebook SDK for Android as a string.,static java.lang.String
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,isDebugEnabled(),Indicates if we are in debug mode.,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,isFacebookRequestCode(int requestCode),Returns true if the request code is within the range used by Facebook SDK requests.,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,isFullyInitialized(),Indicates whether the Facebook SDK has been fully initialized.,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,isInitialized(),Indicates whether the Facebook SDK has been initialized.,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,isLegacyTokenUpgradeSupported(),Indicates if the SDK should fallback and read the legacy token.,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,isLoggingBehaviorEnabled(LoggingBehavior behavior),Certain logging behaviors are available for debugging beyond those that should be enabled in production.,static boolean
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,"publishInstallAsync(Context context, java.lang.String applicationId)","This method is public in order to be used by app events, please don't use directly.",static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,removeLoggingBehavior(LoggingBehavior behavior),Certain logging behaviors are available for debugging beyond those that should be enabled in production.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,sdkInitialize(Context applicationContext),Deprecated. ,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,"sdkInitialize(Context applicationContext, FacebookSdk.InitializeCallback callback)",Deprecated. ,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,"sdkInitialize(Context applicationContext, int callbackRequestCodeOffset)",Deprecated. ,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,"sdkInitialize(Context applicationContext, int callbackRequestCodeOffset, FacebookSdk.InitializeCallback callback)",Deprecated. ,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setAdvertiserIDCollectionEnabled(boolean flag),Sets the advertiserID collection flag for the application,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setApplicationId(java.lang.String applicationId),Sets the Facebook application ID for the current app.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setApplicationName(java.lang.String applicationName),Sets the Facebook application name for the current app.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setAutoInitEnabled(boolean flag),Sets the auto init SDK flag for the application,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setAutoLogAppEventsEnabled(boolean flag),Sets the auto logging events flag for the application AppEventsLogger,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setCacheDir(java.io.File cacheDir),"Sets the cache directory to use for caching responses, etc.",static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setClientToken(java.lang.String clientToken),Sets the Facebook client token for the current app.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setCodelessDebugLogEnabled(boolean flag),Sets the codeless debug flag for the application,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setExecutor(java.util.concurrent.Executor executor),Sets the Executor used by the SDK for non-AsyncTask background work.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setFacebookDomain(java.lang.String facebookDomain),Sets the base Facebook domain to use when making Web requests.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setGraphApiVersion(java.lang.String graphApiVersion),Sets the Graph API version to use when making Graph requests.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setIsDebugEnabled(boolean enabled),"Used to enable or disable logging, and other debug features.",static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setLegacyTokenUpgradeSupported(boolean supported),Setter for legacy token upgrade.,static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,"setLimitEventAndDataUsage(Context context, boolean limitEventUsage)","Sets whether data such as those generated through AppEventsLogger and sent to Facebook should be restricted from being used for purposes other than analytics and conversions, such as targeting ads to this user.",static void
com.facebook.FacebookSdk,This class allows some customization of Facebook SDK behavior.,setOnProgressThreshold(long threshold),Sets the threshold used to report progress on requests.,static void
FacebookSdk.InitializeCallback,Callback passed to the sdkInitialize function.,onInitialized(),Called when the sdk has been initialized.,void
com.facebook.FacebookServiceException,Represents an error returned from the Facebook service in response to a request.,getRequestError(),Returns an object that encapsulates complete information representing the error returned by Facebook.,FacebookRequestError
com.facebook.FacebookServiceException,Represents an error returned from the Facebook service in response to a request.,toString(),N/A,java.lang.String
com.facebook.appevents.FlushResult,Returns the enum constant of this type with the specified name.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static FlushResult
com.facebook.appevents.FlushResult,Returns the enum constant of this type with the specified name.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static FlushResult[]
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,describeContents(),N/A,int
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,getActionType(),Gets the action type,GameRequestContent.ActionType
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,getData(),Gets optional data which can be used for tracking,java.lang.String
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,getFilters(),Get the filters,GameRequestContent.Filters
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,getMessage(),Gets the message that users receiving the request will see.,java.lang.String
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,getObjectId(),Gets the open graph id of the object that action type will be performed on,java.lang.String
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,getRecipients(),Gets the user IDs or user names the request will be sent to.,java.util.List<java.lang.String>
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,getSuggestions(),Gets a list of suggested user ids,java.util.List<java.lang.String>
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,getTitle(),Gets the optional title for the dialog,java.lang.String
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,getTo(),Deprecated.  Replaced by getRecipients(),java.lang.String
com.facebook.share.model.GameRequestContent,Describes the content that will be displayed by the GameRequestDialog,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.GameRequestContent.ActionType,Returns the enum constant of this type with the specified name.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static GameRequestContent.ActionType
com.facebook.share.model.GameRequestContent.ActionType,Returns the enum constant of this type with the specified name.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static GameRequestContent.ActionType[]
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,build(),Builds the object.,GameRequestContent
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,readFrom(GameRequestContent content),Reads the values from a ShareModel into the builder.,GameRequestContent.Builder
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,setActionType(GameRequestContent.ActionType actionType),Sets the action type for this request,GameRequestContent.Builder
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,setData(java.lang.String data),Sets optional data which can be used for tracking; maximum length is 255 characters.,GameRequestContent.Builder
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,setFilters(GameRequestContent.Filters filters),Sets the filters for everybody/app users/non app users,GameRequestContent.Builder
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,setMessage(java.lang.String message),Sets the message users receiving the request will see.,GameRequestContent.Builder
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,setObjectId(java.lang.String objectId),"Sets the open graph id of the object that action type will be performed on Only valid (and required) for ActionTypes SEND, ASKFOR",GameRequestContent.Builder
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,setRecipients(java.util.List<java.lang.String> recipients),"An array of user IDs, usernames or invite tokens of people to send request.",GameRequestContent.Builder
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,setSuggestions(java.util.List<java.lang.String> suggestions),Sets a list of user ids suggested as request receivers,GameRequestContent.Builder
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,setTitle(java.lang.String title),Sets an optional title for the dialog; maximum length is 50 characters.,GameRequestContent.Builder
com.facebook.share.model.GameRequestContent.Builder,Builder class for a concrete instance of GameRequestContent,setTo(java.lang.String to),Deprecated.  Replaced by setRecipients(List),GameRequestContent.Builder
com.facebook.share.model.GameRequestContent.Filters,Returns the enum constant of this type with the specified name.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static GameRequestContent.Filters
com.facebook.share.model.GameRequestContent.Filters,Returns the enum constant of this type with the specified name.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static GameRequestContent.Filters[]
com.facebook.share.widget.GameRequestDialog,Provides functionality to send requests in games. see https://developers.facebook.com/docs/games/requests,canShow(),Indicates whether the game request dialog can be shown.,static boolean
com.facebook.share.widget.GameRequestDialog,Provides functionality to send requests in games. see https://developers.facebook.com/docs/games/requests,createBaseAppCall(),N/A,protected com.facebook.internal.AppCall
com.facebook.share.widget.GameRequestDialog,Provides functionality to send requests in games. see https://developers.facebook.com/docs/games/requests,getOrderedModeHandlers(),N/A,protected java.util.List<com.facebook.internal.FacebookDialogBase.ModeHandler>
com.facebook.share.widget.GameRequestDialog,Provides functionality to send requests in games. see https://developers.facebook.com/docs/games/requests,"registerCallbackImpl(com.facebook.internal.CallbackManagerImpl callbackManager, FacebookCallback<GameRequestDialog.Result> callback)",N/A,protected void
com.facebook.share.widget.GameRequestDialog,Provides functionality to send requests in games. see https://developers.facebook.com/docs/games/requests,"show(Activity activity, GameRequestContent gameRequestContent)","Shows a GameRequestDialog to send a request, using the passed in activity.",static void
com.facebook.share.widget.GameRequestDialog,Provides functionality to send requests in games. see https://developers.facebook.com/docs/games/requests,"show(android.app.Fragment fragment, GameRequestContent gameRequestContent)","Shows a GameRequestDialog to send a request, using the passed in activity.",static void
com.facebook.share.widget.GameRequestDialog,Provides functionality to send requests in games. see https://developers.facebook.com/docs/games/requests,"show(Fragment fragment, GameRequestContent gameRequestContent)","Shows a GameRequestDialog to send a request, using the passed in activity.",static void
com.facebook.share.widget.GameRequestDialog.Result,Helper object for handling the result from a requests dialog,getRequestId(),Returns the request ID.,java.lang.String
com.facebook.share.widget.GameRequestDialog.Result,Helper object for handling the result from a requests dialog,getRequestRecipients(),Returns request recipients.,java.util.List<java.lang.String>
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",executeAndWait(),Executes this request on the current thread and blocks while waiting for the response.,GraphResponse
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",executeAndWait(GraphRequest request),Executes a single request on the current thread and blocks while waiting for the response.,static GraphResponse
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",executeAsync(),Executes the request asynchronously.,GraphRequestAsyncTask
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",executeBatchAndWait(java.util.Collection<GraphRequest> requests),Executes requests as a single batch on the current thread and blocks while waiting for the responses.,static java.util.List<GraphResponse>
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",executeBatchAndWait(GraphRequest... requests),Executes requests on the current thread as a single batch and blocks while waiting for the response.,static java.util.List<GraphResponse>
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",executeBatchAndWait(GraphRequestBatch requests),Executes requests on the current thread as a single batch and blocks while waiting for the responses.,static java.util.List<GraphResponse>
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",executeBatchAsync(java.util.Collection<GraphRequest> requests),Executes requests as a single batch asynchronously.,static GraphRequestAsyncTask
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",executeBatchAsync(GraphRequest... requests),Executes requests as a single batch asynchronously.,static GraphRequestAsyncTask
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",executeBatchAsync(GraphRequestBatch requests),Executes requests as a single batch asynchronously.,static GraphRequestAsyncTask
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","executeConnectionAndWait(java.net.HttpURLConnection connection, java.util.Collection<GraphRequest> requests)",Executes requests that have already been serialized into an HttpURLConnection.,static java.util.List<GraphResponse>
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","executeConnectionAndWait(java.net.HttpURLConnection connection, GraphRequestBatch requests)",Executes requests that have already been serialized into an HttpURLConnection.,static java.util.List<GraphResponse>
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","executeConnectionAsync(Handler callbackHandler, java.net.HttpURLConnection connection, GraphRequestBatch requests)",Asynchronously executes requests that have already been serialized into an HttpURLConnection.,static GraphRequestAsyncTask
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","executeConnectionAsync(java.net.HttpURLConnection connection, GraphRequestBatch requests)",Asynchronously executes requests that have already been serialized into an HttpURLConnection.,static GraphRequestAsyncTask
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getAccessToken(),Returns the access token associated with this request.,AccessToken
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getBatchEntryDependsOn(),Returns the name of the request that this request entry explicitly depends on in a batched request.,java.lang.String
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getBatchEntryName(),Returns the name of this requests entry in a batched request.,java.lang.String
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getBatchEntryOmitResultOnSuccess(),Returns whether or not this batch entry will return a response if it is successful.,boolean
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getCallback(),Returns the callback which will be called when the request finishes.,GraphRequest.Callback
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getDefaultBatchApplicationId(),Gets the default Facebook application ID that will be used to submit batched requests.,static java.lang.String
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getGraphObject(),"Returns the GraphObject, if any, associated with this request.",JSONObject
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getGraphPath(),"Returns the graph path of this request, if any.",java.lang.String
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getHttpMethod(),Returns the HttpMethod to use for this request.,HttpMethod
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getParameters(),Returns the parameters for this request.,Bundle
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getTag(),Gets the tag on the request; this is an application-defined object that can be used to distinguish between different requests.,java.lang.Object
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",getVersion(),Returns the version of the API that this request will use.,java.lang.String
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newCustomAudienceThirdPartyIdRequest(AccessToken accessToken, Context context, GraphRequest.Callback callback)",Creates a new Request configured to retrieve an App User ID for the app's Facebook user.,static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newCustomAudienceThirdPartyIdRequest(AccessToken accessToken, Context context, java.lang.String applicationId, GraphRequest.Callback callback)",Creates a new Request configured to retrieve an App User ID for the app's Facebook user.,static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newDeleteObjectRequest(AccessToken accessToken, java.lang.String id, GraphRequest.Callback callback)",Creates a new Request configured to delete a resource through the Graph API.,static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newGraphPathRequest(AccessToken accessToken, java.lang.String graphPath, GraphRequest.Callback callback)",Creates a new Request configured to retrieve a particular graph path.,static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newMeRequest(AccessToken accessToken, GraphRequest.GraphJSONObjectCallback callback)",Creates a new Request configured to retrieve a user's own profile.,static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newMyFriendsRequest(AccessToken accessToken, GraphRequest.GraphJSONArrayCallback callback)",Creates a new Request configured to retrieve a user's friend list.,static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newPlacesSearchRequest(AccessToken accessToken, Location location, int radiusInMeters, int resultsLimit, java.lang.String searchText, GraphRequest.GraphJSONArrayCallback callback)",Creates a new Request that is configured to perform a search for places near a specified location via the Graph API.,static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newPostRequest(AccessToken accessToken, java.lang.String graphPath, JSONObject graphObject, GraphRequest.Callback callback)","Creates a new Request configured to post a GraphObject to a particular graph path, to either create or update the object at that path.",static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newUploadPhotoRequest(AccessToken accessToken, java.lang.String graphPath, Bitmap image, java.lang.String caption, Bundle params, GraphRequest.Callback callback)",Creates a new Request configured to upload a photo to the specified graph path.,static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newUploadPhotoRequest(AccessToken accessToken, java.lang.String graphPath, java.io.File file, java.lang.String caption, Bundle params, GraphRequest.Callback callback)",Creates a new Request configured to upload a photo to the specified graph path.,static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ","newUploadPhotoRequest(AccessToken accessToken, java.lang.String graphPath, Uri photoUri, java.lang.String caption, Bundle params, GraphRequest.Callback callback)",Creates a new Request configured to upload a photo to the specified graph path.,static GraphRequest
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setAccessToken(AccessToken accessToken),Sets the access token to use for this request.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setBatchEntryDependsOn(java.lang.String batchEntryDependsOn),Sets the name of the request entry that this request explicitly depends on in a batched request.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setBatchEntryName(java.lang.String batchEntryName),Sets the name of this request's entry in a batched request.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setBatchEntryOmitResultOnSuccess(boolean batchEntryOmitResultOnSuccess),Sets whether or not this batch entry will return a response if it is successful.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setCallback(GraphRequest.Callback callback),Sets the callback which will be called when the request finishes.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setDefaultBatchApplicationId(java.lang.String applicationId),Sets the default application ID that will be used to submit batched requests if none of those requests specifies an access token.,static void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setGraphObject(JSONObject graphObject),Sets the GraphObject associated with this request.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setGraphPath(java.lang.String graphPath),Sets the graph path of this request.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setHttpMethod(HttpMethod httpMethod),Sets the HttpMethod to use for this request.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setParameters(Bundle parameters),Sets the parameters for this request.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setSkipClientToken(boolean skipClientToken),This is an internal function that is not meant to be used by developers.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setTag(java.lang.Object tag),Sets the tag on the request; this is an application-defined object that can be used to distinguish between different requests.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",setVersion(java.lang.String version),Set the version to use for this request.,void
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",toHttpConnection(java.util.Collection<GraphRequest> requests),Serializes one or more requests but does not execute them.,static java.net.HttpURLConnection
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",toHttpConnection(GraphRequest... requests),Serializes one or more requests but does not execute them.,static java.net.HttpURLConnection
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",toHttpConnection(GraphRequestBatch requests),Serializes one or more requests but does not execute them.,static java.net.HttpURLConnection
com.facebook.GraphRequest," A single request to be sent to the Facebook Platform through the Graph API. The Request class provides functionality relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip to the service) and making calls asynchronously.  The particular service endpoint that a request targets is determined by a graph path (see the setGraphPath method).  A Request can be executed either anonymously or representing an authenticated user. In the former case, no AccessToken needs to be specified, while in the latter, an AccessToken must be provided. If requests are executed in a batch, a Facebook application ID must be associated with the batch, either by setting the application ID in the AndroidManifest.xml or via FacebookSdk or by calling the setDefaultBatchApplicationId method.  After completion of a request, the AccessToken, if not null and taken from AccessTokenManager, will be checked to determine if its Facebook access token needs to be extended; if so, a request to extend it will be issued in the background. ",toString(),"Returns a string representation of this Request, useful for debugging.",java.lang.String
GraphRequest.Callback,"Specifies the interface that consumers of the Request class can implement in order to be notified when a particular request completes, either successfully or with an error.",onCompleted(GraphResponse response),The method that will be called when a request completes.,void
GraphRequest.GraphJSONArrayCallback,Callback for requests that result in an array of JSONObjects.,"onCompleted(JSONArray objects, GraphResponse response)",The method that will be called when the request completes.,void
GraphRequest.GraphJSONObjectCallback,Callback for requests that result in a JSONObject.,"onCompleted(JSONObject object, GraphResponse response)",The method that will be called when the request completes.,void
GraphRequest.OnProgressCallback,Specifies the interface that consumers of the Request class can implement in order to be notified when a progress is made on a particular request. The frequency of the callbacks can be controlled using FacebookSdk.setOnProgressThreshold(long),"onProgress(long current, long max)",The method that will be called when progress is made.,void
com.facebook.GraphRequest.ParcelableResourceWithMimeType<RESOURCE>,Used during serialization for the graph request.,describeContents(),N/A,int
com.facebook.GraphRequest.ParcelableResourceWithMimeType<RESOURCE>,Used during serialization for the graph request.,getMimeType(),N/A,java.lang.String
com.facebook.GraphRequest.ParcelableResourceWithMimeType<RESOURCE>,Used during serialization for the graph request.,getResource(),N/A,RESOURCE
com.facebook.GraphRequest.ParcelableResourceWithMimeType<RESOURCE>,Used during serialization for the graph request.,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.GraphRequestAsyncTask,Defines an AsyncTask suitable for executing a Request in the background. May be subclassed by applications having unique threading model needs.,doInBackground(java.lang.Void... params),N/A,protected java.util.List<GraphResponse>
com.facebook.GraphRequestAsyncTask,Defines an AsyncTask suitable for executing a Request in the background. May be subclassed by applications having unique threading model needs.,getException(),N/A,protected java.lang.Exception
com.facebook.GraphRequestAsyncTask,Defines an AsyncTask suitable for executing a Request in the background. May be subclassed by applications having unique threading model needs.,getRequests(),N/A,protected GraphRequestBatch
com.facebook.GraphRequestAsyncTask,Defines an AsyncTask suitable for executing a Request in the background. May be subclassed by applications having unique threading model needs.,onPostExecute(java.util.List<GraphResponse> result),N/A,protected void
com.facebook.GraphRequestAsyncTask,Defines an AsyncTask suitable for executing a Request in the background. May be subclassed by applications having unique threading model needs.,onPreExecute(),N/A,protected void
com.facebook.GraphRequestAsyncTask,Defines an AsyncTask suitable for executing a Request in the background. May be subclassed by applications having unique threading model needs.,toString(),N/A,java.lang.String
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,add(GraphRequest request),N/A,boolean
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,"add(int location, GraphRequest request)",N/A,void
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,addCallback(GraphRequestBatch.Callback callback),Adds a batch-level callback which will be called when the entire batch has finished executing.,void
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,clear(),N/A,void
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,executeAndWait(),Executes this batch on the current thread and returns the responses.,java.util.List<GraphResponse>
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,executeAsync(),Executes this batch asynchronously.,GraphRequestAsyncTask
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,get(int i),N/A,GraphRequest
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,getBatchApplicationId(),Getter for the batch application id.,java.lang.String
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,getTimeout(),Gets the timeout to wait for responses from the server before a timeout error occurs.,int
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,remove(int location),N/A,GraphRequest
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,removeCallback(GraphRequestBatch.Callback callback),Removes a batch-level callback.,void
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,"set(int location, GraphRequest request)",N/A,GraphRequest
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,setBatchApplicationId(java.lang.String batchApplicationId),Setter for the batch application id.,void
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,setTimeout(int timeoutInMilliseconds),Sets the timeout to wait for responses from the server before a timeout error occurs.,void
com.facebook.GraphRequestBatch,RequestBatch contains a list of Request objects that can be sent to Facebook in a single round-trip.,size(),N/A,int
GraphRequestBatch.Callback,Specifies the interface that consumers of the RequestBatch class can implement in order to be notified when the entire batch completes execution. It will be called after all per-Request callbacks are called.,onBatchCompleted(GraphRequestBatch batch),The method that will be called when a batch completes.,void
GraphRequestBatch.OnProgressCallback,Specifies the interface that consumers of the RequestBatch class can implement in order to be notified when the batch makes progress. The frequency of the callbacks can be controlled using FacebookSdk.setOnProgressThreshold(long).,"onBatchProgress(GraphRequestBatch batch, long current, long max)",The method that will be called when a batch makes progress.,void
com.facebook.GraphResponse,"Encapsulates the response, successful or otherwise, of a call to the Facebook platform.",getConnection(),Returns the HttpURLConnection that this response was generated from.,java.net.HttpURLConnection
com.facebook.GraphResponse,"Encapsulates the response, successful or otherwise, of a call to the Facebook platform.",getError(),Returns information about any errors that may have occurred during the request.,FacebookRequestError
com.facebook.GraphResponse,"Encapsulates the response, successful or otherwise, of a call to the Facebook platform.",getJSONArray(),"The response returned for this request, if it's in array form.",JSONArray
com.facebook.GraphResponse,"Encapsulates the response, successful or otherwise, of a call to the Facebook platform.",getJSONObject(),"The response returned for this request, if it's in object form.",JSONObject
com.facebook.GraphResponse,"Encapsulates the response, successful or otherwise, of a call to the Facebook platform.",getRawResponse(),Returns the server response as a String that this response is for.,java.lang.String
com.facebook.GraphResponse,"Encapsulates the response, successful or otherwise, of a call to the Facebook platform.",getRequest(),Returns the request that this response is for.,GraphRequest
com.facebook.GraphResponse,"Encapsulates the response, successful or otherwise, of a call to the Facebook platform.",getRequestForPagedResults(GraphResponse.PagingDirection direction),"If a Response contains results that contain paging information, returns a new Request that will retrieve the next page of results, in whichever direction is desired.",GraphRequest
com.facebook.GraphResponse,"Encapsulates the response, successful or otherwise, of a call to the Facebook platform.",toString(),Provides a debugging string for this response.,java.lang.String
com.facebook.GraphResponse.PagingDirection,Indicates whether paging is being done forward or backward.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static GraphResponse.PagingDirection
com.facebook.GraphResponse.PagingDirection,Indicates whether paging is being done forward or backward.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static GraphResponse.PagingDirection[]
com.facebook.HttpMethod,Enumeration of HTTP methods supported by Request,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static HttpMethod
com.facebook.HttpMethod,Enumeration of HTTP methods supported by Request,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static HttpMethod[]
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.",flush(),N/A,void
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.",getFlushBehavior(),N/A,static AppEventsLogger.FlushBehavior
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.","logEvent(java.lang.String eventName, Bundle parameters)",N/A,void
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.","logEvent(java.lang.String eventName, double valueToSum, Bundle parameters)",N/A,void
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.","logEventFromSE(java.lang.String eventName, java.lang.String buttonText)",N/A,void
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.",logEventImplicitly(java.lang.String eventName),N/A,void
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.","logEventImplicitly(java.lang.String eventName, java.math.BigDecimal purchaseAmount, java.util.Currency currency, Bundle parameters)",N/A,void
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.","logEventImplicitly(java.lang.String eventName, Bundle parameters)",N/A,void
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.","logEventImplicitly(java.lang.String eventName, java.lang.Double valueToSum, Bundle parameters)",N/A,void
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.","logPurchaseImplicitly(java.math.BigDecimal purchaseAmount, java.util.Currency currency, Bundle parameters)",N/A,void
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.","setInternalUserData(java.util.Map<java.lang.String,java.lang.String> ud)",N/A,static void
com.facebook.appevents.InternalAppEventsLogger,"com.facebook.appevents.InternalAppEventsLogger is solely for the use of other packages within the Facebook SDK for Android. Use of any of the classes in this package is unsupported, and they may be modified or removed without warning at any time.",setUserData(Bundle userData),N/A,static void
com.facebook.share.widget.JoinAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,canShow(),Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,static boolean
com.facebook.share.widget.JoinAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,createBaseAppCall(),Deprecated. ,protected com.facebook.internal.AppCall
com.facebook.share.widget.JoinAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,getOrderedModeHandlers(),Deprecated. ,protected java.util.List<com.facebook.internal.FacebookDialogBase.ModeHandler>
com.facebook.share.widget.JoinAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,"registerCallbackImpl(com.facebook.internal.CallbackManagerImpl callbackManager, FacebookCallback<JoinAppGroupDialog.Result> callback)",Deprecated. ,protected void
com.facebook.share.widget.JoinAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,"show(Activity activity, java.lang.String groupId)",Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,static void
com.facebook.share.widget.JoinAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,"show(android.app.Fragment fragment, java.lang.String groupId)",Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,static void
com.facebook.share.widget.JoinAppGroupDialog,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,"show(Fragment fragment, java.lang.String groupId)",Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,static void
com.facebook.share.widget.JoinAppGroupDialog.Result,Deprecated.  App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.,getData(),Deprecated. ,Bundle
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,getOnErrorListener(),Deprecated.  LikeView is deprecated,LikeView.OnErrorListener
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,onDetachedFromWindow(),Deprecated. ,protected void
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,setAuxiliaryViewPosition(LikeView.AuxiliaryViewPosition auxiliaryViewPosition),Deprecated.  LikeView is deprecated,void
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,setEnabled(boolean enabled),Deprecated.  LikeView is deprecated,void
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,setForegroundColor(int foregroundColor),Deprecated.  LikeView is deprecated,void
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,setFragment(android.app.Fragment fragment),Deprecated.  LikeView is deprecated,void
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,setFragment(Fragment fragment),Deprecated.  LikeView is deprecated,void
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,setHorizontalAlignment(LikeView.HorizontalAlignment horizontalAlignment),Deprecated.  LikeView is deprecated,void
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,setLikeViewStyle(LikeView.Style likeViewStyle),Deprecated.  LikeView is deprecated,void
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,"setObjectIdAndType(java.lang.String objectId, LikeView.ObjectType objectType)",Deprecated.  LikeView is deprecated,void
com.facebook.share.widget.LikeView,Deprecated.  LikeView is deprecated,setOnErrorListener(LikeView.OnErrorListener onErrorListener),Deprecated.  LikeView is deprecated,void
com.facebook.share.widget.LikeView.AuxiliaryViewPosition,Deprecated.  LikeView is deprecated,toString(),Deprecated. ,java.lang.String
com.facebook.share.widget.LikeView.AuxiliaryViewPosition,Deprecated.  LikeView is deprecated,valueOf(java.lang.String name),Deprecated. ,static LikeView.AuxiliaryViewPosition
com.facebook.share.widget.LikeView.AuxiliaryViewPosition,Deprecated.  LikeView is deprecated,values(),Deprecated. ,static LikeView.AuxiliaryViewPosition[]
com.facebook.share.widget.LikeView.HorizontalAlignment,Deprecated.  LikeView is deprecated,toString(),Deprecated. ,java.lang.String
com.facebook.share.widget.LikeView.HorizontalAlignment,Deprecated.  LikeView is deprecated,valueOf(java.lang.String name),Deprecated. ,static LikeView.HorizontalAlignment
com.facebook.share.widget.LikeView.HorizontalAlignment,Deprecated.  LikeView is deprecated,values(),Deprecated. ,static LikeView.HorizontalAlignment[]
com.facebook.share.widget.LikeView.ObjectType,Deprecated.  LikeView is deprecated,fromInt(int enumValue),Deprecated. ,static LikeView.ObjectType
com.facebook.share.widget.LikeView.ObjectType,Deprecated.  LikeView is deprecated,getValue(),Deprecated. ,int
com.facebook.share.widget.LikeView.ObjectType,Deprecated.  LikeView is deprecated,toString(),Deprecated. ,java.lang.String
com.facebook.share.widget.LikeView.ObjectType,Deprecated.  LikeView is deprecated,valueOf(java.lang.String name),Deprecated. ,static LikeView.ObjectType
com.facebook.share.widget.LikeView.ObjectType,Deprecated.  LikeView is deprecated,values(),Deprecated. ,static LikeView.ObjectType[]
LikeView.OnErrorListener,Callback interface that will be called when a network or other error is encountered while logging in.,onError(FacebookException error),Called when the share action encounters an error.,void
com.facebook.share.widget.LikeView.Style,Deprecated.  LikeView is deprecated,toString(),Deprecated. ,java.lang.String
com.facebook.share.widget.LikeView.Style,Deprecated.  LikeView is deprecated,valueOf(java.lang.String name),Deprecated. ,static LikeView.Style
com.facebook.share.widget.LikeView.Style,Deprecated.  LikeView is deprecated,values(),Deprecated. ,static LikeView.Style[]
com.facebook.LoggingBehavior,Specifies different categories of logging messages that can be generated.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static LoggingBehavior
com.facebook.LoggingBehavior,Specifies different categories of logging messages that can be generated.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static LoggingBehavior[]
com.facebook.login.LoginBehavior,Specifies the behaviors to try during login.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static LoginBehavior
com.facebook.login.LoginBehavior,Specifies the behaviors to try during login.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static LoginBehavior[]
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,clearPermissions(),Clears the permissions currently associated with this LoginButton.,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,"configureButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)",N/A,protected void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,dismissToolTip(),Dismisses the Tooltip if it is currently visible,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,getAuthType(),Gets the authType being used.,java.lang.String
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,getDefaultAudience(),Gets the default audience to use when the user logs in.,DefaultAudience
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,getDefaultRequestCode(),N/A,protected int
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,getDefaultStyleResource(),N/A,protected int
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,getLoginBehavior(),Gets the login behavior during authorization.,LoginBehavior
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,getNewLoginClickListener(),N/A,protected LoginButton.LoginClickListener
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,getToolTipDisplayTime(),Gets the current amount of time (in ms) that the tool tip will be displayed to the user.,long
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,getToolTipMode(),Return the current LoginButton.ToolTipMode for this LoginButton,LoginButton.ToolTipMode
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,onAttachedToWindow(),N/A,protected void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,onDetachedFromWindow(),N/A,protected void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,onDraw(Canvas canvas),N/A,protected void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,"onLayout(boolean changed, int left, int top, int right, int bottom)",N/A,protected void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,"onMeasure(int widthMeasureSpec, int heightMeasureSpec)",N/A,protected void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,"onVisibilityChanged(View changedView, int visibility)",N/A,protected void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,"registerCallback(CallbackManager callbackManager, FacebookCallback<LoginResult> callback)",Registers a login callback to the given callback manager.,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setAuthType(java.lang.String authType),Sets the authType to be used.,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setDefaultAudience(DefaultAudience defaultAudience),Sets the default audience to use when the user logs in.,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setLoginBehavior(LoginBehavior loginBehavior),Sets the login behavior during authorization.,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setLoginText(java.lang.String loginText),N/A,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setLogoutText(java.lang.String logoutText),N/A,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setPermissions(java.util.List<java.lang.String> permissions),Set the permissions to use when the user logs in.,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setPermissions(java.lang.String... permissions),Set the permissions to use when the user logs in.,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setPublishPermissions(java.util.List<java.lang.String> permissions),Deprecated.  use setPermissions,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setPublishPermissions(java.lang.String... permissions),Deprecated.  use setPermissions,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setReadPermissions(java.util.List<java.lang.String> permissions),Deprecated.  use setPermissions,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setReadPermissions(java.lang.String... permissions),Deprecated.  use setPermissions,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setToolTipDisplayTime(long displayTime),Sets the amount of time (in milliseconds) that the tool tip will be shown to the user.,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setToolTipMode(LoginButton.ToolTipMode toolTipMode),Sets the mode of the Tool Tip popup.,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,setToolTipStyle(ToolTipPopup.Style toolTipStyle),Sets the style (background) of the Tool Tip popup.,void
com.facebook.login.widget.LoginButton,A Log In/Log Out button that maintains login state and logs in/out for the app.  This control requires the app ID to be specified in the AndroidManifest.xml.,unregisterCallback(CallbackManager callbackManager),Unregisters a login callback to the given callback manager.,void
com.facebook.login.widget.LoginButton.ToolTipMode,The display modes for the login button tool tip.,fromInt(int enumValue),N/A,static LoginButton.ToolTipMode
com.facebook.login.widget.LoginButton.ToolTipMode,The display modes for the login button tool tip.,getValue(),N/A,int
com.facebook.login.widget.LoginButton.ToolTipMode,The display modes for the login button tool tip.,toString(),N/A,java.lang.String
com.facebook.login.widget.LoginButton.ToolTipMode,The display modes for the login button tool tip.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static LoginButton.ToolTipMode
com.facebook.login.widget.LoginButton.ToolTipMode,The display modes for the login button tool tip.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static LoginButton.ToolTipMode[]
com.facebook.login.LoginFragment,This Fragment is a necessary part of the overall Facebook login process but is not meant to be used directly.,createLoginClient(),N/A,protected com.facebook.login.LoginClient
com.facebook.login.LoginFragment,This Fragment is a necessary part of the overall Facebook login process but is not meant to be used directly.,getLayoutResId(),N/A,protected int
com.facebook.login.LoginFragment,This Fragment is a necessary part of the overall Facebook login process but is not meant to be used directly.,"onActivityResult(int requestCode, int resultCode, Intent data)",N/A,void
com.facebook.login.LoginFragment,This Fragment is a necessary part of the overall Facebook login process but is not meant to be used directly.,onCreate(Bundle savedInstanceState),N/A,void
com.facebook.login.LoginFragment,This Fragment is a necessary part of the overall Facebook login process but is not meant to be used directly.,"onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)",N/A,View
com.facebook.login.LoginFragment,This Fragment is a necessary part of the overall Facebook login process but is not meant to be used directly.,onDestroy(),N/A,void
com.facebook.login.LoginFragment,This Fragment is a necessary part of the overall Facebook login process but is not meant to be used directly.,onPause(),N/A,void
com.facebook.login.LoginFragment,This Fragment is a necessary part of the overall Facebook login process but is not meant to be used directly.,onResume(),N/A,void
com.facebook.login.LoginFragment,This Fragment is a necessary part of the overall Facebook login process but is not meant to be used directly.,onSaveInstanceState(Bundle outState),N/A,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,createLoginRequest(java.util.Collection<java.lang.String> permissions),N/A,protected LoginClient.Request
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,createReauthorizeRequest(),N/A,protected LoginClient.Request
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,getAuthType(),Getter for the authType,java.lang.String
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,getDefaultAudience(),Getter for the default audience.,DefaultAudience
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,getFacebookActivityIntent(LoginClient.Request request),N/A,protected Intent
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,getInstance(),Getter for the login manager.,static LoginManager
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,getLoginBehavior(),Getter for the login behavior.,LoginBehavior
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"logIn(Activity activity, java.util.Collection<java.lang.String> permissions)",Logs the user in with the requested permissions.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"logIn(android.app.Fragment fragment, java.util.Collection<java.lang.String> permissions)",Logs the user in with the requested permissions.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"logIn(Fragment fragment, java.util.Collection<java.lang.String> permissions)",Logs the user in with the requested permissions.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"logInWithPublishPermissions(Activity activity, java.util.Collection<java.lang.String> permissions)",Logs the user in with the requested publish permissions.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"logInWithPublishPermissions(android.app.Fragment fragment, java.util.Collection<java.lang.String> permissions)",Logs the user in with the requested publish permissions.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"logInWithPublishPermissions(Fragment fragment, java.util.Collection<java.lang.String> permissions)",Logs the user in with the requested publish permissions.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"logInWithReadPermissions(Activity activity, java.util.Collection<java.lang.String> permissions)",Logs the user in with the requested read permissions.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"logInWithReadPermissions(android.app.Fragment fragment, java.util.Collection<java.lang.String> permissions)",Logs the user in with the requested read permissions.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"logInWithReadPermissions(Fragment fragment, java.util.Collection<java.lang.String> permissions)",Logs the user in with the requested read permissions.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,logOut(),Logs out the user.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,reauthorizeDataAccess(Activity activity),Reauthorize data access,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,reauthorizeDataAccess(Fragment fragment),Reauthorize data access,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"registerCallback(CallbackManager callbackManager, FacebookCallback<LoginResult> callback)",Registers a login callback to the given callback manager.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"resolveError(Activity activity, GraphResponse response)",Starts the login process to resolve the error defined in the response.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"resolveError(android.app.Fragment fragment, GraphResponse response)",Starts the login process to resolve the error defined in the response.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"resolveError(Fragment fragment, GraphResponse response)",Starts the login process to resolve the error defined in the response.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"retrieveLoginStatus(Context context, LoginStatusCallback responseCallback)",Retrieves the login status for the user.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,"retrieveLoginStatus(Context context, long toastDurationMs, LoginStatusCallback responseCallback)",Retrieves the login status for the user.,void
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,setAuthType(java.lang.String authType),Setter for the authType,LoginManager
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,setDefaultAudience(DefaultAudience defaultAudience),Setter for the default audience.,LoginManager
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,setLoginBehavior(LoginBehavior loginBehavior),Setter for the login behavior.,LoginManager
com.facebook.login.LoginManager,This class manages login and permissions for Facebook.,unregisterCallback(CallbackManager callbackManager),Unregisters a login callback to the given callback manager.,void
com.facebook.login.LoginResult,This class shows the results of a login operation.,getAccessToken(),Getter for the new access token.,AccessToken
com.facebook.login.LoginResult,This class shows the results of a login operation.,getRecentlyDeniedPermissions(),Getter for the recently denied permissions.,java.util.Set<java.lang.String>
com.facebook.login.LoginResult,This class shows the results of a login operation.,getRecentlyGrantedPermissions(),Getter for the recently granted permissions.,java.util.Set<java.lang.String>
LoginStatusCallback,A callback class for getting the Login Status of a user.,onCompleted(AccessToken accessToken),Called when an access token is able to be retrieved successfully.,void
LoginStatusCallback,A callback class for getting the Login Status of a user.,onError(java.lang.Exception exception),Called when there was an error getting the login status of a user.,void
LoginStatusCallback,A callback class for getting the Login Status of a user.,onFailure(),Called when an access token could not be retrieved.,void
com.facebook.share.widget.MessageDialog,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",canShow(java.lang.Class<? extends ShareContent> contentType),Deprecated. ,static boolean
com.facebook.share.widget.MessageDialog,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",createBaseAppCall(),Deprecated. ,protected com.facebook.internal.AppCall
com.facebook.share.widget.MessageDialog,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getOrderedModeHandlers(),Deprecated. ,protected java.util.List<com.facebook.internal.FacebookDialogBase.ModeHandler>
com.facebook.share.widget.MessageDialog,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getShouldFailOnDataError(),Deprecated. ,boolean
com.facebook.share.widget.MessageDialog,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""","registerCallbackImpl(com.facebook.internal.CallbackManagerImpl callbackManager, FacebookCallback<Sharer.Result> callback)",Deprecated. ,protected void
com.facebook.share.widget.MessageDialog,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",setShouldFailOnDataError(boolean shouldFailOnDataError),Deprecated. ,void
com.facebook.share.widget.MessageDialog,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""","show(Activity activity, ShareContent shareContent)",Deprecated. ,static void
com.facebook.share.widget.MessageDialog,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""","show(android.app.Fragment fragment, ShareContent shareContent)",Deprecated. ,static void
com.facebook.share.widget.MessageDialog,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""","show(Fragment fragment, ShareContent shareContent)",Deprecated. ,static void
com.facebook.messenger.MessengerThreadParams.Origin,The origin of the flow that user originated from.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static MessengerThreadParams.Origin
com.facebook.messenger.MessengerThreadParams.Origin,The origin of the flow that user originated from.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static MessengerThreadParams.Origin[]
com.facebook.messenger.MessengerUtils,"Utilities for Messenger Content Platform.  Applications should specify the app id in their manifest or call FacebookSdk.setApplicationId(String) } in their application startup path. For specifying in the manifest, add a meta tag in your <application> tag.     <meta-data android:name=""com.facebook.sdk.ApplicationId"" android:value=""YOUR_APP_ID""/>
    When sharing to Messenger, apps should call the shareToMessenger(Activity, int, com.facebook.messenger.ShareToMessengerParams) method. For example,      ShareToMessengerParams params = ShareToMessengerParams.newBuilder(uri, ""image/*"")
         .setMetaData(metaData)
         .build();
     MessengerUtils.shareToMessenger(this, REQUEST_CODE_SHARE_TO_MESSENGER, params);
    To handle receiving a composer shortcut or reply intent from Messenger, apps should put the following intent filter in their manifest for the activity that receives the intent:            <intent-filter>
             <action android:name=""android.intent.action.PICK"" />
             <category android:name=""android.intent.category.DEFAULT""/>
             <category android:name=""com.facebook.orca.category.PLATFORM_THREAD_20150311""/>
           </intent-filter>
    When handling the intent, then call getMessengerThreadParamsForIntent(Intent) to receive the parameters for messenger. When the user has clicked the Send button to send the content to Messenger, then call finishShareToMessenger(Activity, com.facebook.messenger.ShareToMessengerParams) to return the data back to Messenger. ","finishShareToMessenger(Activity activity, ShareToMessengerParams shareToMessengerParams)",Finishes the activity and returns the media item the user picked to Messenger.,static void
com.facebook.messenger.MessengerUtils,"Utilities for Messenger Content Platform.  Applications should specify the app id in their manifest or call FacebookSdk.setApplicationId(String) } in their application startup path. For specifying in the manifest, add a meta tag in your <application> tag.     <meta-data android:name=""com.facebook.sdk.ApplicationId"" android:value=""YOUR_APP_ID""/>
    When sharing to Messenger, apps should call the shareToMessenger(Activity, int, com.facebook.messenger.ShareToMessengerParams) method. For example,      ShareToMessengerParams params = ShareToMessengerParams.newBuilder(uri, ""image/*"")
         .setMetaData(metaData)
         .build();
     MessengerUtils.shareToMessenger(this, REQUEST_CODE_SHARE_TO_MESSENGER, params);
    To handle receiving a composer shortcut or reply intent from Messenger, apps should put the following intent filter in their manifest for the activity that receives the intent:            <intent-filter>
             <action android:name=""android.intent.action.PICK"" />
             <category android:name=""android.intent.category.DEFAULT""/>
             <category android:name=""com.facebook.orca.category.PLATFORM_THREAD_20150311""/>
           </intent-filter>
    When handling the intent, then call getMessengerThreadParamsForIntent(Intent) to receive the parameters for messenger. When the user has clicked the Send button to send the content to Messenger, then call finishShareToMessenger(Activity, com.facebook.messenger.ShareToMessengerParams) to return the data back to Messenger. ",getMessengerThreadParamsForIntent(Intent intent),"When handling an Intent from Messenger, call this to parse the parameters of the intent.",static MessengerThreadParams
com.facebook.messenger.MessengerUtils,"Utilities for Messenger Content Platform.  Applications should specify the app id in their manifest or call FacebookSdk.setApplicationId(String) } in their application startup path. For specifying in the manifest, add a meta tag in your <application> tag.     <meta-data android:name=""com.facebook.sdk.ApplicationId"" android:value=""YOUR_APP_ID""/>
    When sharing to Messenger, apps should call the shareToMessenger(Activity, int, com.facebook.messenger.ShareToMessengerParams) method. For example,      ShareToMessengerParams params = ShareToMessengerParams.newBuilder(uri, ""image/*"")
         .setMetaData(metaData)
         .build();
     MessengerUtils.shareToMessenger(this, REQUEST_CODE_SHARE_TO_MESSENGER, params);
    To handle receiving a composer shortcut or reply intent from Messenger, apps should put the following intent filter in their manifest for the activity that receives the intent:            <intent-filter>
             <action android:name=""android.intent.action.PICK"" />
             <category android:name=""android.intent.category.DEFAULT""/>
             <category android:name=""com.facebook.orca.category.PLATFORM_THREAD_20150311""/>
           </intent-filter>
    When handling the intent, then call getMessengerThreadParamsForIntent(Intent) to receive the parameters for messenger. When the user has clicked the Send button to send the content to Messenger, then call finishShareToMessenger(Activity, com.facebook.messenger.ShareToMessengerParams) to return the data back to Messenger. ",hasMessengerInstalled(Context context),Checks whether any version of messenger is installed.,static boolean
com.facebook.messenger.MessengerUtils,"Utilities for Messenger Content Platform.  Applications should specify the app id in their manifest or call FacebookSdk.setApplicationId(String) } in their application startup path. For specifying in the manifest, add a meta tag in your <application> tag.     <meta-data android:name=""com.facebook.sdk.ApplicationId"" android:value=""YOUR_APP_ID""/>
    When sharing to Messenger, apps should call the shareToMessenger(Activity, int, com.facebook.messenger.ShareToMessengerParams) method. For example,      ShareToMessengerParams params = ShareToMessengerParams.newBuilder(uri, ""image/*"")
         .setMetaData(metaData)
         .build();
     MessengerUtils.shareToMessenger(this, REQUEST_CODE_SHARE_TO_MESSENGER, params);
    To handle receiving a composer shortcut or reply intent from Messenger, apps should put the following intent filter in their manifest for the activity that receives the intent:            <intent-filter>
             <action android:name=""android.intent.action.PICK"" />
             <category android:name=""android.intent.category.DEFAULT""/>
             <category android:name=""com.facebook.orca.category.PLATFORM_THREAD_20150311""/>
           </intent-filter>
    When handling the intent, then call getMessengerThreadParamsForIntent(Intent) to receive the parameters for messenger. When the user has clicked the Send button to send the content to Messenger, then call finishShareToMessenger(Activity, com.facebook.messenger.ShareToMessengerParams) to return the data back to Messenger. ",openMessengerInPlayStore(Context context),Opens the play store to install Messenger.,static void
com.facebook.messenger.MessengerUtils,"Utilities for Messenger Content Platform.  Applications should specify the app id in their manifest or call FacebookSdk.setApplicationId(String) } in their application startup path. For specifying in the manifest, add a meta tag in your <application> tag.     <meta-data android:name=""com.facebook.sdk.ApplicationId"" android:value=""YOUR_APP_ID""/>
    When sharing to Messenger, apps should call the shareToMessenger(Activity, int, com.facebook.messenger.ShareToMessengerParams) method. For example,      ShareToMessengerParams params = ShareToMessengerParams.newBuilder(uri, ""image/*"")
         .setMetaData(metaData)
         .build();
     MessengerUtils.shareToMessenger(this, REQUEST_CODE_SHARE_TO_MESSENGER, params);
    To handle receiving a composer shortcut or reply intent from Messenger, apps should put the following intent filter in their manifest for the activity that receives the intent:            <intent-filter>
             <action android:name=""android.intent.action.PICK"" />
             <category android:name=""android.intent.category.DEFAULT""/>
             <category android:name=""com.facebook.orca.category.PLATFORM_THREAD_20150311""/>
           </intent-filter>
    When handling the intent, then call getMessengerThreadParamsForIntent(Intent) to receive the parameters for messenger. When the user has clicked the Send button to send the content to Messenger, then call finishShareToMessenger(Activity, com.facebook.messenger.ShareToMessengerParams) to return the data back to Messenger. ","shareToMessenger(Activity activity, int requestCode, ShareToMessengerParams shareToMessengerParams)",Starts an intent to share a piece of media on Messenger using the messenger content platform.,static void
com.facebook.appevents.aam.MetadataIndexer,N/A,enable(),N/A,static void
com.facebook.appevents.aam.MetadataIndexer,N/A,onActivityResumed(Activity activity),N/A,static void
com.facebook.appevents.ml.Model,N/A,SHOULD_FILTER,N/A,static java.lang.String
com.facebook.appevents.ml.ModelManager,N/A,enable(),N/A,static void
com.facebook.appevents.ml.ModelManager,N/A,enablePIIFiltering(),N/A,static void
com.facebook.appevents.ml.ModelManager,N/A,getRuleFile(java.lang.String useCase),N/A,static java.io.File
com.facebook.appevents.ml.ModelManager,N/A,initialize(),N/A,static void
com.facebook.appevents.ml.ModelManager,N/A,"predict(java.lang.String useCase, float[] dense, java.lang.String text)",N/A,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",ABOUT,Information about the Place.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",APP_LINKS,AppLinks to the Place on various devices.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",CATEGORY_LIST,The Place's categories.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",CHECKINS,The number of checkins at this Place.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",CONFIDENCE_LEVEL,To be used on the current_place request.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",COVER,CoverPhoto.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",DESCRIPTION,The description of the Place.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",ENGAGEMENT,Engagement.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",HOURS,Specifies a single range of open hours per day.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",ID,The unique node ID of the place on the graph api.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",IS_ALWAYS_OPEN,Indicates whether this place is always open.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",IS_PERMANENTLY_CLOSED,Indicates whether this place is permanently closed.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",IS_VERIFIED,Pages with a large number of followers can be manually verified by Facebook as having an authentic identity.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",LINK,The place's web URL.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",LOCATION,Location information about the Place.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",MATCHED_CATEGORIES,The categories that this place matched.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",NAME,The name of the place.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",OVERALL_STAR_RATING,"Overall page rating based on a rating survey from users, on a scale of 1-5.",static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",PAGE,The Page node corresponding to the Place.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",PARKING,PageParking.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",PAYMENT_OPTIONS,The available payment options.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",PHONE,The place's phone number.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",PHOTOS_PROFILE,Profile photos posted by the place's Page.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",PICTURE,The current profile picture of the place's Page.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",PRICE_RANGE,Price range of the business.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",RATING_COUNT,Number of ratings for the place.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",RESTAURANT_SERVICES,Restaurant services.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",RESTAURANT_SPECIALTIES,PageRestaurantSpecialties.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",SINGLE_LINE_ADDRESS,"The address, in a single line of text.",static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",WEBSITE,The URL of the place's website.,static java.lang.String
PlaceFields,"Describes the fields available when searching for a place, or when querying a place's' information with PlaceManager. Refer to the online Places Graph documentation to get the complete list of supported place fields.",WORKFLOWS,Workflows.,static java.lang.String
com.facebook.places.model.PlaceInfoRequestParams,Describes the parameters used to create a place info request with PlaceManager.,getFields(),Gets the list of fields to be returned in the response.,java.util.Set<java.lang.String>
com.facebook.places.model.PlaceInfoRequestParams,Describes the parameters used to create a place info request with PlaceManager.,getPlaceId(),Gets the ID of the place to be queried.,java.lang.String
com.facebook.places.model.PlaceInfoRequestParams.Builder,Describes the builder to create a PlaceInfoRequestParams.,addField(java.lang.String field),Add a field to be returned in the response data.,PlaceInfoRequestParams.Builder
com.facebook.places.model.PlaceInfoRequestParams.Builder,Describes the builder to create a PlaceInfoRequestParams.,addFields(java.lang.String[] fields),Add a list of fields to be returned in the response data.,PlaceInfoRequestParams.Builder
com.facebook.places.model.PlaceInfoRequestParams.Builder,Describes the builder to create a PlaceInfoRequestParams.,build(),Returns the PlaceInfoRequestParams.,PlaceInfoRequestParams
com.facebook.places.model.PlaceInfoRequestParams.Builder,Describes the builder to create a PlaceInfoRequestParams.,setPlaceId(java.lang.String placeId),Sets the ID of the place to be queried.,PlaceInfoRequestParams.Builder
com.facebook.places.PlaceManager,"Provides an interface to search and query the Places Graph. Supports querying the end user's' current place, searching nearby places, and fetching place information details.",newCurrentPlaceFeedbackRequest(CurrentPlaceFeedbackRequestParams requestParams),Creates a new current place feedback request.,static GraphRequest
com.facebook.places.PlaceManager,"Provides an interface to search and query the Places Graph. Supports querying the end user's' current place, searching nearby places, and fetching place information details.","newCurrentPlaceRequest(CurrentPlaceRequestParams requestParams, PlaceManager.OnRequestReadyCallback callback)",Creates a new current place request.,static void
com.facebook.places.PlaceManager,"Provides an interface to search and query the Places Graph. Supports querying the end user's' current place, searching nearby places, and fetching place information details.",newPlaceInfoRequest(PlaceInfoRequestParams requestParams),Creates a new place info request.,static GraphRequest
com.facebook.places.PlaceManager,"Provides an interface to search and query the Places Graph. Supports querying the end user's' current place, searching nearby places, and fetching place information details.","newPlaceSearchRequest(PlaceSearchRequestParams requestParams, PlaceManager.OnRequestReadyCallback callback)",Creates a new place search request centered around the current device location.,static void
com.facebook.places.PlaceManager,"Provides an interface to search and query the Places Graph. Supports querying the end user's' current place, searching nearby places, and fetching place information details.","newPlaceSearchRequestForLocation(PlaceSearchRequestParams requestParams, Location location)",Creates a new place search request centered around the specified location.,static GraphRequest
com.facebook.places.PlaceManager.LocationError,Describes an error that occurred while retrieving the current location.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static PlaceManager.LocationError
com.facebook.places.PlaceManager.LocationError,Describes an error that occurred while retrieving the current location.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static PlaceManager.LocationError[]
PlaceManager.OnRequestReadyCallback,"Callback invoked when a request has been constructed and is ready to be executed. To be used with PlaceManager.newCurrentPlaceRequest(CurrentPlaceRequestParams, OnRequestReadyCallback) and PlaceManager.newPlaceSearchRequest( PlaceSearchRequestParams, OnRequestReadyCallback).",onLocationError(PlaceManager.LocationError error),Method invoked when the request can't be generated due to an error retrieving the current device location.,void
PlaceManager.OnRequestReadyCallback,"Callback invoked when a request has been constructed and is ready to be executed. To be used with PlaceManager.newCurrentPlaceRequest(CurrentPlaceRequestParams, OnRequestReadyCallback) and PlaceManager.newPlaceSearchRequest( PlaceSearchRequestParams, OnRequestReadyCallback).",onRequestReady(GraphRequest graphRequest),Method invoked when the provided GraphRequest is ready to be executed.,void
com.facebook.places.model.PlaceSearchRequestParams,Describes the parameters to create a place search request with PlaceManager.,getCategories(),Gets the categories used to filter the place search results.,java.util.Set<java.lang.String>
com.facebook.places.model.PlaceSearchRequestParams,Describes the parameters to create a place search request with PlaceManager.,getDistance(),Gets the maximum distance (in meters) from the location specified.,int
com.facebook.places.model.PlaceSearchRequestParams,Describes the parameters to create a place search request with PlaceManager.,getFields(),Gets the list of fields to be returned in the response.,java.util.Set<java.lang.String>
com.facebook.places.model.PlaceSearchRequestParams,Describes the parameters to create a place search request with PlaceManager.,getLimit(),Sets the maximum number of results to be returned.,int
com.facebook.places.model.PlaceSearchRequestParams,Describes the parameters to create a place search request with PlaceManager.,getSearchText(),Gets the name of the place to search for.,java.lang.String
com.facebook.places.model.PlaceSearchRequestParams.Builder,Describes the builder to create a PlaceSearchRequestParams,addCategory(java.lang.String category),Add a place category to restrict the search results.,PlaceSearchRequestParams.Builder
com.facebook.places.model.PlaceSearchRequestParams.Builder,Describes the builder to create a PlaceSearchRequestParams,addField(java.lang.String field),Add a place information field to the list of fields to be returned.,PlaceSearchRequestParams.Builder
com.facebook.places.model.PlaceSearchRequestParams.Builder,Describes the builder to create a PlaceSearchRequestParams,build(),Returns the PlaceSearchRequestParams.,PlaceSearchRequestParams
com.facebook.places.model.PlaceSearchRequestParams.Builder,Describes the builder to create a PlaceSearchRequestParams,setDistance(int distance),Sets the maximum search radius in meters.,PlaceSearchRequestParams.Builder
com.facebook.places.model.PlaceSearchRequestParams.Builder,Describes the builder to create a PlaceSearchRequestParams,setLimit(int limit),Sets the maximum number of places to be returned.,PlaceSearchRequestParams.Builder
com.facebook.places.model.PlaceSearchRequestParams.Builder,Describes the builder to create a PlaceSearchRequestParams,setSearchText(java.lang.String searchText),Sets the name of the place to search for.,PlaceSearchRequestParams.Builder
com.facebook.Profile,This class represents a basic Facebook profile.,describeContents(),N/A,int
com.facebook.Profile,This class represents a basic Facebook profile.,equals(java.lang.Object other),N/A,boolean
com.facebook.Profile,This class represents a basic Facebook profile.,fetchProfileForCurrentAccessToken(),Fetches and sets the current profile from the current access token.,static void
com.facebook.Profile,This class represents a basic Facebook profile.,getCurrentProfile(),Getter for the profile that is currently logged in to the application.,static Profile
com.facebook.Profile,This class represents a basic Facebook profile.,getFirstName(),Getter for the first name of the profile.,java.lang.String
com.facebook.Profile,This class represents a basic Facebook profile.,getId(),Getter for the id of the profile.,java.lang.String
com.facebook.Profile,This class represents a basic Facebook profile.,getLastName(),Getter for the last name of the profile.,java.lang.String
com.facebook.Profile,This class represents a basic Facebook profile.,getLinkUri(),Getter for the link of the profile.,Uri
com.facebook.Profile,This class represents a basic Facebook profile.,getMiddleName(),Getter for the middle name of the profile.,java.lang.String
com.facebook.Profile,This class represents a basic Facebook profile.,getName(),Getter for the name of the profile.,java.lang.String
com.facebook.Profile,This class represents a basic Facebook profile.,"getProfilePictureUri(int width, int height)",Getter for the Uri of the profile picture.,Uri
com.facebook.Profile,This class represents a basic Facebook profile.,hashCode(),N/A,int
com.facebook.Profile,This class represents a basic Facebook profile.,setCurrentProfile(Profile profile),Setter for the profile that is currently logged in to the application.,static void
com.facebook.Profile,This class represents a basic Facebook profile.,"writeToParcel(Parcel dest, int flags)",N/A,void
com.facebook.ProfileManager,N/A,ACTION_CURRENT_PROFILE_CHANGED,N/A,static java.lang.String
com.facebook.ProfileManager,N/A,EXTRA_NEW_PROFILE,N/A,static java.lang.String
com.facebook.ProfileManager,N/A,EXTRA_OLD_PROFILE,N/A,static java.lang.String
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",getOnErrorListener(),Returns the current OnErrorListener for this instance of ProfilePictureView,ProfilePictureView.OnErrorListener
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",getPresetSize(),Gets the current preset size type,int
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",getProfileId(),Returns the profile Id for the current profile photo,java.lang.String
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",isCropped(),Indicates whether the cropped version of the profile photo has been chosen,boolean
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",onDetachedFromWindow(),N/A,protected void
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.","onLayout(boolean changed, int left, int top, int right, int bottom)","In addition to calling super.Layout(), we also attempt to get a new image that is properly sized for the layout dimensions",protected void
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.","onMeasure(int widthMeasureSpec, int heightMeasureSpec)",Overriding onMeasure to handle the case where WRAP_CONTENT might be specified in the layout.,protected void
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",onRestoreInstanceState(Parcelable state),"If the passed in state is a Bundle, an attempt is made to restore from it.",protected void
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",onSaveInstanceState(),Some of the current state is returned as a Bundle to allow quick restoration of the ProfilePictureView object in scenarios like orientation changes.,protected Parcelable
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",setCropped(boolean showCroppedVersion),"Sets the profile photo to be the cropped version, or the original version",void
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",setDefaultProfilePicture(Bitmap inputBitmap),"The ProfilePictureView will display the provided image while the specified profile is being loaded, or if the specified profile is not available.",void
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",setOnErrorListener(ProfilePictureView.OnErrorListener onErrorListener),Sets an OnErrorListener for this instance of ProfilePictureView to call into when certain errors occur.,void
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",setPresetSize(int sizeType),Apply a preset size to this profile photo,void
com.facebook.login.widget.ProfilePictureView,"View that displays the profile photo of a supplied profile ID, while conforming to user specified dimensions.",setProfileId(java.lang.String profileId),Sets the profile Id for this profile photo,void
ProfilePictureView.OnErrorListener,Callback interface that will be called when a network or other error is encountered while retrieving profile pictures.,onError(FacebookException error),Called when a network or other error is encountered.,void
com.facebook.ProfileTracker,This class can be extended to receive notifications of profile changes. The stopTracking() method should be called in the onDestroy() method of the receiving Activity or Fragment.,isTracking(),Gets whether the tracker is tracking the current access token.,boolean
com.facebook.ProfileTracker,This class can be extended to receive notifications of profile changes. The stopTracking() method should be called in the onDestroy() method of the receiving Activity or Fragment.,"onCurrentProfileChanged(Profile oldProfile, Profile currentProfile)",The method that will be called when the profile changes.,protected abstract void
com.facebook.ProfileTracker,This class can be extended to receive notifications of profile changes. The stopTracking() method should be called in the onDestroy() method of the receiving Activity or Fragment.,startTracking(),Starts tracking the current profile.,void
com.facebook.ProfileTracker,This class can be extended to receive notifications of profile changes. The stopTracking() method should be called in the onDestroy() method of the receiving Activity or Fragment.,stopTracking(),Stops tracking the current profile.,void
com.facebook.appevents.codeless.RCTCodelessLoggingEventListener,N/A,"getOnTouchListener(com.facebook.appevents.codeless.internal.EventBinding mapping, View rootView, View hostView)",N/A,static RCTCodelessLoggingEventListener.AutoLoggingOnTouchListener
com.facebook.appevents.codeless.RCTCodelessLoggingEventListener.AutoLoggingOnTouchListener,N/A,getSupportCodelessLogging(),N/A,boolean
com.facebook.appevents.codeless.RCTCodelessLoggingEventListener.AutoLoggingOnTouchListener,N/A,"onTouch(View view, MotionEvent motionEvent)",N/A,boolean
com.facebook.appevents.restrictivedatafilter.RestrictiveDataManager,N/A,enable(),N/A,static void
com.facebook.appevents.restrictivedatafilter.RestrictiveDataManager,N/A,"processParameters(java.util.Map<java.lang.String,java.lang.String> parameters, java.lang.String eventName)",N/A,static void
com.facebook.share.widget.SendButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getDefaultRequestCode(),Deprecated. ,protected int
com.facebook.share.widget.SendButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getDefaultStyleResource(),Deprecated. ,protected int
com.facebook.share.widget.SendButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getDialog(),Deprecated. ,"protected com.facebook.internal.FacebookDialogBase<ShareContent,Sharer.Result>"
com.facebook.share.ShareApi,"Provides an interface for sharing through the graph API. Using this class requires an access token in AccessToken.currentAccessToken that has been granted the ""publish_actions"" permission.",canShare(),Returns true if the content can be shared.,boolean
com.facebook.share.ShareApi,"Provides an interface for sharing through the graph API. Using this class requires an access token in AccessToken.currentAccessToken that has been granted the ""publish_actions"" permission.",getGraphNode(),Returns the graph node to share to.,java.lang.String
com.facebook.share.ShareApi,"Provides an interface for sharing through the graph API. Using this class requires an access token in AccessToken.currentAccessToken that has been granted the ""publish_actions"" permission.",getMessage(),Returns the message the person has provided through the custom dialog that will accompany the share content.,java.lang.String
com.facebook.share.ShareApi,"Provides an interface for sharing through the graph API. Using this class requires an access token in AccessToken.currentAccessToken that has been granted the ""publish_actions"" permission.",getShareContent(),Returns the content to be shared.,ShareContent
com.facebook.share.ShareApi,"Provides an interface for sharing through the graph API. Using this class requires an access token in AccessToken.currentAccessToken that has been granted the ""publish_actions"" permission.",setGraphNode(java.lang.String graphNode),"Sets the graph node to share to (this can be a user id, event id, page id, group id, album id, etc).",void
com.facebook.share.ShareApi,"Provides an interface for sharing through the graph API. Using this class requires an access token in AccessToken.currentAccessToken that has been granted the ""publish_actions"" permission.",setMessage(java.lang.String message),Sets the message the person has provided through the custom dialog that will accompany the share content.,void
com.facebook.share.ShareApi,"Provides an interface for sharing through the graph API. Using this class requires an access token in AccessToken.currentAccessToken that has been granted the ""publish_actions"" permission.",share(FacebookCallback<Sharer.Result> callback),Share the content.,void
com.facebook.share.ShareApi,"Provides an interface for sharing through the graph API. Using this class requires an access token in AccessToken.currentAccessToken that has been granted the ""publish_actions"" permission.","share(ShareContent shareContent, FacebookCallback<Sharer.Result> callback)",Convenience method to share a piece of content.,static void
ShareBuilder,Interface for builders related to sharing.,build(),Builds the object.,P
com.facebook.share.widget.ShareButton,A button to share content on Facebook. Tapping the receiver will invoke the ShareDialog with the attached shareContent.,"configureButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)",N/A,protected void
com.facebook.share.widget.ShareButton,A button to share content on Facebook. Tapping the receiver will invoke the ShareDialog with the attached shareContent.,getDefaultRequestCode(),N/A,protected int
com.facebook.share.widget.ShareButton,A button to share content on Facebook. Tapping the receiver will invoke the ShareDialog with the attached shareContent.,getDefaultStyleResource(),N/A,protected int
com.facebook.share.widget.ShareButton,A button to share content on Facebook. Tapping the receiver will invoke the ShareDialog with the attached shareContent.,getDialog(),N/A,"protected com.facebook.internal.FacebookDialogBase<ShareContent,Sharer.Result>"
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,canShare(),N/A,protected boolean
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,"configureButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)",N/A,protected void
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,getDialog(),N/A,"protected abstract com.facebook.internal.FacebookDialogBase<ShareContent,Sharer.Result>"
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,getRequestCode(),Returns the request code used for this Button.,int
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,getShareContent(),Returns the share content from the button.,ShareContent
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,getShareOnClickListener(),N/A,protected OnClickListener
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,"registerCallback(CallbackManager callbackManager, FacebookCallback<Sharer.Result> callback)",Allows registration of a callback for when the share completes.,void
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,"registerCallback(CallbackManager callbackManager, FacebookCallback<Sharer.Result> callback, int requestCode)",Allows registration of a callback for when the share completes.,void
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,setEnabled(boolean enabled),N/A,void
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,setRequestCode(int requestCode),Set the request code for the startActivityForResult call.,protected void
com.facebook.share.widget.ShareButtonBase,A base class for sharing buttons.,setShareContent(ShareContent shareContent),Sets the share content on the button.,void
com.facebook.share.model.ShareCameraEffectContent,Describes the Camera Effect to be shared. Use ShareCameraEffectContent.Builder to build instances. See documentation for best practices.,getArguments(),"Returns the Arguments for the Effect represented in this content instance, as set in the Builder.",CameraEffectArguments
com.facebook.share.model.ShareCameraEffectContent,Describes the Camera Effect to be shared. Use ShareCameraEffectContent.Builder to build instances. See documentation for best practices.,getEffectId(),"Returns the Effect Id represented in this content instance, as set in the Builder.",java.lang.String
com.facebook.share.model.ShareCameraEffectContent,Describes the Camera Effect to be shared. Use ShareCameraEffectContent.Builder to build instances. See documentation for best practices.,getTextures(),"Returns the Textures for the Effect represented in this content instance, as set in the Builder.",CameraEffectTextures
com.facebook.share.model.ShareCameraEffectContent,Describes the Camera Effect to be shared. Use ShareCameraEffectContent.Builder to build instances. See documentation for best practices.,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.ShareCameraEffectContent.Builder,Builder for the ShareCameraEffectContent interface.,build(),Creates a new instance of ShareCameraEffectContent with the properties as set on this Builder instance,ShareCameraEffectContent
com.facebook.share.model.ShareCameraEffectContent.Builder,Builder for the ShareCameraEffectContent interface.,readFrom(ShareCameraEffectContent model),Reads the values from a ShareModel into the builder.,ShareCameraEffectContent.Builder
com.facebook.share.model.ShareCameraEffectContent.Builder,Builder for the ShareCameraEffectContent interface.,setArguments(CameraEffectArguments arguments),Sets the Arguments for the Effect represented by this content instance.,ShareCameraEffectContent.Builder
com.facebook.share.model.ShareCameraEffectContent.Builder,Builder for the ShareCameraEffectContent interface.,setEffectId(java.lang.String effectId),Sets the Effect Id for the Effect represented by this content instance.,ShareCameraEffectContent.Builder
com.facebook.share.model.ShareCameraEffectContent.Builder,Builder for the ShareCameraEffectContent interface.,setTextures(CameraEffectTextures textures),Sets the Textures for the Effect represented by this content instance.,ShareCameraEffectContent.Builder
"com.facebook.share.model.ShareContent<P,E>",Provides the base class for content to be shared. Contains all common methods for the different types of content.,describeContents(),N/A,int
"com.facebook.share.model.ShareContent<P,E>",Provides the base class for content to be shared. Contains all common methods for the different types of content.,getContentUrl(),URL for the content being shared.,Uri
"com.facebook.share.model.ShareContent<P,E>",Provides the base class for content to be shared. Contains all common methods for the different types of content.,getPageId(),"For shares into Messenger, this pageID will be used to map the app to page and attach attribution to the share.",java.lang.String
"com.facebook.share.model.ShareContent<P,E>",Provides the base class for content to be shared. Contains all common methods for the different types of content.,getPeopleIds(),List of Ids for taggable people to tag with this content.,java.util.List<java.lang.String>
"com.facebook.share.model.ShareContent<P,E>",Provides the base class for content to be shared. Contains all common methods for the different types of content.,getPlaceId(),The Id for a place to tag with this content.,java.lang.String
"com.facebook.share.model.ShareContent<P,E>",Provides the base class for content to be shared. Contains all common methods for the different types of content.,getRef(),A value to be added to the referrer URL when a person follows a link from this shared content on feed.,java.lang.String
"com.facebook.share.model.ShareContent<P,E>",Provides the base class for content to be shared. Contains all common methods for the different types of content.,getShareHashtag(),"Gets the ShareHashtag, if one has been set, for this content.",ShareHashtag
"com.facebook.share.model.ShareContent<P,E>",Provides the base class for content to be shared. Contains all common methods for the different types of content.,"writeToParcel(Parcel out, int flags)",N/A,void
"com.facebook.share.model.ShareContent.Builder<P,E>",Abstract builder for ShareContent,readFrom(P content),Reads the values from a ShareModel into the builder.,E
"com.facebook.share.model.ShareContent.Builder<P,E>",Abstract builder for ShareContent,setContentUrl(Uri contentUrl),Set the URL for the content being shared.,E
"com.facebook.share.model.ShareContent.Builder<P,E>",Abstract builder for ShareContent,setPageId(java.lang.String pageId),Set the Id of the Facebook page this share is associated with.,E
"com.facebook.share.model.ShareContent.Builder<P,E>",Abstract builder for ShareContent,setPeopleIds(java.util.List<java.lang.String> peopleIds),Set the list of Ids for taggable people to tag with this content.,E
"com.facebook.share.model.ShareContent.Builder<P,E>",Abstract builder for ShareContent,setPlaceId(java.lang.String placeId),Set the Id for a place to tag with this content.,E
"com.facebook.share.model.ShareContent.Builder<P,E>",Abstract builder for ShareContent,setRef(java.lang.String ref),Set the value to be added to the referrer URL when a person follows a link from this shared content on feed.,E
"com.facebook.share.model.ShareContent.Builder<P,E>",Abstract builder for ShareContent,setShareHashtag(ShareHashtag shareHashtag),Set the ShareHashtag for this content,E
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,canShow(java.lang.Class<? extends ShareContent> contentType),Indicates whether it is possible to show the dialog for ShareContent of the specified type.,static boolean
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,"canShow(ShareContent content, ShareDialog.Mode mode)",Call this to check if the Share Dialog can be shown in a specific mode.,boolean
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,createBaseAppCall(),N/A,protected com.facebook.internal.AppCall
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,getOrderedModeHandlers(),N/A,protected java.util.List<com.facebook.internal.FacebookDialogBase.ModeHandler>
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,getShouldFailOnDataError(),Specifies whether the sharer should fail if it finds an error with the share content.,boolean
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,"registerCallbackImpl(com.facebook.internal.CallbackManagerImpl callbackManager, FacebookCallback<Sharer.Result> callback)",N/A,protected void
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,setShouldFailOnDataError(boolean shouldFailOnDataError),Specifies whether the sharer should fail if it finds an error with the share content.,void
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,"show(Activity activity, ShareContent shareContent)",Helper to show the provided ShareContent using the provided Activity.,static void
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,"show(android.app.Fragment fragment, ShareContent shareContent)",Helper to show the provided ShareContent using the provided Fragment.,static void
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,"show(Fragment fragment, ShareContent shareContent)",Helper to show the provided ShareContent using the provided Fragment.,static void
com.facebook.share.widget.ShareDialog,Provides functionality to share content via the Facebook Share Dialog,"show(ShareContent content, ShareDialog.Mode mode)",Call this to show the Share Dialog in a specific mode,void
com.facebook.share.widget.ShareDialog.Mode,The mode for the share dialog.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static ShareDialog.Mode
com.facebook.share.widget.ShareDialog.Mode,The mode for the share dialog.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static ShareDialog.Mode[]
com.facebook.ShareGraphRequest,"Create an User Owned Open Graph object Use this method to create an open graph object, which can then be posted utilizing the same GraphRequest methods as other GraphRequests.",createOpenGraphObject(ShareOpenGraphObject openGraphObject),"Create an User Owned Open Graph object Use this method to create an open graph object, which can then be posted utilizing the same GraphRequest methods as other GraphRequests.",static GraphRequest
com.facebook.share.model.ShareHashtag,Describes a hashtag for sharing. Use ShareHashtag.Builder to build instances,describeContents(),N/A,int
com.facebook.share.model.ShareHashtag,Describes a hashtag for sharing. Use ShareHashtag.Builder to build instances,getHashtag(),N/A,java.lang.String
com.facebook.share.model.ShareHashtag,Describes a hashtag for sharing. Use ShareHashtag.Builder to build instances,"writeToParcel(Parcel dest, int flags)",N/A,void
com.facebook.share.model.ShareHashtag.Builder,Builder for the ShareHashtag class.,build(),Builds the object.,ShareHashtag
com.facebook.share.model.ShareHashtag.Builder,Builder for the ShareHashtag class.,getHashtag(),N/A,java.lang.String
com.facebook.share.model.ShareHashtag.Builder,Builder for the ShareHashtag class.,readFrom(ShareHashtag model),Reads the values from a ShareModel into the builder.,ShareHashtag.Builder
com.facebook.share.model.ShareHashtag.Builder,Builder for the ShareHashtag class.,setHashtag(java.lang.String hashtag),Sets the hashtag value for this instance.,ShareHashtag.Builder
com.facebook.share.model.ShareLinkContent,Describes link content to be shared. Use ShareLinkContent.Builder to build instances. See documentation for best practices.,describeContents(),N/A,int
com.facebook.share.model.ShareLinkContent,Describes link content to be shared. Use ShareLinkContent.Builder to build instances. See documentation for best practices.,getContentDescription(),"Deprecated.  As of Graph API 2.9 this field is deprecated and may not function as expected. For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations. The description of the link. If not specified, this field is automatically populated by information scraped from the link, typically the title of the page.",java.lang.String
com.facebook.share.model.ShareLinkContent,Describes link content to be shared. Use ShareLinkContent.Builder to build instances. See documentation for best practices.,getContentTitle(),"Deprecated.  As of Graph API 2.9 this field is deprecated and may not function as expected. For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations. The title to display for this link.",java.lang.String
com.facebook.share.model.ShareLinkContent,Describes link content to be shared. Use ShareLinkContent.Builder to build instances. See documentation for best practices.,getImageUrl(),"Deprecated.  As of Graph API 2.9 this field is deprecated and may not function as expected. For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations. The URL of a picture to attach to this content.",Uri
com.facebook.share.model.ShareLinkContent,Describes link content to be shared. Use ShareLinkContent.Builder to build instances. See documentation for best practices.,getQuote(),The quoted text to display for this link.,java.lang.String
com.facebook.share.model.ShareLinkContent,Describes link content to be shared. Use ShareLinkContent.Builder to build instances. See documentation for best practices.,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.ShareLinkContent.Builder,Builder for the ShareLinkContent interface.,build(),Builds the object.,ShareLinkContent
com.facebook.share.model.ShareLinkContent.Builder,Builder for the ShareLinkContent interface.,readFrom(ShareLinkContent model),Reads the values from a ShareModel into the builder.,ShareLinkContent.Builder
com.facebook.share.model.ShareLinkContent.Builder,Builder for the ShareLinkContent interface.,setContentDescription(java.lang.String contentDescription),"Deprecated.  As of Graph API 2.9 this field is deprecated and may not function as expected. Set the contentDescription of the link. For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations.",ShareLinkContent.Builder
com.facebook.share.model.ShareLinkContent.Builder,Builder for the ShareLinkContent interface.,setContentTitle(java.lang.String contentTitle),"Deprecated.  As of Graph API 2.9 this field is deprecated and may not function as expected. For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations. Set the contentTitle to display for this link.",ShareLinkContent.Builder
com.facebook.share.model.ShareLinkContent.Builder,Builder for the ShareLinkContent interface.,setImageUrl(Uri imageUrl),"Deprecated.  As of Graph API 2.9 this field is deprecated and may not function as expected. For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations. Set the URL of a picture to attach to this content.",ShareLinkContent.Builder
com.facebook.share.model.ShareLinkContent.Builder,Builder for the ShareLinkContent interface.,setQuote(java.lang.String quote),Set the quote to display for this link.,ShareLinkContent.Builder
com.facebook.share.model.ShareMedia,"Base class for shared media (photos, videos, etc).",describeContents(),N/A,int
com.facebook.share.model.ShareMedia,"Base class for shared media (photos, videos, etc).",getMediaType(),N/A,abstract ShareMedia.Type
com.facebook.share.model.ShareMedia,"Base class for shared media (photos, videos, etc).",getParameters(),Deprecated.  This method is deprecated. Use GraphRequest directly to set parameters.,Bundle
com.facebook.share.model.ShareMedia,"Base class for shared media (photos, videos, etc).","writeToParcel(Parcel dest, int flags)",N/A,void
"com.facebook.share.model.ShareMedia.Builder<M,B>",Builder for the ShareMedia class.,readFrom(M model),Reads the values from a ShareModel into the builder.,B
"com.facebook.share.model.ShareMedia.Builder<M,B>",Builder for the ShareMedia class.,"setParameter(java.lang.String key, java.lang.String value)",Deprecated.  This method is deprecated. Use GraphRequest directly to set parameters.,B
"com.facebook.share.model.ShareMedia.Builder<M,B>",Builder for the ShareMedia class.,setParameters(Bundle parameters),Deprecated.  This method is deprecated. Use GraphRequest directly to set parameters.,B
com.facebook.share.model.ShareMedia.Type,Returns the enum constant of this type with the specified name.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static ShareMedia.Type
com.facebook.share.model.ShareMedia.Type,Returns the enum constant of this type with the specified name.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static ShareMedia.Type[]
com.facebook.share.model.ShareMediaContent,Builder for the SharePhotoContent interface.,describeContents(),N/A,int
com.facebook.share.model.ShareMediaContent,Builder for the SharePhotoContent interface.,getMedia(),Media to be shared.,java.util.List<ShareMedia>
com.facebook.share.model.ShareMediaContent,Builder for the SharePhotoContent interface.,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.ShareMediaContent.Builder,Builder for the SharePhotoContent interface.,addMedia(java.util.List<ShareMedia> media),Adds multiple media to the content.,ShareMediaContent.Builder
com.facebook.share.model.ShareMediaContent.Builder,Builder for the SharePhotoContent interface.,addMedium(ShareMedia medium),Adds a medium to the content.,ShareMediaContent.Builder
com.facebook.share.model.ShareMediaContent.Builder,Builder for the SharePhotoContent interface.,build(),Builds the object.,ShareMediaContent
com.facebook.share.model.ShareMediaContent.Builder,Builder for the SharePhotoContent interface.,readFrom(ShareMediaContent model),Reads the values from a ShareModel into the builder.,ShareMediaContent.Builder
com.facebook.share.model.ShareMediaContent.Builder,Builder for the SharePhotoContent interface.,setMedia(java.util.List<ShareMedia> media),Replaces the media for the builder.,ShareMediaContent.Builder
com.facebook.share.model.ShareMessengerActionButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",describeContents(),Deprecated. ,int
com.facebook.share.model.ShareMessengerActionButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getTitle(),Deprecated. ,java.lang.String
com.facebook.share.model.ShareMessengerActionButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""","writeToParcel(Parcel dest, int flags)",Deprecated. ,void
"com.facebook.share.model.ShareMessengerActionButton.Builder<M,B>",Abstract builder for ShareMessengerActionButton,readFrom(M model),Reads the values from a ShareModel into the builder.,B
"com.facebook.share.model.ShareMessengerActionButton.Builder<M,B>",Abstract builder for ShareMessengerActionButton,setTitle(java.lang.String title),Sets the title for the Messenger action button.,B
com.facebook.share.model.ShareMessengerGenericTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",describeContents(),Deprecated. ,int
com.facebook.share.model.ShareMessengerGenericTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getGenericTemplateElement(),Deprecated. ,ShareMessengerGenericTemplateElement
com.facebook.share.model.ShareMessengerGenericTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getImageAspectRatio(),Deprecated. ,ShareMessengerGenericTemplateContent.ImageAspectRatio
com.facebook.share.model.ShareMessengerGenericTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getIsSharable(),Deprecated. ,boolean
com.facebook.share.model.ShareMessengerGenericTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""","writeToParcel(Parcel out, int flags)",Deprecated. ,void
com.facebook.share.model.ShareMessengerGenericTemplateContent.Builder,Builder for the ShareMessengerGenericTemplateContent class.,build(),Builds the object.,ShareMessengerGenericTemplateContent
com.facebook.share.model.ShareMessengerGenericTemplateContent.Builder,Builder for the ShareMessengerGenericTemplateContent class.,readFrom(ShareMessengerGenericTemplateContent model),Reads the values from a ShareModel into the builder.,ShareMessengerGenericTemplateContent.Builder
com.facebook.share.model.ShareMessengerGenericTemplateContent.Builder,Builder for the ShareMessengerGenericTemplateContent class.,setGenericTemplateElement(ShareMessengerGenericTemplateElement genericTemplateElement),"Set a generic template element with a title, optional subtitle, optional image, etc.",ShareMessengerGenericTemplateContent.Builder
com.facebook.share.model.ShareMessengerGenericTemplateContent.Builder,Builder for the ShareMessengerGenericTemplateContent class.,setImageAspectRatio(ShareMessengerGenericTemplateContent.ImageAspectRatio imageAspectRatio),Set the aspect ratio for when the image is rendered in the generic template bubble after being shared.,ShareMessengerGenericTemplateContent.Builder
com.facebook.share.model.ShareMessengerGenericTemplateContent.Builder,Builder for the ShareMessengerGenericTemplateContent class.,setIsSharable(boolean isSharable),Set whether or not this generic template message can be shared again after the initial share.,ShareMessengerGenericTemplateContent.Builder
com.facebook.share.model.ShareMessengerGenericTemplateContent.ImageAspectRatio,The aspect ratio for when the image is rendered in the generic template bubble after being shared,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static ShareMessengerGenericTemplateContent.ImageAspectRatio
com.facebook.share.model.ShareMessengerGenericTemplateContent.ImageAspectRatio,The aspect ratio for when the image is rendered in the generic template bubble after being shared,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static ShareMessengerGenericTemplateContent.ImageAspectRatio[]
com.facebook.share.model.ShareMessengerGenericTemplateElement,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",describeContents(),Deprecated. ,int
com.facebook.share.model.ShareMessengerGenericTemplateElement,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getButton(),Deprecated. ,ShareMessengerActionButton
com.facebook.share.model.ShareMessengerGenericTemplateElement,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getDefaultAction(),Deprecated. ,ShareMessengerActionButton
com.facebook.share.model.ShareMessengerGenericTemplateElement,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getImageUrl(),Deprecated. ,Uri
com.facebook.share.model.ShareMessengerGenericTemplateElement,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getSubtitle(),Deprecated. ,java.lang.String
com.facebook.share.model.ShareMessengerGenericTemplateElement,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getTitle(),Deprecated. ,java.lang.String
com.facebook.share.model.ShareMessengerGenericTemplateElement,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""","writeToParcel(Parcel dest, int flags)",Deprecated. ,void
com.facebook.share.model.ShareMessengerGenericTemplateElement.Builder,Builder for the ShareMessengerGenericTemplateElement class.,build(),Builds the object.,ShareMessengerGenericTemplateElement
com.facebook.share.model.ShareMessengerGenericTemplateElement.Builder,Builder for the ShareMessengerGenericTemplateElement class.,readFrom(ShareMessengerGenericTemplateElement model),Reads the values from a ShareModel into the builder.,ShareMessengerGenericTemplateElement.Builder
com.facebook.share.model.ShareMessengerGenericTemplateElement.Builder,Builder for the ShareMessengerGenericTemplateElement class.,setButton(ShareMessengerActionButton button),Set the button to append to the bottom of the generic template.,ShareMessengerGenericTemplateElement.Builder
com.facebook.share.model.ShareMessengerGenericTemplateElement.Builder,Builder for the ShareMessengerGenericTemplateElement class.,setDefaultAction(ShareMessengerActionButton defaultAction),Set the default action executed when this shared generic template is tapped.,ShareMessengerGenericTemplateElement.Builder
com.facebook.share.model.ShareMessengerGenericTemplateElement.Builder,Builder for the ShareMessengerGenericTemplateElement class.,setImageUrl(Uri imageUrl),Set the image url that will be downloaded and rendered at the top of the generic template.,ShareMessengerGenericTemplateElement.Builder
com.facebook.share.model.ShareMessengerGenericTemplateElement.Builder,Builder for the ShareMessengerGenericTemplateElement class.,setSubtitle(java.lang.String subtitle),Set the rendered subtitle for the shared generic template element.,ShareMessengerGenericTemplateElement.Builder
com.facebook.share.model.ShareMessengerGenericTemplateElement.Builder,Builder for the ShareMessengerGenericTemplateElement class.,setTitle(java.lang.String title),Set the rendered title for the shared generic template element.,ShareMessengerGenericTemplateElement.Builder
com.facebook.share.model.ShareMessengerMediaTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",describeContents(),Deprecated. ,int
com.facebook.share.model.ShareMessengerMediaTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getAttachmentId(),Deprecated. ,java.lang.String
com.facebook.share.model.ShareMessengerMediaTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getButton(),Deprecated. ,ShareMessengerActionButton
com.facebook.share.model.ShareMessengerMediaTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getMediaType(),Deprecated. ,ShareMessengerMediaTemplateContent.MediaType
com.facebook.share.model.ShareMessengerMediaTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getMediaUrl(),Deprecated. ,Uri
com.facebook.share.model.ShareMessengerMediaTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""","writeToParcel(Parcel dest, int flags)",Deprecated. ,void
com.facebook.share.model.ShareMessengerMediaTemplateContent.Builder,Builder for the ShareMessengerMediaTemplateContent interface.,build(),Builds the object.,ShareMessengerMediaTemplateContent
com.facebook.share.model.ShareMessengerMediaTemplateContent.Builder,Builder for the ShareMessengerMediaTemplateContent interface.,readFrom(ShareMessengerMediaTemplateContent content),Reads the values from a ShareModel into the builder.,ShareMessengerMediaTemplateContent.Builder
com.facebook.share.model.ShareMessengerMediaTemplateContent.Builder,Builder for the ShareMessengerMediaTemplateContent interface.,setAttachmentId(java.lang.String attachmentId),Set the attachmentID of the item to share.,ShareMessengerMediaTemplateContent.Builder
com.facebook.share.model.ShareMessengerMediaTemplateContent.Builder,Builder for the ShareMessengerMediaTemplateContent interface.,setButton(ShareMessengerActionButton button),Set the action button to show below the media.,ShareMessengerMediaTemplateContent.Builder
com.facebook.share.model.ShareMessengerMediaTemplateContent.Builder,Builder for the ShareMessengerMediaTemplateContent interface.,setMediaType(ShareMessengerMediaTemplateContent.MediaType mediaType),Set the media type (image or video) for this content.,ShareMessengerMediaTemplateContent.Builder
com.facebook.share.model.ShareMessengerMediaTemplateContent.Builder,Builder for the ShareMessengerMediaTemplateContent interface.,setMediaUrl(Uri mediaUrl),Set the Facebook url for this piece of media.,ShareMessengerMediaTemplateContent.Builder
com.facebook.share.model.ShareMessengerMediaTemplateContent.MediaType,The media type (image or video) for this media template content.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static ShareMessengerMediaTemplateContent.MediaType
com.facebook.share.model.ShareMessengerMediaTemplateContent.MediaType,The media type (image or video) for this media template content.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static ShareMessengerMediaTemplateContent.MediaType[]
com.facebook.share.model.ShareMessengerOpenGraphMusicTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",describeContents(),Deprecated. ,int
com.facebook.share.model.ShareMessengerOpenGraphMusicTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getButton(),Deprecated. ,ShareMessengerActionButton
com.facebook.share.model.ShareMessengerOpenGraphMusicTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getUrl(),Deprecated. ,Uri
com.facebook.share.model.ShareMessengerOpenGraphMusicTemplateContent,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""","writeToParcel(Parcel dest, int flags)",Deprecated. ,void
com.facebook.share.model.ShareMessengerOpenGraphMusicTemplateContent.Builder,Builder for the ShareMessengerOpenGraphMusicTemplateContent interface.,build(),Builds the object.,ShareMessengerOpenGraphMusicTemplateContent
com.facebook.share.model.ShareMessengerOpenGraphMusicTemplateContent.Builder,Builder for the ShareMessengerOpenGraphMusicTemplateContent interface.,readFrom(ShareMessengerOpenGraphMusicTemplateContent content),Reads the values from a ShareModel into the builder.,ShareMessengerOpenGraphMusicTemplateContent.Builder
com.facebook.share.model.ShareMessengerOpenGraphMusicTemplateContent.Builder,Builder for the ShareMessengerOpenGraphMusicTemplateContent interface.,setButton(ShareMessengerActionButton button),Set the action button shown in the share attachment.,ShareMessengerOpenGraphMusicTemplateContent.Builder
com.facebook.share.model.ShareMessengerOpenGraphMusicTemplateContent.Builder,Builder for the ShareMessengerOpenGraphMusicTemplateContent interface.,setUrl(Uri url),Set the Open Graph music URL.,ShareMessengerOpenGraphMusicTemplateContent.Builder
com.facebook.share.model.ShareMessengerURLActionButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getFallbackUrl(),Deprecated. ,Uri
com.facebook.share.model.ShareMessengerURLActionButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getIsMessengerExtensionURL(),Deprecated. ,boolean
com.facebook.share.model.ShareMessengerURLActionButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getShouldHideWebviewShareButton(),Deprecated. ,boolean
com.facebook.share.model.ShareMessengerURLActionButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getUrl(),Deprecated. ,Uri
com.facebook.share.model.ShareMessengerURLActionButton,"Deprecated.  Sharing to Messenger via the SDK is unsupported. https://developers.facebook.com/docs/messenger-platform/changelog/#20190610. Sharing should be performed by the native share sheet.""",getWebviewHeightRatio(),Deprecated. ,ShareMessengerURLActionButton.WebviewHeightRatio
com.facebook.share.model.ShareMessengerURLActionButton.Builder,Builder class for ShareMessengerURLActionButton class.,build(),Builds the object.,ShareMessengerURLActionButton
com.facebook.share.model.ShareMessengerURLActionButton.Builder,Builder class for ShareMessengerURLActionButton class.,readFrom(ShareMessengerURLActionButton content),Reads the values from a ShareModel into the builder.,ShareMessengerURLActionButton.Builder
com.facebook.share.model.ShareMessengerURLActionButton.Builder,Builder class for ShareMessengerURLActionButton class.,setFallbackUrl(Uri fallbackUrl),Set the fallback URL for a Messenger Extensions enabled button.,ShareMessengerURLActionButton.Builder
com.facebook.share.model.ShareMessengerURLActionButton.Builder,Builder class for ShareMessengerURLActionButton class.,setIsMessengerExtensionURL(boolean isMessengerExtensionURL),Set whether the url is a Messenger Extensions url.,ShareMessengerURLActionButton.Builder
com.facebook.share.model.ShareMessengerURLActionButton.Builder,Builder class for ShareMessengerURLActionButton class.,setShouldHideWebviewShareButton(boolean shouldHideWebviewShareButton),Set whether we want to hide the share button in the webview or not.,ShareMessengerURLActionButton.Builder
com.facebook.share.model.ShareMessengerURLActionButton.Builder,Builder class for ShareMessengerURLActionButton class.,setUrl(Uri url),Set the URL of this action button.,ShareMessengerURLActionButton.Builder
com.facebook.share.model.ShareMessengerURLActionButton.Builder,Builder class for ShareMessengerURLActionButton class.,setWebviewHeightRatio(ShareMessengerURLActionButton.WebviewHeightRatio webviewHeightRatio),Set the display height ratio of the webview when shown in the Messenger app.,ShareMessengerURLActionButton.Builder
com.facebook.share.model.ShareMessengerURLActionButton.WebviewHeightRatio,The display height ratio of the webview when shown in the Messenger app.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static ShareMessengerURLActionButton.WebviewHeightRatio
com.facebook.share.model.ShareMessengerURLActionButton.WebviewHeightRatio,The display height ratio of the webview when shown in the Messenger app.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static ShareMessengerURLActionButton.WebviewHeightRatio[]
ShareModel,Base interface for share models.,N/A,N/A,N/A
ShareModelBuilder,Interface for builders related to sharing.,readFrom(P model),Reads the values from a ShareModel into the builder.,E
com.facebook.share.model.ShareOpenGraphAction,Describes an Open Graph action  Use ShareOpenGraphAction.Builder to create instances  See the documentation for Open Graph Actions.,getActionType(),The type for the action.,java.lang.String
com.facebook.share.model.ShareOpenGraphAction.Builder,Builder for the ShareOpenGraphAction interface.,build(),Builds the object.,ShareOpenGraphAction
com.facebook.share.model.ShareOpenGraphAction.Builder,Builder for the ShareOpenGraphAction interface.,readFrom(ShareOpenGraphAction model),Reads the values from a ShareModel into the builder.,ShareOpenGraphAction.Builder
com.facebook.share.model.ShareOpenGraphAction.Builder,Builder for the ShareOpenGraphAction interface.,setActionType(java.lang.String actionType),Sets the type for the action.,ShareOpenGraphAction.Builder
com.facebook.share.model.ShareOpenGraphContent,Describes Open Graph content that is to be shared  Use ShareOpenGraphContent.Builder to create instances  See the documentation for Open Graph and for best practices.,describeContents(),N/A,int
com.facebook.share.model.ShareOpenGraphContent,Describes Open Graph content that is to be shared  Use ShareOpenGraphContent.Builder to create instances  See the documentation for Open Graph and for best practices.,getAction(),The Open Graph Action for the content.,ShareOpenGraphAction
com.facebook.share.model.ShareOpenGraphContent,Describes Open Graph content that is to be shared  Use ShareOpenGraphContent.Builder to create instances  See the documentation for Open Graph and for best practices.,getPreviewPropertyName(),The property name for the primary ShareOpenGraphObject in the action.,java.lang.String
com.facebook.share.model.ShareOpenGraphContent,Describes Open Graph content that is to be shared  Use ShareOpenGraphContent.Builder to create instances  See the documentation for Open Graph and for best practices.,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.ShareOpenGraphContent.Builder,Builder for the ShareOpenGraphContent interface.,build(),Builds the object.,ShareOpenGraphContent
com.facebook.share.model.ShareOpenGraphContent.Builder,Builder for the ShareOpenGraphContent interface.,readFrom(ShareOpenGraphContent model),Reads the values from a ShareModel into the builder.,ShareOpenGraphContent.Builder
com.facebook.share.model.ShareOpenGraphContent.Builder,Builder for the ShareOpenGraphContent interface.,setAction(ShareOpenGraphAction action),Sets the Open Graph Action for the content.,ShareOpenGraphContent.Builder
com.facebook.share.model.ShareOpenGraphContent.Builder,Builder for the ShareOpenGraphContent interface.,setPreviewPropertyName(java.lang.String previewPropertyName),Sets the property name for the primary ShareOpenGraphObject in the action.,ShareOpenGraphContent.Builder
com.facebook.share.model.ShareOpenGraphObject,Describes an Open Graph Object to be created.  Use ShareOpenGraphObject.Builder to create instances  See the documentation for Open Graph Objects.,CREATOR,N/A,static <any>
com.facebook.share.model.ShareOpenGraphObject.Builder,Builder for the ShareOpenGraphObject interface.,build(),Builds the object.,ShareOpenGraphObject
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,describeContents(),N/A,int
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,get(java.lang.String key),Gets a value out of the object.,java.lang.Object
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,"getBoolean(java.lang.String key, boolean defaultValue)",Gets a boolean value out of the object.,boolean
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getBooleanArray(java.lang.String key),Gets an array of boolean values out of the object.,boolean[]
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getBundle(),Returns the values in the container packaged in a bundle.,Bundle
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,"getDouble(java.lang.String key, double defaultValue)",Gets a double value out of the object.,double
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getDoubleArray(java.lang.String key),Gets an array of double values out of the object.,double[]
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,"getInt(java.lang.String key, int defaultValue)",Gets an int value out of the object.,int
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getIntArray(java.lang.String key),Gets an array of int values out of the object.,int[]
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,"getLong(java.lang.String key, long defaultValue)",Gets an long value out of the object.,long
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getLongArray(java.lang.String key),Gets an array of long values out of the object.,long[]
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getObject(java.lang.String key),Gets an object value out of the object.,ShareOpenGraphObject
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getObjectArrayList(java.lang.String key),Gets an array of object values out of the object.,java.util.ArrayList<ShareOpenGraphObject>
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getPhoto(java.lang.String key),Gets a photo value out of the object.,SharePhoto
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getPhotoArrayList(java.lang.String key),Gets an array of photo values out of the object.,java.util.ArrayList<SharePhoto>
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getString(java.lang.String key),Gets a string value out of the object.,java.lang.String
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,getStringArrayList(java.lang.String key),Gets an array of string values out of the object.,java.util.ArrayList<java.lang.String>
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,keySet(),Returns a set of the keys contained in this object.,java.util.Set<java.lang.String>
"com.facebook.share.model.ShareOpenGraphValueContainer<P,E>",Provides an abstract class to contain Open Graph values. Use ShareOpenGraphValueContainer.Builder to create instances,"writeToParcel(Parcel out, int flags)",N/A,void
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putBoolean(java.lang.String key, boolean value)",Sets a boolean value in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putBooleanArray(java.lang.String key, boolean[] value)",Sets an array of boolean values in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putDouble(java.lang.String key, double value)",Sets a double value in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putDoubleArray(java.lang.String key, double[] value)",Sets an array of double values in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putInt(java.lang.String key, int value)",Sets an int value in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putIntArray(java.lang.String key, int[] value)",Sets an array of int values in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putLong(java.lang.String key, long value)",Sets a long value in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putLongArray(java.lang.String key, long[] value)",Sets an array of long values in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putObject(java.lang.String key, ShareOpenGraphObject value)",Sets an object value in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putObjectArrayList(java.lang.String key, java.util.ArrayList<ShareOpenGraphObject> value)",Sets an array of object values in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putPhoto(java.lang.String key, SharePhoto value)",Sets a photo value in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putPhotoArrayList(java.lang.String key, java.util.ArrayList<SharePhoto> value)",Sets an array of photo values in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putString(java.lang.String key, java.lang.String value)",Sets a string value in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,"putStringArrayList(java.lang.String key, java.util.ArrayList<java.lang.String> value)",Sets an array of string values in the object.,E
"com.facebook.share.model.ShareOpenGraphValueContainer.Builder<P,E>",Abstract builder for the ShareOpenGraphValueContainer class.,readFrom(P model),Reads the values from a ShareModel into the builder.,E
com.facebook.share.model.SharePhoto,Describes a photo for sharing. Use SharePhoto.Builder to build instances,describeContents(),N/A,int
com.facebook.share.model.SharePhoto,Describes a photo for sharing. Use SharePhoto.Builder to build instances,getBitmap(),"If the photo is resident in memory, this method supplies the data.",Bitmap
com.facebook.share.model.SharePhoto,Describes a photo for sharing. Use SharePhoto.Builder to build instances,getCaption(),Gets the user generated caption.,java.lang.String
com.facebook.share.model.SharePhoto,Describes a photo for sharing. Use SharePhoto.Builder to build instances,getImageUrl(),The URL to the photo.,Uri
com.facebook.share.model.SharePhoto,Describes a photo for sharing. Use SharePhoto.Builder to build instances,getMediaType(),N/A,ShareMedia.Type
com.facebook.share.model.SharePhoto,Describes a photo for sharing. Use SharePhoto.Builder to build instances,getUserGenerated(),Specifies whether the photo represented by this object was generated by the user or by the application.,boolean
com.facebook.share.model.SharePhoto,Describes a photo for sharing. Use SharePhoto.Builder to build instances,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.SharePhoto.Builder,Builder for the SharePhoto class.,build(),Builds the object.,SharePhoto
com.facebook.share.model.SharePhoto.Builder,Builder for the SharePhoto class.,readFrom(SharePhoto model),Reads the values from a ShareModel into the builder.,SharePhoto.Builder
com.facebook.share.model.SharePhoto.Builder,Builder for the SharePhoto class.,setBitmap(Bitmap bitmap),Sets the bitmap representation of the photo.,SharePhoto.Builder
com.facebook.share.model.SharePhoto.Builder,Builder for the SharePhoto class.,setCaption(java.lang.String caption),Sets the user generated caption for the photo.,SharePhoto.Builder
com.facebook.share.model.SharePhoto.Builder,Builder for the SharePhoto class.,setImageUrl(Uri imageUrl),Sets the URL to the photo.,SharePhoto.Builder
com.facebook.share.model.SharePhoto.Builder,Builder for the SharePhoto class.,setUserGenerated(boolean userGenerated),Sets whether the photo represented by this object was generated by the user or by the application.,SharePhoto.Builder
com.facebook.share.model.SharePhotoContent,Describes photo content to be shared. Use SharePhotoContent.Builder to create instances,describeContents(),N/A,int
com.facebook.share.model.SharePhotoContent,Describes photo content to be shared. Use SharePhotoContent.Builder to create instances,getPhotos(),Photos to be shared.,java.util.List<SharePhoto>
com.facebook.share.model.SharePhotoContent,Describes photo content to be shared. Use SharePhotoContent.Builder to create instances,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.SharePhotoContent.Builder,Builder for the SharePhotoContent interface.,addPhoto(SharePhoto photo),Adds a photo to the content.,SharePhotoContent.Builder
com.facebook.share.model.SharePhotoContent.Builder,Builder for the SharePhotoContent interface.,addPhotos(java.util.List<SharePhoto> photos),Adds multiple photos to the content.,SharePhotoContent.Builder
com.facebook.share.model.SharePhotoContent.Builder,Builder for the SharePhotoContent interface.,build(),Builds the object.,SharePhotoContent
com.facebook.share.model.SharePhotoContent.Builder,Builder for the SharePhotoContent interface.,readFrom(SharePhotoContent model),Reads the values from a ShareModel into the builder.,SharePhotoContent.Builder
com.facebook.share.model.SharePhotoContent.Builder,Builder for the SharePhotoContent interface.,setPhotos(java.util.List<SharePhoto> photos),Replaces the photos for the builder.,SharePhotoContent.Builder
Sharer,The common interface for components that initiate sharing.,getShouldFailOnDataError(),Specifies whether the sharer should fail if it finds an error with the share content.,boolean
Sharer,The common interface for components that initiate sharing.,setShouldFailOnDataError(boolean shouldFailOnDataError),Specifies whether the sharer should fail if it finds an error with the share content.,void
com.facebook.share.Sharer.Result,Helper object for handling the result from a share dialog or share operation,getPostId(),"Returns the post id, if available.",java.lang.String
com.facebook.share.model.ShareStoryContent,"Describes content (video, photo, sticker) to be shared into story.",describeContents(),N/A,int
com.facebook.share.model.ShareStoryContent,"Describes content (video, photo, sticker) to be shared into story.",getAttributionLink(),N/A,java.lang.String
com.facebook.share.model.ShareStoryContent,"Describes content (video, photo, sticker) to be shared into story.",getBackgroundAsset(),N/A,ShareMedia
com.facebook.share.model.ShareStoryContent,"Describes content (video, photo, sticker) to be shared into story.",getBackgroundColorList(),N/A,java.util.List<java.lang.String>
com.facebook.share.model.ShareStoryContent,"Describes content (video, photo, sticker) to be shared into story.",getStickerAsset(),N/A,SharePhoto
com.facebook.share.model.ShareStoryContent,"Describes content (video, photo, sticker) to be shared into story.","writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.ShareStoryContent.Builder,Builder for the interface.,build(),Builds the object.,ShareStoryContent
com.facebook.share.model.ShareStoryContent.Builder,Builder for the interface.,readFrom(ShareStoryContent model),Reads the values from a ShareModel into the builder.,ShareStoryContent.Builder
com.facebook.share.model.ShareStoryContent.Builder,Builder for the interface.,setAttributionLink(java.lang.String attributionLink),Set the attribution link,ShareStoryContent.Builder
com.facebook.share.model.ShareStoryContent.Builder,Builder for the interface.,setBackgroundAsset(ShareMedia backgroundAsset),Set the Background Asset to display,ShareStoryContent.Builder
com.facebook.share.model.ShareStoryContent.Builder,Builder for the interface.,setBackgroundColorList(java.util.List<java.lang.String> backgroundColorList),Set the background color list to display,ShareStoryContent.Builder
com.facebook.share.model.ShareStoryContent.Builder,Builder for the interface.,setStickerAsset(SharePhoto stickerAsset),Set the Sticker Asset to display,ShareStoryContent.Builder
com.facebook.messenger.ShareToMessengerParams,Parameters used by MessengerUtils for sending the media to Messenger to share. See developer docs for more info.,"newBuilder(Uri uri, java.lang.String mimeType)",Creates a new builder for creating a ShareToMessengerParams instance,static ShareToMessengerParamsBuilder
com.facebook.messenger.ShareToMessengerParamsBuilder,Builder for ShareToMessengerParams.,build(),Builds the parameter object.,ShareToMessengerParams
com.facebook.messenger.ShareToMessengerParamsBuilder,Builder for ShareToMessengerParams.,getExternalUri(),Gets an external URI that Messenger can use to download the content on Facebook's servers instead of requiring the Messenger application to upload the content.,Uri
com.facebook.messenger.ShareToMessengerParamsBuilder,Builder for ShareToMessengerParams.,getMetaData(),Gets the metadata to attach to the content to shared.,java.lang.String
com.facebook.messenger.ShareToMessengerParamsBuilder,Builder for ShareToMessengerParams.,getMimeType(),Gets the mime type of the content.,java.lang.String
com.facebook.messenger.ShareToMessengerParamsBuilder,Builder for ShareToMessengerParams.,getUri(),"Gets the URI of the local image, video, or audio clip to send to messenger.",Uri
com.facebook.messenger.ShareToMessengerParamsBuilder,Builder for ShareToMessengerParams.,setExternalUri(Uri externalUri),Sets an external URI that Messenger can use to download the content on Facebook's servers instead of requiring the Messenger application to upload the content.,ShareToMessengerParamsBuilder
com.facebook.messenger.ShareToMessengerParamsBuilder,Builder for ShareToMessengerParams.,setMetaData(java.lang.String metaData),Sets the metadata to attach to the content to shared.,ShareToMessengerParamsBuilder
com.facebook.share.model.ShareVideo,Describes a video for sharing. Use ShareVideo.Builder to create instances,describeContents(),N/A,int
com.facebook.share.model.ShareVideo,Describes a video for sharing. Use ShareVideo.Builder to create instances,getLocalUrl(),This method supplies the URL to locate the video.,Uri
com.facebook.share.model.ShareVideo,Describes a video for sharing. Use ShareVideo.Builder to create instances,getMediaType(),N/A,ShareMedia.Type
com.facebook.share.model.ShareVideo,Describes a video for sharing. Use ShareVideo.Builder to create instances,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.ShareVideo.Builder,Builder for the ShareVideo class.,build(),Builds the object.,ShareVideo
com.facebook.share.model.ShareVideo.Builder,Builder for the ShareVideo class.,readFrom(ShareVideo model),Reads the values from a ShareModel into the builder.,ShareVideo.Builder
com.facebook.share.model.ShareVideo.Builder,Builder for the ShareVideo class.,setLocalUrl(Uri localUrl),Sets the URL to locate the video.,ShareVideo.Builder
com.facebook.share.model.ShareVideoContent,Provides the interface for video content to be shared. A general use builder is available in ShareVideoContent.Builder.,describeContents(),N/A,int
com.facebook.share.model.ShareVideoContent,Provides the interface for video content to be shared. A general use builder is available in ShareVideoContent.Builder.,getContentDescription(),The description of the video.,java.lang.String
com.facebook.share.model.ShareVideoContent,Provides the interface for video content to be shared. A general use builder is available in ShareVideoContent.Builder.,getContentTitle(),The title to display for this video.,java.lang.String
com.facebook.share.model.ShareVideoContent,Provides the interface for video content to be shared. A general use builder is available in ShareVideoContent.Builder.,getPreviewPhoto(),Photo to be used as a preview for the video.,SharePhoto
com.facebook.share.model.ShareVideoContent,Provides the interface for video content to be shared. A general use builder is available in ShareVideoContent.Builder.,getVideo(),Video to be shared.,ShareVideo
com.facebook.share.model.ShareVideoContent,Provides the interface for video content to be shared. A general use builder is available in ShareVideoContent.Builder.,"writeToParcel(Parcel out, int flags)",N/A,void
com.facebook.share.model.ShareVideoContent.Builder,Builder for the ShareVideoContent interface.,build(),Builds the object.,ShareVideoContent
com.facebook.share.model.ShareVideoContent.Builder,Builder for the ShareVideoContent interface.,readFrom(ShareVideoContent model),Reads the values from a ShareModel into the builder.,ShareVideoContent.Builder
com.facebook.share.model.ShareVideoContent.Builder,Builder for the ShareVideoContent interface.,setContentDescription(java.lang.String contentDescription),Sets the description of the video.,ShareVideoContent.Builder
com.facebook.share.model.ShareVideoContent.Builder,Builder for the ShareVideoContent interface.,setContentTitle(java.lang.String contentTitle),Sets the title to display for this video.,ShareVideoContent.Builder
com.facebook.share.model.ShareVideoContent.Builder,Builder for the ShareVideoContent interface.,setPreviewPhoto(SharePhoto previewPhoto),Sets the photo to be used as a preview for the video.,ShareVideoContent.Builder
com.facebook.share.model.ShareVideoContent.Builder,Builder for the ShareVideoContent interface.,setVideo(ShareVideo video),Sets the video to be shared.,ShareVideoContent.Builder
com.facebook.appevents.suggestedevents.SuggestedEventsManager,N/A,enable(),N/A,static void
com.facebook.appevents.suggestedevents.SuggestedEventsManager,N/A,isEnabled(),N/A,static boolean
com.facebook.appevents.suggestedevents.SuggestedEventsManager,N/A,trackActivity(Activity activity),N/A,static void
com.facebook.login.widget.ToolTipPopup,This displays a popup tool tip for a specified view.,dismiss(),Dismiss the tool tip,void
com.facebook.login.widget.ToolTipPopup,This displays a popup tool tip for a specified view.,setNuxDisplayTime(long displayTime),Set the time (in milliseconds) the tool tip will be displayed.,void
com.facebook.login.widget.ToolTipPopup,This displays a popup tool tip for a specified view.,setStyle(ToolTipPopup.Style mStyle),Sets the ToolTipPopup.Style of this tool tip.,void
com.facebook.login.widget.ToolTipPopup,This displays a popup tool tip for a specified view.,show(),Display this tool tip to the user,void
com.facebook.login.widget.ToolTipPopup.Style,The values here describe the styles available for the tool tip class.,valueOf(java.lang.String name),Returns the enum constant of this type with the specified name.,static ToolTipPopup.Style
com.facebook.login.widget.ToolTipPopup.Style,The values here describe the styles available for the tool tip class.,values(),"Returns an array containing the constants of this enum type, in the order they are declared.",static ToolTipPopup.Style[]
com.facebook.appevents.UserDataStore,User data types,getAllHashedUserData(),N/A,static java.lang.String
com.facebook.appevents.UserDataStore,User data types,getInternalHashedUserData(),N/A,"static java.util.Map<java.lang.String,java.lang.String>"
com.facebook.appevents.UserDataStore,User data types,removeRules(java.util.List<java.lang.String> rules),N/A,static void
com.facebook.appevents.codeless.ViewIndexer,Deprecated. ,"buildAppIndexingRequest(java.lang.String appIndex, AccessToken accessToken, java.lang.String appId, java.lang.String requestType)",N/A,static GraphRequest
com.facebook.appevents.codeless.ViewIndexer,Deprecated. ,schedule(),N/A,void
com.facebook.appevents.codeless.ViewIndexer,Deprecated. ,sendToServerUnity(java.lang.String tree),Deprecated. ,void
com.facebook.appevents.codeless.ViewIndexer,Deprecated. ,sendToServerUnityInstance(java.lang.String tree),N/A,static void
com.facebook.appevents.codeless.ViewIndexer,Deprecated. ,unschedule(),N/A,void
com.facebook.appevents.suggestedevents.ViewOnClickListener,N/A,onClick(View view),N/A,void
com.facebook.WebDialog,Gets the theme used by WebDialog,getWebDialogTheme(),Gets the theme used by WebDialog,static int
com.facebook.WebDialog,Gets the theme used by WebDialog,setWebDialogTheme(int theme),Sets the theme used by WebDialog,static void
