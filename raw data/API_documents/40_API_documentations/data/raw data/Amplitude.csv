class_name,class_description,method,method_description,data_type
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",disableLocationListening(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",enableLocationListening(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",enableNewDeviceIdPerInstall(boolean newDeviceIdPerInstall),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",endSession(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",getDeviceId(),Deprecated.,static java.lang.String
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",getInstance(),Gets the default instance.,static AmplitudeClient
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","initialize(android.content.Context context,          java.lang.String apiKey)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","initialize(android.content.Context context,          java.lang.String apiKey,          java.lang.String userId)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",logEvent(java.lang.String eventType),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",logRevenue(double amount),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","logRevenue(java.lang.String productId,          int quantity,          double price)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","logRevenue(java.lang.String productId,          int quantity,          double price,          java.lang.String receipt,          java.lang.String receiptSignature)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",setOptOut(boolean optOut),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",setSessionTimeoutMillis(long sessionTimeoutMillis),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",setUserId(java.lang.String userId),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",setUserProperties(org.json.JSONObject userProperties),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","setUserProperties(org.json.JSONObject userProperties,                 boolean replace)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",startSession(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",uploadEvents(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",useAdvertisingIdForDeviceId(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",disableLocationListening(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",enableLocationListening(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",enableNewDeviceIdPerInstall(boolean newDeviceIdPerInstall),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",endSession(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",getDeviceId(),Deprecated.,static java.lang.String
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",getInstance(),Gets the default instance.,static AmplitudeClient
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","initialize(android.content.Context context,          java.lang.String apiKey)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","initialize(android.content.Context context,          java.lang.String apiKey,          java.lang.String userId)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",logEvent(java.lang.String eventType),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",logRevenue(double amount),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","logRevenue(java.lang.String productId,          int quantity,          double price)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","logRevenue(java.lang.String productId,          int quantity,          double price,          java.lang.String receipt,          java.lang.String receiptSignature)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",setOptOut(boolean optOut),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",setSessionTimeoutMillis(long sessionTimeoutMillis),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",setUserId(java.lang.String userId),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",setUserProperties(org.json.JSONObject userProperties),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();","setUserProperties(org.json.JSONObject userProperties,                 boolean replace)",Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",startSession(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",uploadEvents(),Deprecated.,static void
com.amplitude.api.Amplitude,"Amplitude This is the main Amplitude class that manages SDK instances.  NOTE: All of the methods except getInstance() have been deprecated. Please call those methods on the AmplitudeClient instance instead, for example: Amplitude.getInstance().logEvent();",useAdvertisingIdForDeviceId(),Deprecated.,static void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",bytesToHexString(byte[] bytes),Internal method to convert bytes to hex string,protected java.lang.String
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",clearUserProperties(),Clear user properties.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",contextAndApiKeySet(java.lang.String methodName),Internal method to check whether application context and api key are set,protected boolean
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",disableLocationListening(),Disable location listening in the SDK.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",enableForegroundTracking(android.app.Application app),Enable foreground tracking for the SDK.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",enableLocationListening(),Enable location listening in the SDK.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",enableLogging(boolean enableLogging),Enable/disable message logging by the SDK.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",enableNewDeviceIdPerInstall(boolean newDeviceIdPerInstall),Deprecated.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",getCurrentTimeMillis(),Internal method to fetch the current time millis.,protected long
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",getDeviceId(),Get the current device id.,java.lang.String
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",getInstance(),Gets the default AmplitudeClient instance.,static AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",getSessionId(),Gets the current session id.,long
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",getUserId(),Gets the user's id.,java.lang.String
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",identify(Identify identify),Identify.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","initialize(android.content.Context context,          java.lang.String apiKey)",Initialize the Amplitude SDK with the Android application context and your Amplitude App API key.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","initialize(android.content.Context context,          java.lang.String apiKey,          java.lang.String userId)","Initialize the Amplitude SDK with the Android application context, your Amplitude App API key, and a user ID for the current user.",AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",isOptedOut(),Returns whether or not the user is opted out of tracking.,boolean
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",logEvent(java.lang.String eventType),Log an event with the specified event type.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties)",Log an event with the specified event type and event properties.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties,        boolean outOfSession)","Log an event with the specified event type, event properties, with optional out of session flag.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties,        org.json.JSONObject groups)","Log an event with the specified event type, event properties, and groups.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties,        org.json.JSONObject groups,        boolean outOfSession)","Log event with the specified event type, event properties, groups, with optional out of session flag.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties,        org.json.JSONObject apiProperties,        org.json.JSONObject userProperties,        org.json.JSONObject groups,        long timestamp,        boolean outOfSession)",Log event.,protected long
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEventAsync(java.lang.String eventType,             org.json.JSONObject eventProperties,             org.json.JSONObject apiProperties,             org.json.JSONObject userProperties,             org.json.JSONObject groups,             long timestamp,             boolean outOfSession)",Log event async.,protected void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",logEventSync(java.lang.String eventType),Log an event with the specified event type.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEventSync(java.lang.String eventType,            org.json.JSONObject eventProperties)",Log an event with the specified event type and event properties.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEventSync(java.lang.String eventType,            org.json.JSONObject eventProperties,            boolean outOfSession)","Log an event with the specified event type, event properties, with optional out of session flag.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEventSync(java.lang.String eventType,            org.json.JSONObject eventProperties,            org.json.JSONObject group)","Log an event with the specified event type, event properties, and groups.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEventSync(java.lang.String eventType,            org.json.JSONObject eventProperties,            org.json.JSONObject groups,            boolean outOfSession)","Log event with the specified event type, event properties, groups, with optional out of session flag.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",logRevenue(double amount),Deprecated. - use logRevenueV2 instead,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logRevenue(java.lang.String productId,          int quantity,          double price)",Deprecated. - use logRevenueV2 instead,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logRevenue(java.lang.String productId,          int quantity,          double price,          java.lang.String receipt,          java.lang.String receiptSignature)",Deprecated. - use logRevenueV2 instead,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",logRevenueV2(Revenue revenue),Log revenue v2.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","makeEventUploadPostRequest(okhttp3.OkHttpClient client,                          java.lang.String events,                          long maxEventId,                          long maxIdentifyId)",Internal method to generate the event upload post request.,protected void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","mergeEventsAndIdentifys(java.util.List<org.json.JSONObject> events,                       java.util.List<org.json.JSONObject> identifys,                       long numEvents)",Internal method to merge unsent events and identifies into a single array by sequence number.,"protected android.util.Pair<android.util.Pair<java.lang.Long,java.lang.Long>,org.json.JSONArray>"
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",replaceWithJSONNull(java.lang.Object obj),Internal method to replace null event fields with JSON null object.,protected java.lang.Object
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",runOnLogThread(java.lang.Runnable r),N/A,protected void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","saveEvent(java.lang.String eventType,         org.json.JSONObject event)",Save event long.,protected long
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setDeviceId(java.lang.String deviceId),Sets a custom device id.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setEventMaxCount(int eventMaxCount),Sets event max count.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setEventUploadMaxBatchSize(int eventUploadMaxBatchSize),Sets event upload max batch size.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setEventUploadPeriodMillis(int eventUploadPeriodMillis),Sets event upload period millis.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setEventUploadThreshold(int eventUploadThreshold),Sets event upload threshold.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setFlushEventsOnClose(boolean flushEventsOnClose),Enable/disable flushing of unsent events on app close (enabled by default).,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","setGroup(java.lang.String groupType,        java.lang.Object groupName)",Sets the user's group(s).,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setLogLevel(int logLevel),Sets the logging level.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setMinTimeBetweenSessionsMillis(long minTimeBetweenSessionsMillis),Sets min time between sessions millis.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setOffline(boolean offline),Sets offline.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setOptOut(boolean optOut),Sets opt out.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setSessionTimeoutMillis(long sessionTimeoutMillis),Sets session timeout millis.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setUserId(java.lang.String userId),Sets the user id (can be null).,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setUserProperties(org.json.JSONObject userProperties),Sets user properties.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","setUserProperties(org.json.JSONObject userProperties,                 boolean replace)",Deprecated.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",trackSessionEvents(boolean trackingSessionEvents),Track session events amplitude client.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",truncate(org.json.JSONArray array),Truncate values in a JSON array.,org.json.JSONArray
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",truncate(org.json.JSONObject object),Truncate values in a JSON object.,org.json.JSONObject
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",truncate(java.lang.String value),Truncate a string to 1024 characters.,java.lang.String
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",updateServer(),Internal method to upload unsent events.,protected void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",updateServer(boolean limit),Internal method to upload unsent events.,protected void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",uploadEvents(),Force SDK to upload any unsent events.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",useAdvertisingIdForDeviceId(),Whether to use the Android advertising ID (ADID) as the user's device ID.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",validateLogEvent(java.lang.String eventType),Validate the event type being logged.,protected boolean
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",bytesToHexString(byte[] bytes),Internal method to convert bytes to hex string,protected java.lang.String
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",clearUserProperties(),Clear user properties.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",contextAndApiKeySet(java.lang.String methodName),Internal method to check whether application context and api key are set,protected boolean
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",disableLocationListening(),Disable location listening in the SDK.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",enableForegroundTracking(android.app.Application app),Enable foreground tracking for the SDK.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",enableLocationListening(),Enable location listening in the SDK.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",enableLogging(boolean enableLogging),Enable/disable message logging by the SDK.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",enableNewDeviceIdPerInstall(boolean newDeviceIdPerInstall),Deprecated.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",getCurrentTimeMillis(),Internal method to fetch the current time millis.,protected long
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",getDeviceId(),Get the current device id.,java.lang.String
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",getInstance(),Gets the default AmplitudeClient instance.,static AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",getSessionId(),Gets the current session id.,long
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",getUserId(),Gets the user's id.,java.lang.String
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",identify(Identify identify),Identify.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","initialize(android.content.Context context,          java.lang.String apiKey)",Initialize the Amplitude SDK with the Android application context and your Amplitude App API key.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","initialize(android.content.Context context,          java.lang.String apiKey,          java.lang.String userId)","Initialize the Amplitude SDK with the Android application context, your Amplitude App API key, and a user ID for the current user.",AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",isOptedOut(),Returns whether or not the user is opted out of tracking.,boolean
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",logEvent(java.lang.String eventType),Log an event with the specified event type.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties)",Log an event with the specified event type and event properties.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties,        boolean outOfSession)","Log an event with the specified event type, event properties, with optional out of session flag.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties,        org.json.JSONObject groups)","Log an event with the specified event type, event properties, and groups.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties,        org.json.JSONObject groups,        boolean outOfSession)","Log event with the specified event type, event properties, groups, with optional out of session flag.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEvent(java.lang.String eventType,        org.json.JSONObject eventProperties,        org.json.JSONObject apiProperties,        org.json.JSONObject userProperties,        org.json.JSONObject groups,        long timestamp,        boolean outOfSession)",Log event.,protected long
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEventAsync(java.lang.String eventType,             org.json.JSONObject eventProperties,             org.json.JSONObject apiProperties,             org.json.JSONObject userProperties,             org.json.JSONObject groups,             long timestamp,             boolean outOfSession)",Log event async.,protected void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",logEventSync(java.lang.String eventType),Log an event with the specified event type.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEventSync(java.lang.String eventType,            org.json.JSONObject eventProperties)",Log an event with the specified event type and event properties.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEventSync(java.lang.String eventType,            org.json.JSONObject eventProperties,            boolean outOfSession)","Log an event with the specified event type, event properties, with optional out of session flag.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEventSync(java.lang.String eventType,            org.json.JSONObject eventProperties,            org.json.JSONObject group)","Log an event with the specified event type, event properties, and groups.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logEventSync(java.lang.String eventType,            org.json.JSONObject eventProperties,            org.json.JSONObject groups,            boolean outOfSession)","Log event with the specified event type, event properties, groups, with optional out of session flag.",void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",logRevenue(double amount),Deprecated. - use logRevenueV2 instead,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logRevenue(java.lang.String productId,          int quantity,          double price)",Deprecated. - use logRevenueV2 instead,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","logRevenue(java.lang.String productId,          int quantity,          double price,          java.lang.String receipt,          java.lang.String receiptSignature)",Deprecated. - use logRevenueV2 instead,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",logRevenueV2(Revenue revenue),Log revenue v2.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","makeEventUploadPostRequest(okhttp3.OkHttpClient client,                          java.lang.String events,                          long maxEventId,                          long maxIdentifyId)",Internal method to generate the event upload post request.,protected void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","mergeEventsAndIdentifys(java.util.List<org.json.JSONObject> events,                       java.util.List<org.json.JSONObject> identifys,                       long numEvents)",Internal method to merge unsent events and identifies into a single array by sequence number.,"protected android.util.Pair<android.util.Pair<java.lang.Long,java.lang.Long>,org.json.JSONArray>"
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",replaceWithJSONNull(java.lang.Object obj),Internal method to replace null event fields with JSON null object.,protected java.lang.Object
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",runOnLogThread(java.lang.Runnable r),N/A,protected void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","saveEvent(java.lang.String eventType,         org.json.JSONObject event)",Save event long.,protected long
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setDeviceId(java.lang.String deviceId),Sets a custom device id.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setEventMaxCount(int eventMaxCount),Sets event max count.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setEventUploadMaxBatchSize(int eventUploadMaxBatchSize),Sets event upload max batch size.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setEventUploadPeriodMillis(int eventUploadPeriodMillis),Sets event upload period millis.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setEventUploadThreshold(int eventUploadThreshold),Sets event upload threshold.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setFlushEventsOnClose(boolean flushEventsOnClose),Enable/disable flushing of unsent events on app close (enabled by default).,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","setGroup(java.lang.String groupType,        java.lang.Object groupName)",Sets the user's group(s).,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setLogLevel(int logLevel),Sets the logging level.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setMinTimeBetweenSessionsMillis(long minTimeBetweenSessionsMillis),Sets min time between sessions millis.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setOffline(boolean offline),Sets offline.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setOptOut(boolean optOut),Sets opt out.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setSessionTimeoutMillis(long sessionTimeoutMillis),Sets session timeout millis.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setUserId(java.lang.String userId),Sets the user id (can be null).,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",setUserProperties(org.json.JSONObject userProperties),Sets user properties.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())","setUserProperties(org.json.JSONObject userProperties,                 boolean replace)",Deprecated.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",trackSessionEvents(boolean trackingSessionEvents),Track session events amplitude client.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",truncate(org.json.JSONArray array),Truncate values in a JSON array.,org.json.JSONArray
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",truncate(org.json.JSONObject object),Truncate values in a JSON object.,org.json.JSONObject
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",truncate(java.lang.String value),Truncate a string to 1024 characters.,java.lang.String
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",updateServer(),Internal method to upload unsent events.,protected void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",updateServer(boolean limit),Internal method to upload unsent events.,protected void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",uploadEvents(),Force SDK to upload any unsent events.,void
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",useAdvertisingIdForDeviceId(),Whether to use the Android advertising ID (ADID) as the user's device ID.,AmplitudeClient
com.amplitude.api.AmplitudeClient,"AmplitudeClient This is the SDK instance class that contains all of the SDK functionality. Note: call the methods on the default shared instance in the Amplitude class, for example: Amplitude.getInstance().logEvent(); Many of the SDK functions return the SDK instance back, allowing you to chain multiple method calls together, for example: Amplitude.getInstance().initialize(this, ""APIKEY"").enableForegroundTracking(getApplication())",validateLogEvent(java.lang.String eventType),Validate the event type being logged.,protected boolean
com.amplitude.api.AmplitudeLog,Created by danieljih on 10/16/15.,getLogger(),N/A,static AmplitudeLog
com.amplitude.api.AmplitudeLog,Created by danieljih on 10/16/15.,getLogger(),N/A,static AmplitudeLog
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"addUserProperty(java.lang.String property,               double value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"addUserProperty(java.lang.String property,               float value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"addUserProperty(java.lang.String property,               int value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"addUserProperty(java.lang.String property,               long value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"addUserProperty(java.lang.String property,               java.lang.String value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"addUserPropertyDict(java.lang.String property,                   java.lang.String values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  boolean value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  boolean[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  double value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  double[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  float value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  float[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  int value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  int[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  long value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  long[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  java.lang.String value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserProperty(java.lang.String property,                  java.lang.String[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserPropertyDict(java.lang.String property,                      java.lang.String values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"appendUserPropertyList(java.lang.String property,                      java.lang.String values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,clearUserProperties(),N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,enableForegroundTracking(android.app.Application app),N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,endSession(),Deprecated.,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,getDeviceId(),N/A,static java.lang.String
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"init(android.content.Context context,    java.lang.String apiKey)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"init(android.content.Context context,    java.lang.String apiKey,    java.lang.String userId)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,logEvent(java.lang.String event),N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"logEvent(java.lang.String event,        java.lang.String jsonProperties)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"logEvent(java.lang.String event,        java.lang.String jsonProperties,        boolean outOfSession)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,logRevenue(double amount),N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"logRevenue(java.lang.String productId,          int quantity,          double price)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"logRevenue(java.lang.String productId,          int quantity,          double price,          java.lang.String receipt,          java.lang.String receiptSignature)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   boolean value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   boolean[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   double value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   double[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   float value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   float[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   int value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   int[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   long value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   long[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   java.lang.String value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserProperty(java.lang.String property,                   java.lang.String[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserPropertyDict(java.lang.String property,                       java.lang.String values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setOnceUserPropertyList(java.lang.String property,                       java.lang.String values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,setOptOut(boolean enabled),N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,setUserId(java.lang.String userId),N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,setUserProperties(java.lang.String jsonProperties),N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               boolean value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               boolean[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               double value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               double[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               float value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               float[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               int value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               int[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               long value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               long[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               java.lang.String value)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserProperty(java.lang.String property,               java.lang.String[] values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserPropertyDict(java.lang.String property,                   java.lang.String values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,"setUserPropertyList(java.lang.String property,                   java.lang.String values)",N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,startSession(),Deprecated.,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,ToJSONObject(java.lang.String jsonString),N/A,static org.json.JSONObject
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,trackSessionEvents(boolean enabled),N/A,static void
com.amplitude.unity.plugins.AmplitudePlugin,Deprecated.,unsetUserProperty(java.lang.String property),N/A,static void
com.amplitude.api.Constants,N/A,N/A,N/A,N/A
com.amplitude.api.Constants,N/A,N/A,N/A,N/A
com.amplitude.api.DeviceInfo,N/A,generateUUID(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getAdvertisingId(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getBrand(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getCarrier(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getCountry(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getGeocoder(),N/A,protected android.location.Geocoder
com.amplitude.api.DeviceInfo,N/A,getLanguage(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getManufacturer(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getModel(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getMostRecentLocation(),N/A,android.location.Location
com.amplitude.api.DeviceInfo,N/A,getOsName(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getOsVersion(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getVersionName(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,isGooglePlayServicesEnabled(),N/A,boolean
com.amplitude.api.DeviceInfo,N/A,isLimitAdTrackingEnabled(),N/A,boolean
com.amplitude.api.DeviceInfo,N/A,isLocationListening(),N/A,boolean
com.amplitude.api.DeviceInfo,N/A,prefetch(),N/A,void
com.amplitude.api.DeviceInfo,N/A,setLocationListening(boolean locationListening),N/A,void
com.amplitude.api.DeviceInfo,N/A,generateUUID(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getAdvertisingId(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getBrand(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getCarrier(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getCountry(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getGeocoder(),N/A,protected android.location.Geocoder
com.amplitude.api.DeviceInfo,N/A,getLanguage(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getManufacturer(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getModel(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getMostRecentLocation(),N/A,android.location.Location
com.amplitude.api.DeviceInfo,N/A,getOsName(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getOsVersion(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,getVersionName(),N/A,java.lang.String
com.amplitude.api.DeviceInfo,N/A,isGooglePlayServicesEnabled(),N/A,boolean
com.amplitude.api.DeviceInfo,N/A,isLimitAdTrackingEnabled(),N/A,boolean
com.amplitude.api.DeviceInfo,N/A,isLocationListening(),N/A,boolean
com.amplitude.api.DeviceInfo,N/A,prefetch(),N/A,void
com.amplitude.api.DeviceInfo,N/A,setLocationListening(boolean locationListening),N/A,void
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   double value)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   float value)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   int value)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   org.json.JSONObject values)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   long value)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   java.lang.String value)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      boolean value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      boolean[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      double value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      double[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      float value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      float[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      int value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      int[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      org.json.JSONArray values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      org.json.JSONObject values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      long value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      long[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      java.lang.String value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      java.lang.String[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.",clearAll(),Clear all user properties.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       boolean value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       boolean[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       double value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       double[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       float value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       float[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       int value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       int[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       org.json.JSONArray values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       org.json.JSONObject values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       long value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       long[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       java.lang.String value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       java.lang.String[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   boolean value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   boolean[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   double value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   double[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   float value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   float[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   int value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   int[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   org.json.JSONArray values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   org.json.JSONObject values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   long value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   long[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   java.lang.Object value)",Deprecated.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   java.lang.String value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   java.lang.String[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       boolean value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       boolean[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       double value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       double[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       float value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       float[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       int value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       int[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       org.json.JSONArray values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       org.json.JSONObject values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       long value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       long[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       java.lang.Object value)",Deprecated.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       java.lang.String value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       java.lang.String[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.",unset(java.lang.String property),Unset and remove a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   double value)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   float value)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   int value)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   org.json.JSONObject values)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   long value)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","add(java.lang.String property,   java.lang.String value)",Increment a user property by some numerical value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      boolean value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      boolean[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      double value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      double[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      float value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      float[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      int value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      int[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      org.json.JSONArray values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      org.json.JSONObject values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      long value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      long[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      java.lang.String value)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","append(java.lang.String property,      java.lang.String[] values)",Append a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.",clearAll(),Clear all user properties.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       boolean value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       boolean[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       double value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       double[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       float value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       float[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       int value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       int[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       org.json.JSONArray values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       org.json.JSONObject values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       long value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       long[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       java.lang.String value)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","prepend(java.lang.String property,       java.lang.String[] values)",Prepend a value or values to a user property.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   boolean value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   boolean[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   double value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   double[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   float value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   float[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   int value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   int[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   org.json.JSONArray values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   org.json.JSONObject values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   long value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   long[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   java.lang.Object value)",Deprecated.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   java.lang.String value)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","set(java.lang.String property,   java.lang.String[] values)",Sets a user property value.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       boolean value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       boolean[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       double value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       double[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       float value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       float[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       int value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       int[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       org.json.JSONArray values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       org.json.JSONObject values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       long value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       long[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       java.lang.Object value)",Deprecated.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       java.lang.String value)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.","setOnce(java.lang.String property,       java.lang.String[] values)",Sets a user property value only once.,Identify
com.amplitude.api.Identify,"Identify  Identify objects are a wrapper for user property operations. Each method adds a user  property operation to the Identify object, and returns the same Identify object, allowing  you to chain multiple method calls together, for example:  Identify identify = new Identify().set(""color"", ""green"").add(""karma"", 1);    Note: if the same user property is used  in multiple operations on a single Identify object, only the first operation on that  property will be saved, and the rest will be ignored.    After creating an Identify object and setting the desired operations, send it to Amplitude  servers by calling Amplitude.getInstance().identify(identify); and pass in the object.",unset(java.lang.String property),Unset and remove a user property.,Identify
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",clone(),Clones this object.,java.lang.Object
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",engineDigest(),Completes the hash computation by performing final operations such as padding.,byte[]
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.","engineDigest(byte[] hashvalue,            int offset,            int length)",Completes the hash computation by performing final operations such as padding.,int
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",engineGetDigestLength(),Returns the digest length in bytes.,int
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",engineReset(),Reset then initialize the digest context. Overrides the protected abstract method of java.security.MessageDigestSpi.,void
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",engineUpdate(byte input),Updates the digest using the specified byte.,void
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.","engineUpdate(byte[] input,            int offset,            int length)","Updates the digest using the specified array of bytes, starting at the specified offset. Input length can be any size.",void
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",init(),Initialize the digest context.,protected void
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",clone(),Clones this object.,java.lang.Object
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",engineDigest(),Completes the hash computation by performing final operations such as padding.,byte[]
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.","engineDigest(byte[] hashvalue,            int offset,            int length)",Completes the hash computation by performing final operations such as padding.,int
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",engineGetDigestLength(),Returns the digest length in bytes.,int
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",engineReset(),Reset then initialize the digest context. Overrides the protected abstract method of java.security.MessageDigestSpi.,void
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",engineUpdate(byte input),Updates the digest using the specified byte.,void
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.","engineUpdate(byte[] input,            int offset,            int length)","Updates the digest using the specified array of bytes, starting at the specified offset. Input length can be any size.",void
com.amplitude.security.MD5,"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit ""fingerprint"" or ""message digest"" of the input.  It is conjectured that it is computationally infeasible to produce two messages having the same message digest, or to produce any message having a given prespecified target message digest. References:    Rivest R., ""The MD5     Message-Digest Algorithm"", Informational RFC 1321, MIT Laboratory for     Computer Science, and RSA Data Security, Inc., April 1992.   RFC Editor, ""Erratum     for RFC 1321"", 2002-06-14, 2001-01-19, 2000-04-12.",init(),Initialize the digest context.,protected void
com.amplitude.api.PinnedAmplitudeClient,PinnedAmplitudeClient This is a version of the AmplitudeClient that supports SSL pinning for encrypted requests. Please contact Amplitude Support before you ship any products with SSL pinning enabled so that we are aware and can provide documentation and implementation help.,getInstance(),Gets the default instance.,static PinnedAmplitudeClient
com.amplitude.api.PinnedAmplitudeClient,PinnedAmplitudeClient This is a version of the AmplitudeClient that supports SSL pinning for encrypted requests. Please contact Amplitude Support before you ship any products with SSL pinning enabled so that we are aware and can provide documentation and implementation help.,getPinnedCertSslSocketFactory(),Gets pinned cert ssl socket factory.,protected javax.net.ssl.SSLSocketFactory
com.amplitude.api.PinnedAmplitudeClient,PinnedAmplitudeClient This is a version of the AmplitudeClient that supports SSL pinning for encrypted requests. Please contact Amplitude Support before you ship any products with SSL pinning enabled so that we are aware and can provide documentation and implementation help.,getPinnedCertSslSocketFactory(PinnedAmplitudeClient.SSLContextBuilder context),Gets pinned cert ssl socket factory.,protected javax.net.ssl.SSLSocketFactory
com.amplitude.api.PinnedAmplitudeClient,PinnedAmplitudeClient This is a version of the AmplitudeClient that supports SSL pinning for encrypted requests. Please contact Amplitude Support before you ship any products with SSL pinning enabled so that we are aware and can provide documentation and implementation help.,"initialize(android.content.Context context,          java.lang.String apiKey,          java.lang.String userId)","Initialize the Amplitude SDK with the Android application context, your Amplitude App API key, and a user ID for the current user.",AmplitudeClient
com.amplitude.api.PinnedAmplitudeClient,PinnedAmplitudeClient This is a version of the AmplitudeClient that supports SSL pinning for encrypted requests. Please contact Amplitude Support before you ship any products with SSL pinning enabled so that we are aware and can provide documentation and implementation help.,getInstance(),Gets the default instance.,static PinnedAmplitudeClient
com.amplitude.api.PinnedAmplitudeClient,PinnedAmplitudeClient This is a version of the AmplitudeClient that supports SSL pinning for encrypted requests. Please contact Amplitude Support before you ship any products with SSL pinning enabled so that we are aware and can provide documentation and implementation help.,getPinnedCertSslSocketFactory(),Gets pinned cert ssl socket factory.,protected javax.net.ssl.SSLSocketFactory
com.amplitude.api.PinnedAmplitudeClient,PinnedAmplitudeClient This is a version of the AmplitudeClient that supports SSL pinning for encrypted requests. Please contact Amplitude Support before you ship any products with SSL pinning enabled so that we are aware and can provide documentation and implementation help.,getPinnedCertSslSocketFactory(PinnedAmplitudeClient.SSLContextBuilder context),Gets pinned cert ssl socket factory.,protected javax.net.ssl.SSLSocketFactory
com.amplitude.api.PinnedAmplitudeClient,PinnedAmplitudeClient This is a version of the AmplitudeClient that supports SSL pinning for encrypted requests. Please contact Amplitude Support before you ship any products with SSL pinning enabled so that we are aware and can provide documentation and implementation help.,"initialize(android.content.Context context,          java.lang.String apiKey,          java.lang.String userId)","Initialize the Amplitude SDK with the Android application context, your Amplitude App API key, and a user ID for the current user.",AmplitudeClient
com.amplitude.api.PinnedAmplitudeClient.SSLContextBuilder,"SSl context builder, used to generate the SSL context.",addCertificate(java.lang.String certificateBase64),Add certificate ssl context builder.,PinnedAmplitudeClient.SSLContextBuilder
com.amplitude.api.PinnedAmplitudeClient.SSLContextBuilder,"SSl context builder, used to generate the SSL context.",build(),Build ssl context.,javax.net.ssl.SSLContext
com.amplitude.api.PinnedAmplitudeClient.SSLContextBuilder,"SSl context builder, used to generate the SSL context.",addCertificate(java.lang.String certificateBase64),Add certificate ssl context builder.,PinnedAmplitudeClient.SSLContextBuilder
com.amplitude.api.PinnedAmplitudeClient.SSLContextBuilder,"SSl context builder, used to generate the SSL context.",build(),Build ssl context.,javax.net.ssl.SSLContext
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",equals(java.lang.Object o),Custom equals function to compare 2 revenue objects.,boolean
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",hashCode(),Custom hashcode generator function for Revenue object.,int
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",isValidRevenue(),Verifies that revenue object is valid and contains the required fields,protected boolean
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setEventProperties(org.json.JSONObject eventProperties),"Set event properties for the revenue event, like you would for an event during logEvent.",Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setPrice(double price),Set a value for the price.,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setProductId(java.lang.String productId),Set a value for the product identifier.,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setQuantity(int quantity),Set a value for the quantity.,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.","setReceipt(java.lang.String receipt,          java.lang.String receiptSignature)",Set the receipt and receipt signature.,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setRevenueProperties(org.json.JSONObject revenueProperties),Deprecated. - use Revenue.setEventProperties() instead,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setRevenueType(java.lang.String revenueType),Set a value for the revenue type.,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",toJSONObject(),Converts Revenue object into a JSONObject to send to Amplitude servers,protected org.json.JSONObject
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",equals(java.lang.Object o),Custom equals function to compare 2 revenue objects.,boolean
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",hashCode(),Custom hashcode generator function for Revenue object.,int
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",isValidRevenue(),Verifies that revenue object is valid and contains the required fields,protected boolean
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setEventProperties(org.json.JSONObject eventProperties),"Set event properties for the revenue event, like you would for an event during logEvent.",Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setPrice(double price),Set a value for the price.,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setProductId(java.lang.String productId),Set a value for the product identifier.,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setQuantity(int quantity),Set a value for the quantity.,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.","setReceipt(java.lang.String receipt,          java.lang.String receiptSignature)",Set the receipt and receipt signature.,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setRevenueProperties(org.json.JSONObject revenueProperties),Deprecated. - use Revenue.setEventProperties() instead,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",setRevenueType(java.lang.String revenueType),Set a value for the revenue type.,Revenue
com.amplitude.api.Revenue,"Revenue Revenue objects are a wrapper for revenue events and revenue properties. This should be used in conjunction with AmplitudeClient.logRevenueV2() to record in-app transactions. Each set method returns the same Revenue object, allowing you to chain multiple set calls together, for example: Revenue revenue = new Revenue().setProductId(""com.product.id"").setPrice(3.99);  Note: price is a required field. If quantity is not specified, it will default to 1. productId, receipt and receiptSignature re required if you want to verify the revenue event.  Note: the total revenue amount is calculated as price * quantity.  After creating a Revenue object and setting the desired transaction properties, send it to Amplitude servers by calling Amplitude.getInstance().logRevenueV2(revenue); and pass in the object.",toJSONObject(),Converts Revenue object into a JSONObject to send to Amplitude servers,protected org.json.JSONObject
com.amplitude.api.Utils,Created by danieljih on 4/18/16.,N/A,N/A,N/A
com.amplitude.api.Utils,Created by danieljih on 4/18/16.,N/A,N/A,N/A
com.amplitude.api.WorkerThread,N/A,N/A,N/A,N/A
com.amplitude.api.WorkerThread,N/A,N/A,N/A,N/A
